
demos/freertos_multithread/main.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <g_pfnVectors>:
       0:	00 50 00 20 31 82 00 00 7d 82 00 00 7d 82 00 00     .P. 1...}...}...
      10:	7d 82 00 00 7d 82 00 00 7d 82 00 00 00 00 00 00     }...}...}.......
	...
      2c:	d5 7d 00 00 7d 82 00 00 00 00 00 00 e1 7e 00 00     .}..}........~..
      3c:	1d 7f 00 00 7d 82 00 00 7d 82 00 00 7d 82 00 00     ....}...}...}...
      4c:	7d 82 00 00 7d 82 00 00 7d 82 00 00 7d 82 00 00     }...}...}...}...
      5c:	7d 82 00 00 7d 82 00 00 7d 82 00 00 7d 82 00 00     }...}...}...}...
      6c:	7d 82 00 00 7d 82 00 00 7d 82 00 00 7d 82 00 00     }...}...}...}...
      7c:	7d 82 00 00 7d 82 00 00 7d 82 00 00 7d 82 00 00     }...}...}...}...
      8c:	7d 82 00 00 7d 82 00 00 7d 82 00 00 7d 82 00 00     }...}...}...}...
      9c:	7d 82 00 00 7d 82 00 00 7d 82 00 00 7d 82 00 00     }...}...}...}...
      ac:	7d 82 00 00 7d 82 00 00 7d 82 00 00 7d 82 00 00     }...}...}...}...
      bc:	7d 82 00 00 7d 82 00 00 7d 82 00 00 7d 82 00 00     }...}...}...}...
      cc:	7d 82 00 00 7d 82 00 00 7d 82 00 00 ed 01 00 00     }...}...}.......
      dc:	7d 82 00 00 7d 82 00 00 7d 82 00 00 7d 82 00 00     }...}...}...}...
	...
     108:	5f f8 08 f1                                         _...

0000010c <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     10c:	b580      	push	{r7, lr}
     10e:	b084      	sub	sp, #16
     110:	af00      	add	r7, sp, #0
     112:	6078      	str	r0, [r7, #4]
void *pvReturn = NULL; 
     114:	f04f 0300 	mov.w	r3, #0
     118:	60fb      	str	r3, [r7, #12]

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
     11a:	687b      	ldr	r3, [r7, #4]
     11c:	f003 0307 	and.w	r3, r3, #7
     120:	2b00      	cmp	r3, #0
     122:	d005      	beq.n	130 <pvPortMalloc+0x24>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
     124:	687b      	ldr	r3, [r7, #4]
     126:	f023 0307 	bic.w	r3, r3, #7
     12a:	f103 0308 	add.w	r3, r3, #8
     12e:	607b      	str	r3, [r7, #4]
		}
	#endif

	vTaskSuspendAll();
     130:	f007 f88c 	bl	724c <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     134:	f244 4330 	movw	r3, #17456	; 0x4430
     138:	f2c2 0300 	movt	r3, #8192	; 0x2000
     13c:	681a      	ldr	r2, [r3, #0]
     13e:	687b      	ldr	r3, [r7, #4]
     140:	18d2      	adds	r2, r2, r3
     142:	f244 33ff 	movw	r3, #17407	; 0x43ff
     146:	429a      	cmp	r2, r3
     148:	d824      	bhi.n	194 <pvPortMalloc+0x88>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
     14a:	f244 4330 	movw	r3, #17456	; 0x4430
     14e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     152:	681a      	ldr	r2, [r3, #0]
     154:	687b      	ldr	r3, [r7, #4]
     156:	18d2      	adds	r2, r2, r3
     158:	f244 4330 	movw	r3, #17456	; 0x4430
     15c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     160:	681b      	ldr	r3, [r3, #0]
	#endif

	vTaskSuspendAll();
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
     162:	429a      	cmp	r2, r3
     164:	d916      	bls.n	194 <pvPortMalloc+0x88>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
     166:	f244 4330 	movw	r3, #17456	; 0x4430
     16a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     16e:	681a      	ldr	r2, [r3, #0]
     170:	f240 0330 	movw	r3, #48	; 0x30
     174:	f2c2 0300 	movt	r3, #8192	; 0x2000
     178:	18d3      	adds	r3, r2, r3
     17a:	60fb      	str	r3, [r7, #12]
			xNextFreeByte += xWantedSize;			
     17c:	f244 4330 	movw	r3, #17456	; 0x4430
     180:	f2c2 0300 	movt	r3, #8192	; 0x2000
     184:	681a      	ldr	r2, [r3, #0]
     186:	687b      	ldr	r3, [r7, #4]
     188:	18d2      	adds	r2, r2, r3
     18a:	f244 4330 	movw	r3, #17456	; 0x4430
     18e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     192:	601a      	str	r2, [r3, #0]
		}	
	}
	xTaskResumeAll();
     194:	f007 f86c 	bl	7270 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
     198:	68fb      	ldr	r3, [r7, #12]
}
     19a:	4618      	mov	r0, r3
     19c:	f107 0710 	add.w	r7, r7, #16
     1a0:	46bd      	mov	sp, r7
     1a2:	bd80      	pop	{r7, pc}

000001a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     1a4:	b480      	push	{r7}
     1a6:	b083      	sub	sp, #12
     1a8:	af00      	add	r7, sp, #0
     1aa:	6078      	str	r0, [r7, #4]
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
     1ac:	f107 070c 	add.w	r7, r7, #12
     1b0:	46bd      	mov	sp, r7
     1b2:	bc80      	pop	{r7}
     1b4:	4770      	bx	lr
     1b6:	bf00      	nop

000001b8 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
     1b8:	b480      	push	{r7}
     1ba:	af00      	add	r7, sp, #0
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
     1bc:	f244 4330 	movw	r3, #17456	; 0x4430
     1c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     1c4:	f04f 0200 	mov.w	r2, #0
     1c8:	601a      	str	r2, [r3, #0]
}
     1ca:	46bd      	mov	sp, r7
     1cc:	bc80      	pop	{r7}
     1ce:	4770      	bx	lr

000001d0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
     1d0:	b480      	push	{r7}
     1d2:	af00      	add	r7, sp, #0
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
     1d4:	f244 4330 	movw	r3, #17456	; 0x4430
     1d8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     1dc:	681b      	ldr	r3, [r3, #0]
     1de:	f5c3 4388 	rsb	r3, r3, #17408	; 0x4400
}
     1e2:	4618      	mov	r0, r3
     1e4:	46bd      	mov	sp, r7
     1e6:	bc80      	pop	{r7}
     1e8:	4770      	bx	lr
     1ea:	bf00      	nop

000001ec <USART2_IRQHandler>:
} serial_ch_msg;

/* IRQ handler to handle USART2 interrupts (both transmit and receive
 * interrupts). */
void USART2_IRQHandler(void)
{
     1ec:	b580      	push	{r7, lr}
     1ee:	b082      	sub	sp, #8
     1f0:	af00      	add	r7, sp, #0
    static signed portBASE_TYPE xHigherPriorityTaskWoken;
    serial_ch_msg rx_msg;

    /* If this interrupt is for a transmit... */
    if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET) {
     1f2:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     1f6:	f2c4 0000 	movt	r0, #16384	; 0x4000
     1fa:	f240 7127 	movw	r1, #1831	; 0x727
     1fe:	f002 fc19 	bl	2a34 <USART_GetITStatus>
     202:	4603      	mov	r3, r0
     204:	2b00      	cmp	r3, #0
     206:	d01a      	beq.n	23e <USART2_IRQHandler+0x52>
        /* "give" the serial_tx_wait_sem semaphore to notify processes that
         * the buffer has a spot free for the next byte.
         */
        xSemaphoreGiveFromISR(serial_tx_wait_sem, &xHigherPriorityTaskWoken);
     208:	f244 433c 	movw	r3, #17468	; 0x443c
     20c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     210:	681b      	ldr	r3, [r3, #0]
     212:	4618      	mov	r0, r3
     214:	f04f 0100 	mov.w	r1, #0
     218:	f244 4244 	movw	r2, #17476	; 0x4444
     21c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     220:	f04f 0300 	mov.w	r3, #0
     224:	f006 f95c 	bl	64e0 <xQueueGenericSendFromISR>

        /* Disables the transmit interrupt. */
        USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
     228:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     22c:	f2c4 0000 	movt	r0, #16384	; 0x4000
     230:	f240 7127 	movw	r1, #1831	; 0x727
     234:	f04f 0200 	mov.w	r2, #0
     238:	f002 f96e 	bl	2518 <USART_ITConfig>
     23c:	e029      	b.n	292 <USART2_IRQHandler+0xa6>
    /* If this interrupt is for a receive... */
    } else if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET) {
     23e:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     242:	f2c4 0000 	movt	r0, #16384	; 0x4000
     246:	f240 5125 	movw	r1, #1317	; 0x525
     24a:	f002 fbf3 	bl	2a34 <USART_GetITStatus>
     24e:	4603      	mov	r3, r0
     250:	2b00      	cmp	r3, #0
     252:	d01d      	beq.n	290 <USART2_IRQHandler+0xa4>
        /* Receive the byte from the buffer. */
        rx_msg.ch = USART_ReceiveData(USART2);
     254:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     258:	f2c4 0000 	movt	r0, #16384	; 0x4000
     25c:	f002 fa7a 	bl	2754 <USART_ReceiveData>
     260:	4603      	mov	r3, r0
     262:	b2db      	uxtb	r3, r3
     264:	713b      	strb	r3, [r7, #4]

        /* Queue the received byte. */
        if(!xQueueSendToBackFromISR(serial_rx_queue, &rx_msg, &xHigherPriorityTaskWoken)) {
     266:	f244 4340 	movw	r3, #17472	; 0x4440
     26a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     26e:	681b      	ldr	r3, [r3, #0]
     270:	4618      	mov	r0, r3
     272:	f107 0304 	add.w	r3, r7, #4
     276:	4619      	mov	r1, r3
     278:	f244 4244 	movw	r2, #17476	; 0x4444
     27c:	f2c2 0200 	movt	r2, #8192	; 0x2000
     280:	f04f 0300 	mov.w	r3, #0
     284:	f006 f92c 	bl	64e0 <xQueueGenericSendFromISR>
     288:	4603      	mov	r3, r0
     28a:	2b00      	cmp	r3, #0
     28c:	d101      	bne.n	292 <USART2_IRQHandler+0xa6>
            /* If there was an error queueing the received byte, freeze. */
            while(1);
     28e:	e7fe      	b.n	28e <USART2_IRQHandler+0xa2>
        }
    } else {
        /* Only transmit and receive interrupts should be enabled.  If this is
         * another type of interrupt, freeze.
         */
        while(1);
     290:	e7fe      	b.n	290 <USART2_IRQHandler+0xa4>
    }

    if(xHigherPriorityTaskWoken) {
     292:	f244 4344 	movw	r3, #17476	; 0x4444
     296:	f2c2 0300 	movt	r3, #8192	; 0x2000
     29a:	681b      	ldr	r3, [r3, #0]
     29c:	2b00      	cmp	r3, #0
     29e:	d001      	beq.n	2a4 <USART2_IRQHandler+0xb8>
        taskYIELD();
     2a0:	f007 fde0 	bl	7e64 <vPortYieldFromISR>
    }
}
     2a4:	f107 0708 	add.w	r7, r7, #8
     2a8:	46bd      	mov	sp, r7
     2aa:	bd80      	pop	{r7, pc}

000002ac <send_byte_rtos>:

void send_byte_rtos(char ch)
{
     2ac:	b580      	push	{r7, lr}
     2ae:	b082      	sub	sp, #8
     2b0:	af00      	add	r7, sp, #0
     2b2:	4603      	mov	r3, r0
     2b4:	71fb      	strb	r3, [r7, #7]
    /* Wait until the RS232 port can receive another byte (this semaphore is
     * "given" by the RS232 port interrupt when the buffer has room for another
     * byte.
     */
    while(!xSemaphoreTake(serial_tx_wait_sem, portMAX_DELAY));
     2b6:	bf00      	nop
     2b8:	f244 433c 	movw	r3, #17468	; 0x443c
     2bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
     2c0:	681b      	ldr	r3, [r3, #0]
     2c2:	4618      	mov	r0, r3
     2c4:	f04f 0100 	mov.w	r1, #0
     2c8:	f04f 32ff 	mov.w	r2, #4294967295
     2cc:	f04f 0300 	mov.w	r3, #0
     2d0:	f006 f94e 	bl	6570 <xQueueGenericReceive>
     2d4:	4603      	mov	r3, r0
     2d6:	2b00      	cmp	r3, #0
     2d8:	d0ee      	beq.n	2b8 <send_byte_rtos+0xc>

    /* Send the byte and enable the transmit interrupt (it is disabled by the
     * interrupt).
     */
    USART_SendData(USART2, ch);
     2da:	79fb      	ldrb	r3, [r7, #7]
     2dc:	b29b      	uxth	r3, r3
     2de:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     2e2:	f2c4 0000 	movt	r0, #16384	; 0x4000
     2e6:	4619      	mov	r1, r3
     2e8:	f002 fa20 	bl	272c <USART_SendData>
    USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
     2ec:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     2f0:	f2c4 0000 	movt	r0, #16384	; 0x4000
     2f4:	f240 7127 	movw	r1, #1831	; 0x727
     2f8:	f04f 0201 	mov.w	r2, #1
     2fc:	f002 f90c 	bl	2518 <USART_ITConfig>
}
     300:	f107 0708 	add.w	r7, r7, #8
     304:	46bd      	mov	sp, r7
     306:	bd80      	pop	{r7, pc}

00000308 <receive_byte_rtos>:

char receive_byte_rtos(void)
{
     308:	b580      	push	{r7, lr}
     30a:	b082      	sub	sp, #8
     30c:	af00      	add	r7, sp, #0
    serial_ch_msg msg;

    /* Wait for a byte to be queued by the receive interrupt handler. */
    while(!xQueueReceive(serial_rx_queue, &msg, portMAX_DELAY));
     30e:	bf00      	nop
     310:	f244 4340 	movw	r3, #17472	; 0x4440
     314:	f2c2 0300 	movt	r3, #8192	; 0x2000
     318:	681b      	ldr	r3, [r3, #0]
     31a:	4618      	mov	r0, r3
     31c:	f107 0304 	add.w	r3, r7, #4
     320:	4619      	mov	r1, r3
     322:	f04f 32ff 	mov.w	r2, #4294967295
     326:	f04f 0300 	mov.w	r3, #0
     32a:	f006 f921 	bl	6570 <xQueueGenericReceive>
     32e:	4603      	mov	r3, r0
     330:	2b00      	cmp	r3, #0
     332:	d0ed      	beq.n	310 <receive_byte_rtos+0x8>

    return msg.ch;
     334:	793b      	ldrb	r3, [r7, #4]
}
     336:	4618      	mov	r0, r3
     338:	f107 0708 	add.w	r7, r7, #8
     33c:	46bd      	mov	sp, r7
     33e:	bd80      	pop	{r7, pc}

00000340 <led_flash_task>:

void led_flash_task( void *pvParameters )
{
     340:	b580      	push	{r7, lr}
     342:	b082      	sub	sp, #8
     344:	af00      	add	r7, sp, #0
     346:	6078      	str	r0, [r7, #4]
    while(1) {
        /* Toggle the LED. */
        GPIOC->ODR = GPIOC->ODR ^ 0x00001000;
     348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     34c:	f2c4 0301 	movt	r3, #16385	; 0x4001
     350:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     354:	f2c4 0201 	movt	r2, #16385	; 0x4001
     358:	68d2      	ldr	r2, [r2, #12]
     35a:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
     35e:	60da      	str	r2, [r3, #12]

        /* Wait one second. */
        vTaskDelay(100);
     360:	f04f 0064 	mov.w	r0, #100	; 0x64
     364:	f006 fd00 	bl	6d68 <vTaskDelay>
    }
     368:	e7ee      	b.n	348 <led_flash_task+0x8>
     36a:	bf00      	nop

0000036c <rs232_xmit_msg_task>:
}

void rs232_xmit_msg_task( void *pvParameters )
{
     36c:	b580      	push	{r7, lr}
     36e:	b09c      	sub	sp, #112	; 0x70
     370:	af00      	add	r7, sp, #0
     372:	6078      	str	r0, [r7, #4]
    int curr_char;

    while(1) {
        /* Read from the queue.  Keep trying until a message is received.  This
         * will block for a period of time (specified by portMAX_DELAY). */
        while(!xQueueReceive(serial_str_queue, &msg, portMAX_DELAY));
     374:	e7ff      	b.n	376 <rs232_xmit_msg_task+0xa>
     376:	bf00      	nop
     378:	f244 4338 	movw	r3, #17464	; 0x4438
     37c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     380:	681b      	ldr	r3, [r3, #0]
     382:	4618      	mov	r0, r3
     384:	f107 0308 	add.w	r3, r7, #8
     388:	4619      	mov	r1, r3
     38a:	f04f 32ff 	mov.w	r2, #4294967295
     38e:	f04f 0300 	mov.w	r3, #0
     392:	f006 f8ed 	bl	6570 <xQueueGenericReceive>
     396:	4603      	mov	r3, r0
     398:	2b00      	cmp	r3, #0
     39a:	d0ed      	beq.n	378 <rs232_xmit_msg_task+0xc>

        /* Write each character of the message to the RS232 port. */
        curr_char = 0;
     39c:	f04f 0300 	mov.w	r3, #0
     3a0:	66fb      	str	r3, [r7, #108]	; 0x6c
        while(msg.str[curr_char] != '\0') {
     3a2:	e00b      	b.n	3bc <rs232_xmit_msg_task+0x50>
            send_byte_rtos(msg.str[curr_char]);
     3a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     3a6:	f107 0208 	add.w	r2, r7, #8
     3aa:	18d3      	adds	r3, r2, r3
     3ac:	781b      	ldrb	r3, [r3, #0]
     3ae:	4618      	mov	r0, r3
     3b0:	f7ff ff7c 	bl	2ac <send_byte_rtos>
            curr_char++;
     3b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     3b6:	f103 0301 	add.w	r3, r3, #1
     3ba:	66fb      	str	r3, [r7, #108]	; 0x6c
         * will block for a period of time (specified by portMAX_DELAY). */
        while(!xQueueReceive(serial_str_queue, &msg, portMAX_DELAY));

        /* Write each character of the message to the RS232 port. */
        curr_char = 0;
        while(msg.str[curr_char] != '\0') {
     3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     3be:	f107 0208 	add.w	r2, r7, #8
     3c2:	18d3      	adds	r3, r2, r3
     3c4:	781b      	ldrb	r3, [r3, #0]
     3c6:	2b00      	cmp	r3, #0
     3c8:	d1ec      	bne.n	3a4 <rs232_xmit_msg_task+0x38>
            send_byte_rtos(msg.str[curr_char]);
            curr_char++;
        }
    }
     3ca:	e7d4      	b.n	376 <rs232_xmit_msg_task+0xa>

000003cc <queue_str_task>:
/* Repeatedly queues a string to be sent to the RS232.
 *   delay - the time to wait between sending messages.  A delay of 1 means
 *           wait 1/100th of a second.
 */
void queue_str_task(const char *str, int delay)
{
     3cc:	b580      	push	{r7, lr}
     3ce:	b09c      	sub	sp, #112	; 0x70
     3d0:	af00      	add	r7, sp, #0
     3d2:	6078      	str	r0, [r7, #4]
     3d4:	6039      	str	r1, [r7, #0]
    serial_str_msg msg;

    /* Prepare the message to be queued. */
    strcpy(msg.str, str);
     3d6:	f107 030c 	add.w	r3, r7, #12
     3da:	4618      	mov	r0, r3
     3dc:	6879      	ldr	r1, [r7, #4]
     3de:	f007 fe8f 	bl	8100 <strcpy>

    while(1) {
        /* Post the message.  Keep on trying until it is successful. */
        while(!xQueueSendToBack(serial_str_queue, &msg, portMAX_DELAY));
     3e2:	bf00      	nop
     3e4:	f244 4338 	movw	r3, #17464	; 0x4438
     3e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
     3ec:	681b      	ldr	r3, [r3, #0]
     3ee:	4618      	mov	r0, r3
     3f0:	f107 030c 	add.w	r3, r7, #12
     3f4:	4619      	mov	r1, r3
     3f6:	f04f 32ff 	mov.w	r2, #4294967295
     3fa:	f04f 0300 	mov.w	r3, #0
     3fe:	f005 ffdf 	bl	63c0 <xQueueGenericSend>
     402:	4603      	mov	r3, r0
     404:	2b00      	cmp	r3, #0
     406:	d0ed      	beq.n	3e4 <queue_str_task+0x18>

        /* Wait. */
        vTaskDelay(delay);
     408:	683b      	ldr	r3, [r7, #0]
     40a:	4618      	mov	r0, r3
     40c:	f006 fcac 	bl	6d68 <vTaskDelay>
    }
     410:	bf00      	nop
    /* Prepare the message to be queued. */
    strcpy(msg.str, str);

    while(1) {
        /* Post the message.  Keep on trying until it is successful. */
        while(!xQueueSendToBack(serial_str_queue, &msg, portMAX_DELAY));
     412:	e7e6      	b.n	3e2 <queue_str_task+0x16>

00000414 <queue_str_task1>:
        vTaskDelay(delay);
    }
}

void queue_str_task1( void *pvParameters )
{
     414:	b580      	push	{r7, lr}
     416:	b082      	sub	sp, #8
     418:	af00      	add	r7, sp, #0
     41a:	6078      	str	r0, [r7, #4]
    queue_str_task("Hello 1\n", 200);
     41c:	f248 2080 	movw	r0, #33408	; 0x8280
     420:	f2c0 0000 	movt	r0, #0
     424:	f04f 01c8 	mov.w	r1, #200	; 0xc8
     428:	f7ff ffd0 	bl	3cc <queue_str_task>
}
     42c:	f107 0708 	add.w	r7, r7, #8
     430:	46bd      	mov	sp, r7
     432:	bd80      	pop	{r7, pc}

00000434 <queue_str_task2>:

void queue_str_task2( void *pvParameters )
{
     434:	b580      	push	{r7, lr}
     436:	b082      	sub	sp, #8
     438:	af00      	add	r7, sp, #0
     43a:	6078      	str	r0, [r7, #4]
    queue_str_task("Hello 2\n", 50);
     43c:	f248 208c 	movw	r0, #33420	; 0x828c
     440:	f2c0 0000 	movt	r0, #0
     444:	f04f 0132 	mov.w	r1, #50	; 0x32
     448:	f7ff ffc0 	bl	3cc <queue_str_task>
}
     44c:	f107 0708 	add.w	r7, r7, #8
     450:	46bd      	mov	sp, r7
     452:	bd80      	pop	{r7, pc}

00000454 <serial_readwrite_task>:

void serial_readwrite_task( void *pvParameters )
{
     454:	b580      	push	{r7, lr}
     456:	b09e      	sub	sp, #120	; 0x78
     458:	af00      	add	r7, sp, #0
     45a:	6078      	str	r0, [r7, #4]
    char ch;
    int curr_char;
    int done;

    /* Prepare the response message to be queued. */
    strcpy(msg.str, "Got:");
     45c:	f248 2298 	movw	r2, #33432	; 0x8298
     460:	f2c0 0200 	movt	r2, #0
     464:	f107 0308 	add.w	r3, r7, #8
     468:	e892 0003 	ldmia.w	r2, {r0, r1}
     46c:	6018      	str	r0, [r3, #0]
     46e:	f103 0304 	add.w	r3, r3, #4
     472:	7019      	strb	r1, [r3, #0]

    while(1) {
        curr_char = 4;
     474:	f04f 0304 	mov.w	r3, #4
     478:	677b      	str	r3, [r7, #116]	; 0x74
        done = 0;
     47a:	f04f 0300 	mov.w	r3, #0
     47e:	673b      	str	r3, [r7, #112]	; 0x70
        do {
            /* Receive a byte from the RS232 port (this call will block). */
            ch = receive_byte_rtos();
     480:	f7ff ff42 	bl	308 <receive_byte_rtos>
     484:	4603      	mov	r3, r0
     486:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

            /* If the byte is an end-of-line type character, then finish the
             * string and indicate we are done.
             */
            if((ch == '\r') || (ch == '\n')) {
     48a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
     48e:	2b0d      	cmp	r3, #13
     490:	d003      	beq.n	49a <serial_readwrite_task+0x46>
     492:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
     496:	2b0a      	cmp	r3, #10
     498:	d114      	bne.n	4c4 <serial_readwrite_task+0x70>
                msg.str[curr_char] = '\n';
     49a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     49c:	f107 0208 	add.w	r2, r7, #8
     4a0:	18d3      	adds	r3, r2, r3
     4a2:	f04f 020a 	mov.w	r2, #10
     4a6:	701a      	strb	r2, [r3, #0]
                msg.str[curr_char+1] = '\0';
     4a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     4aa:	f103 0301 	add.w	r3, r3, #1
     4ae:	f107 0278 	add.w	r2, r7, #120	; 0x78
     4b2:	18d3      	adds	r3, r2, r3
     4b4:	f04f 0200 	mov.w	r2, #0
     4b8:	f803 2c70 	strb.w	r2, [r3, #-112]
                done = -1;
     4bc:	f04f 33ff 	mov.w	r3, #4294967295
     4c0:	673b      	str	r3, [r7, #112]	; 0x70
     4c2:	e00a      	b.n	4da <serial_readwrite_task+0x86>
            /* Otherwise, add the character to the response string. */
            } else {
                msg.str[curr_char++] = ch;
     4c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     4c6:	f107 0208 	add.w	r2, r7, #8
     4ca:	18d3      	adds	r3, r2, r3
     4cc:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
     4d0:	701a      	strb	r2, [r3, #0]
     4d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
     4d4:	f103 0301 	add.w	r3, r3, #1
     4d8:	677b      	str	r3, [r7, #116]	; 0x74
            }
        } while(!done);
     4da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
     4dc:	2b00      	cmp	r3, #0
     4de:	d0cf      	beq.n	480 <serial_readwrite_task+0x2c>

        /* Once we are done building the response string, queue the response to
         * be sent to the RS232 port.
         */
        while(!xQueueSendToBack(serial_str_queue, &msg, portMAX_DELAY));
     4e0:	bf00      	nop
     4e2:	f244 4338 	movw	r3, #17464	; 0x4438
     4e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     4ea:	681b      	ldr	r3, [r3, #0]
     4ec:	4618      	mov	r0, r3
     4ee:	f107 0308 	add.w	r3, r7, #8
     4f2:	4619      	mov	r1, r3
     4f4:	f04f 32ff 	mov.w	r2, #4294967295
     4f8:	f04f 0300 	mov.w	r3, #0
     4fc:	f005 ff60 	bl	63c0 <xQueueGenericSend>
     500:	4603      	mov	r3, r0
     502:	2b00      	cmp	r3, #0
     504:	d0ed      	beq.n	4e2 <serial_readwrite_task+0x8e>
    }
     506:	e7b5      	b.n	474 <serial_readwrite_task+0x20>

00000508 <main>:
}

int main(void)
{
     508:	b580      	push	{r7, lr}
     50a:	b084      	sub	sp, #16
     50c:	af04      	add	r7, sp, #16
    init_led();
     50e:	f000 fbfd 	bl	d0c <init_led>

    init_button();
     512:	f000 fc25 	bl	d60 <init_button>
    enable_button_interrupts();
     516:	f000 fc43 	bl	da0 <enable_button_interrupts>

    init_rs232();
     51a:	f000 fc77 	bl	e0c <init_rs232>
    enable_rs232_interrupts();
     51e:	f000 fccd 	bl	ebc <enable_rs232_interrupts>
    enable_rs232();
     522:	f000 fcf5 	bl	f10 <enable_rs232>

    /* Create the queue to hold messages to be written to the RS232. */
    serial_str_queue = xQueueCreate( 10, sizeof( serial_str_msg ) );
     526:	f04f 000a 	mov.w	r0, #10
     52a:	f04f 0164 	mov.w	r1, #100	; 0x64
     52e:	f04f 0200 	mov.w	r2, #0
     532:	f005 fea1 	bl	6278 <xQueueGenericCreate>
     536:	4602      	mov	r2, r0
     538:	f244 4338 	movw	r3, #17464	; 0x4438
     53c:	f2c2 0300 	movt	r3, #8192	; 0x2000
     540:	601a      	str	r2, [r3, #0]
    vSemaphoreCreateBinary(serial_tx_wait_sem);
     542:	f04f 0001 	mov.w	r0, #1
     546:	f04f 0100 	mov.w	r1, #0
     54a:	f04f 0203 	mov.w	r2, #3
     54e:	f005 fe93 	bl	6278 <xQueueGenericCreate>
     552:	4602      	mov	r2, r0
     554:	f244 433c 	movw	r3, #17468	; 0x443c
     558:	f2c2 0300 	movt	r3, #8192	; 0x2000
     55c:	601a      	str	r2, [r3, #0]
     55e:	f244 433c 	movw	r3, #17468	; 0x443c
     562:	f2c2 0300 	movt	r3, #8192	; 0x2000
     566:	681b      	ldr	r3, [r3, #0]
     568:	2b00      	cmp	r3, #0
     56a:	d00d      	beq.n	588 <main+0x80>
     56c:	f244 433c 	movw	r3, #17468	; 0x443c
     570:	f2c2 0300 	movt	r3, #8192	; 0x2000
     574:	681b      	ldr	r3, [r3, #0]
     576:	4618      	mov	r0, r3
     578:	f04f 0100 	mov.w	r1, #0
     57c:	f04f 0200 	mov.w	r2, #0
     580:	f04f 0300 	mov.w	r3, #0
     584:	f005 ff1c 	bl	63c0 <xQueueGenericSend>
    serial_rx_queue = xQueueCreate( 1, sizeof( serial_ch_msg ) );
     588:	f04f 0001 	mov.w	r0, #1
     58c:	f04f 0101 	mov.w	r1, #1
     590:	f04f 0200 	mov.w	r2, #0
     594:	f005 fe70 	bl	6278 <xQueueGenericCreate>
     598:	4602      	mov	r2, r0
     59a:	f244 4340 	movw	r3, #17472	; 0x4440
     59e:	f2c2 0300 	movt	r3, #8192	; 0x2000
     5a2:	601a      	str	r2, [r3, #0]

    /* Create a task to flash the LED. */
    xTaskCreate( led_flash_task, ( signed portCHAR * ) "LED Flash", 512 /* stack size */, NULL, tskIDLE_PRIORITY + 5, NULL );
     5a4:	f04f 0305 	mov.w	r3, #5
     5a8:	9300      	str	r3, [sp, #0]
     5aa:	f04f 0300 	mov.w	r3, #0
     5ae:	9301      	str	r3, [sp, #4]
     5b0:	f04f 0300 	mov.w	r3, #0
     5b4:	9302      	str	r3, [sp, #8]
     5b6:	f04f 0300 	mov.w	r3, #0
     5ba:	9303      	str	r3, [sp, #12]
     5bc:	f240 3041 	movw	r0, #833	; 0x341
     5c0:	f2c0 0000 	movt	r0, #0
     5c4:	f248 21a0 	movw	r1, #33440	; 0x82a0
     5c8:	f2c0 0100 	movt	r1, #0
     5cc:	f44f 7200 	mov.w	r2, #512	; 0x200
     5d0:	f04f 0300 	mov.w	r3, #0
     5d4:	f006 fa3a 	bl	6a4c <xTaskGenericCreate>

    /* Create tasks to queue a string to be written to the RS232 port. */
    xTaskCreate( queue_str_task1, ( signed portCHAR * ) "Serial Write 1", 512 /* stack size */, NULL, tskIDLE_PRIORITY + 10, NULL );
     5d8:	f04f 030a 	mov.w	r3, #10
     5dc:	9300      	str	r3, [sp, #0]
     5de:	f04f 0300 	mov.w	r3, #0
     5e2:	9301      	str	r3, [sp, #4]
     5e4:	f04f 0300 	mov.w	r3, #0
     5e8:	9302      	str	r3, [sp, #8]
     5ea:	f04f 0300 	mov.w	r3, #0
     5ee:	9303      	str	r3, [sp, #12]
     5f0:	f240 4015 	movw	r0, #1045	; 0x415
     5f4:	f2c0 0000 	movt	r0, #0
     5f8:	f248 21ac 	movw	r1, #33452	; 0x82ac
     5fc:	f2c0 0100 	movt	r1, #0
     600:	f44f 7200 	mov.w	r2, #512	; 0x200
     604:	f04f 0300 	mov.w	r3, #0
     608:	f006 fa20 	bl	6a4c <xTaskGenericCreate>
    xTaskCreate( queue_str_task2, ( signed portCHAR * ) "Serial Write 2", 512 /* stack size */, NULL, tskIDLE_PRIORITY + 10, NULL );
     60c:	f04f 030a 	mov.w	r3, #10
     610:	9300      	str	r3, [sp, #0]
     612:	f04f 0300 	mov.w	r3, #0
     616:	9301      	str	r3, [sp, #4]
     618:	f04f 0300 	mov.w	r3, #0
     61c:	9302      	str	r3, [sp, #8]
     61e:	f04f 0300 	mov.w	r3, #0
     622:	9303      	str	r3, [sp, #12]
     624:	f240 4035 	movw	r0, #1077	; 0x435
     628:	f2c0 0000 	movt	r0, #0
     62c:	f248 21bc 	movw	r1, #33468	; 0x82bc
     630:	f2c0 0100 	movt	r1, #0
     634:	f44f 7200 	mov.w	r2, #512	; 0x200
     638:	f04f 0300 	mov.w	r3, #0
     63c:	f006 fa06 	bl	6a4c <xTaskGenericCreate>

    /* Create a task to write messages from the queue to the RS232 port. */
    xTaskCreate(rs232_xmit_msg_task, ( signed portCHAR * ) "Serial Xmit Str", 512 /* stack size */, NULL, tskIDLE_PRIORITY + 2, NULL );
     640:	f04f 0302 	mov.w	r3, #2
     644:	9300      	str	r3, [sp, #0]
     646:	f04f 0300 	mov.w	r3, #0
     64a:	9301      	str	r3, [sp, #4]
     64c:	f04f 0300 	mov.w	r3, #0
     650:	9302      	str	r3, [sp, #8]
     652:	f04f 0300 	mov.w	r3, #0
     656:	9303      	str	r3, [sp, #12]
     658:	f240 306d 	movw	r0, #877	; 0x36d
     65c:	f2c0 0000 	movt	r0, #0
     660:	f248 21cc 	movw	r1, #33484	; 0x82cc
     664:	f2c0 0100 	movt	r1, #0
     668:	f44f 7200 	mov.w	r2, #512	; 0x200
     66c:	f04f 0300 	mov.w	r3, #0
     670:	f006 f9ec 	bl	6a4c <xTaskGenericCreate>

    /* Create a task to receive characters from the RS232 port and echo them back to the RS232 port. */
    xTaskCreate(serial_readwrite_task, ( signed portCHAR * ) "Serial Read/Write", 512 /* stack size */, NULL, tskIDLE_PRIORITY + 10, NULL );
     674:	f04f 030a 	mov.w	r3, #10
     678:	9300      	str	r3, [sp, #0]
     67a:	f04f 0300 	mov.w	r3, #0
     67e:	9301      	str	r3, [sp, #4]
     680:	f04f 0300 	mov.w	r3, #0
     684:	9302      	str	r3, [sp, #8]
     686:	f04f 0300 	mov.w	r3, #0
     68a:	9303      	str	r3, [sp, #12]
     68c:	f240 4055 	movw	r0, #1109	; 0x455
     690:	f2c0 0000 	movt	r0, #0
     694:	f248 21dc 	movw	r1, #33500	; 0x82dc
     698:	f2c0 0100 	movt	r1, #0
     69c:	f44f 7200 	mov.w	r2, #512	; 0x200
     6a0:	f04f 0300 	mov.w	r3, #0
     6a4:	f006 f9d2 	bl	6a4c <xTaskGenericCreate>

    /* Start running the tasks. */
    vTaskStartScheduler();
     6a8:	f006 fd86 	bl	71b8 <vTaskStartScheduler>

    return 0;
     6ac:	f04f 0300 	mov.w	r3, #0
}
     6b0:	4618      	mov	r0, r3
     6b2:	46bd      	mov	sp, r7
     6b4:	bd80      	pop	{r7, pc}
     6b6:	bf00      	nop

000006b8 <vApplicationTickHook>:

void vApplicationTickHook( void )
{
     6b8:	b480      	push	{r7}
     6ba:	af00      	add	r7, sp, #0
}
     6bc:	46bd      	mov	sp, r7
     6be:	bc80      	pop	{r7}
     6c0:	4770      	bx	lr
     6c2:	bf00      	nop

000006c4 <__get_PSP>:
 * Return the actual process stack pointer
 */
uint32_t __get_PSP(void) __attribute__( ( naked ) );
uint32_t __get_PSP(void)
{
  uint32_t result=0;
     6c4:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, psp\n\t" 
     6c8:	f3ef 8409 	mrs	r4, PSP
     6cc:	4620      	mov	r0, r4
     6ce:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     6d0:	4623      	mov	r3, r4
}
     6d2:	4618      	mov	r0, r3

000006d4 <__set_PSP>:
 * Assign the value ProcessStackPointer to the MSP 
 * (process stack pointer) Cortex processor register
 */
void __set_PSP(uint32_t topOfProcStack) __attribute__( ( naked ) );
void __set_PSP(uint32_t topOfProcStack)
{
     6d4:	4603      	mov	r3, r0
  __ASM volatile ("MSR psp, %0\n\t"
     6d6:	f383 8809 	msr	PSP, r3
     6da:	4770      	bx	lr

000006dc <__get_MSP>:
 * Cortex processor register
 */
uint32_t __get_MSP(void) __attribute__( ( naked ) );
uint32_t __get_MSP(void)
{
  uint32_t result=0;
     6dc:	f04f 0400 	mov.w	r4, #0

  __ASM volatile ("MRS %0, msp\n\t" 
     6e0:	f3ef 8408 	mrs	r4, MSP
     6e4:	4620      	mov	r0, r4
     6e6:	4770      	bx	lr
                  "MOV r0, %0 \n\t"
                  "BX  lr     \n\t"  : "=r" (result) );
  return(result);
     6e8:	4623      	mov	r3, r4
}
     6ea:	4618      	mov	r0, r3

000006ec <__set_MSP>:
 * Assign the value mainStackPointer to the MSP 
 * (main stack pointer) Cortex processor register
 */
void __set_MSP(uint32_t topOfMainStack) __attribute__( ( naked ) );
void __set_MSP(uint32_t topOfMainStack)
{
     6ec:	4603      	mov	r3, r0
  __ASM volatile ("MSR msp, %0\n\t"
     6ee:	f383 8808 	msr	MSP, r3
     6f2:	4770      	bx	lr

000006f4 <__get_BASEPRI>:
 * @return BasePriority
 *
 * Return the content of the base priority register
 */
uint32_t __get_BASEPRI(void)
{
     6f4:	b490      	push	{r4, r7}
     6f6:	b082      	sub	sp, #8
     6f8:	af00      	add	r7, sp, #0
  uint32_t result=0;
     6fa:	f04f 0300 	mov.w	r3, #0
     6fe:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, basepri_max" : "=r" (result) );
     700:	f3ef 8412 	mrs	r4, BASEPRI_MAX
     704:	607c      	str	r4, [r7, #4]
  return(result);
     706:	687b      	ldr	r3, [r7, #4]
}
     708:	4618      	mov	r0, r3
     70a:	f107 0708 	add.w	r7, r7, #8
     70e:	46bd      	mov	sp, r7
     710:	bc90      	pop	{r4, r7}
     712:	4770      	bx	lr

00000714 <__set_BASEPRI>:
 * @param  basePri  BasePriority
 *
 * Set the base priority register
 */
void __set_BASEPRI(uint32_t value)
{
     714:	b480      	push	{r7}
     716:	b083      	sub	sp, #12
     718:	af00      	add	r7, sp, #0
     71a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR basepri, %0" : : "r" (value) );
     71c:	687b      	ldr	r3, [r7, #4]
     71e:	f383 8811 	msr	BASEPRI, r3
}
     722:	f107 070c 	add.w	r7, r7, #12
     726:	46bd      	mov	sp, r7
     728:	bc80      	pop	{r7}
     72a:	4770      	bx	lr

0000072c <__get_PRIMASK>:
 * @return PriMask
 *
 * Return state of the priority mask bit from the priority mask register
 */
uint32_t __get_PRIMASK(void)
{
     72c:	b490      	push	{r4, r7}
     72e:	b082      	sub	sp, #8
     730:	af00      	add	r7, sp, #0
  uint32_t result=0;
     732:	f04f 0300 	mov.w	r3, #0
     736:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     738:	f3ef 8410 	mrs	r4, PRIMASK
     73c:	607c      	str	r4, [r7, #4]
  return(result);
     73e:	687b      	ldr	r3, [r7, #4]
}
     740:	4618      	mov	r0, r3
     742:	f107 0708 	add.w	r7, r7, #8
     746:	46bd      	mov	sp, r7
     748:	bc90      	pop	{r4, r7}
     74a:	4770      	bx	lr

0000074c <__set_PRIMASK>:
 * @param  priMask  PriMask
 *
 * Set the priority mask bit in the priority mask register
 */
void __set_PRIMASK(uint32_t priMask)
{
     74c:	b480      	push	{r7}
     74e:	b083      	sub	sp, #12
     750:	af00      	add	r7, sp, #0
     752:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) );
     754:	687b      	ldr	r3, [r7, #4]
     756:	f383 8810 	msr	PRIMASK, r3
}
     75a:	f107 070c 	add.w	r7, r7, #12
     75e:	46bd      	mov	sp, r7
     760:	bc80      	pop	{r7}
     762:	4770      	bx	lr

00000764 <__get_FAULTMASK>:
 * @return FaultMask
 *
 * Return the content of the fault mask register
 */
uint32_t __get_FAULTMASK(void)
{
     764:	b490      	push	{r4, r7}
     766:	b082      	sub	sp, #8
     768:	af00      	add	r7, sp, #0
  uint32_t result=0;
     76a:	f04f 0300 	mov.w	r3, #0
     76e:	607b      	str	r3, [r7, #4]
  
  __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
     770:	f3ef 8413 	mrs	r4, FAULTMASK
     774:	607c      	str	r4, [r7, #4]
  return(result);
     776:	687b      	ldr	r3, [r7, #4]
}
     778:	4618      	mov	r0, r3
     77a:	f107 0708 	add.w	r7, r7, #8
     77e:	46bd      	mov	sp, r7
     780:	bc90      	pop	{r4, r7}
     782:	4770      	bx	lr

00000784 <__set_FAULTMASK>:
 * @param  faultMask  faultMask value
 *
 * Set the fault mask register
 */
void __set_FAULTMASK(uint32_t faultMask)
{
     784:	b480      	push	{r7}
     786:	b083      	sub	sp, #12
     788:	af00      	add	r7, sp, #0
     78a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) );
     78c:	687b      	ldr	r3, [r7, #4]
     78e:	f383 8813 	msr	FAULTMASK, r3
}
     792:	f107 070c 	add.w	r7, r7, #12
     796:	46bd      	mov	sp, r7
     798:	bc80      	pop	{r7}
     79a:	4770      	bx	lr

0000079c <__get_CONTROL>:
*  @return Control value
 *
 * Return the content of the control register
 */
uint32_t __get_CONTROL(void)
{
     79c:	b490      	push	{r4, r7}
     79e:	b082      	sub	sp, #8
     7a0:	af00      	add	r7, sp, #0
  uint32_t result=0;
     7a2:	f04f 0300 	mov.w	r3, #0
     7a6:	607b      	str	r3, [r7, #4]

  __ASM volatile ("MRS %0, control" : "=r" (result) );
     7a8:	f3ef 8414 	mrs	r4, CONTROL
     7ac:	607c      	str	r4, [r7, #4]
  return(result);
     7ae:	687b      	ldr	r3, [r7, #4]
}
     7b0:	4618      	mov	r0, r3
     7b2:	f107 0708 	add.w	r7, r7, #8
     7b6:	46bd      	mov	sp, r7
     7b8:	bc90      	pop	{r4, r7}
     7ba:	4770      	bx	lr

000007bc <__set_CONTROL>:
 * @param  control  Control value
 *
 * Set the control register
 */
void __set_CONTROL(uint32_t control)
{
     7bc:	b480      	push	{r7}
     7be:	b083      	sub	sp, #12
     7c0:	af00      	add	r7, sp, #0
     7c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MSR control, %0" : : "r" (control) );
     7c4:	687b      	ldr	r3, [r7, #4]
     7c6:	f383 8814 	msr	CONTROL, r3
}
     7ca:	f107 070c 	add.w	r7, r7, #12
     7ce:	46bd      	mov	sp, r7
     7d0:	bc80      	pop	{r7}
     7d2:	4770      	bx	lr

000007d4 <__REV>:
 * @return        reversed value
 *
 * Reverse byte order in integer value
 */
uint32_t __REV(uint32_t value)
{
     7d4:	b490      	push	{r4, r7}
     7d6:	b084      	sub	sp, #16
     7d8:	af00      	add	r7, sp, #0
     7da:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     7dc:	f04f 0300 	mov.w	r3, #0
     7e0:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev %0, %1" : "=r" (result) : "r" (value) );
     7e2:	687b      	ldr	r3, [r7, #4]
     7e4:	ba1c      	rev	r4, r3
     7e6:	60fc      	str	r4, [r7, #12]
  return(result);
     7e8:	68fb      	ldr	r3, [r7, #12]
}
     7ea:	4618      	mov	r0, r3
     7ec:	f107 0710 	add.w	r7, r7, #16
     7f0:	46bd      	mov	sp, r7
     7f2:	bc90      	pop	{r4, r7}
     7f4:	4770      	bx	lr
     7f6:	bf00      	nop

000007f8 <__REV16>:
 * @return        reversed value
 *
 * Reverse byte order in unsigned short value
 */
uint32_t __REV16(uint16_t value)
{
     7f8:	b490      	push	{r4, r7}
     7fa:	b084      	sub	sp, #16
     7fc:	af00      	add	r7, sp, #0
     7fe:	4603      	mov	r3, r0
     800:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     802:	f04f 0300 	mov.w	r3, #0
     806:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("rev16 %0, %1" : "=r" (result) : "r" (value) );
     808:	88fb      	ldrh	r3, [r7, #6]
     80a:	ba5c      	rev16	r4, r3
     80c:	60fc      	str	r4, [r7, #12]
  return(result);
     80e:	68fb      	ldr	r3, [r7, #12]
}
     810:	4618      	mov	r0, r3
     812:	f107 0710 	add.w	r7, r7, #16
     816:	46bd      	mov	sp, r7
     818:	bc90      	pop	{r4, r7}
     81a:	4770      	bx	lr

0000081c <__REVSH>:
 * @return        reversed value
 *
 * Reverse byte order in signed short value with sign extension to integer
 */
int32_t __REVSH(int16_t value)
{
     81c:	b490      	push	{r4, r7}
     81e:	b084      	sub	sp, #16
     820:	af00      	add	r7, sp, #0
     822:	4603      	mov	r3, r0
     824:	80fb      	strh	r3, [r7, #6]
  uint32_t result=0;
     826:	f04f 0300 	mov.w	r3, #0
     82a:	60fb      	str	r3, [r7, #12]
  
  __ASM volatile ("revsh %0, %1" : "=r" (result) : "r" (value) );
     82c:	88fb      	ldrh	r3, [r7, #6]
     82e:	badc      	revsh	r4, r3
     830:	60fc      	str	r4, [r7, #12]
  return(result);
     832:	68fb      	ldr	r3, [r7, #12]
}
     834:	4618      	mov	r0, r3
     836:	f107 0710 	add.w	r7, r7, #16
     83a:	46bd      	mov	sp, r7
     83c:	bc90      	pop	{r4, r7}
     83e:	4770      	bx	lr

00000840 <__RBIT>:
 * @return        reversed value
 *
 * Reverse bit order of value
 */
uint32_t __RBIT(uint32_t value)
{
     840:	b490      	push	{r4, r7}
     842:	b084      	sub	sp, #16
     844:	af00      	add	r7, sp, #0
     846:	6078      	str	r0, [r7, #4]
  uint32_t result=0;
     848:	f04f 0300 	mov.w	r3, #0
     84c:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     84e:	687b      	ldr	r3, [r7, #4]
     850:	fa93 f4a3 	rbit	r4, r3
     854:	60fc      	str	r4, [r7, #12]
   return(result);
     856:	68fb      	ldr	r3, [r7, #12]
}
     858:	4618      	mov	r0, r3
     85a:	f107 0710 	add.w	r7, r7, #16
     85e:	46bd      	mov	sp, r7
     860:	bc90      	pop	{r4, r7}
     862:	4770      	bx	lr

00000864 <__LDREXB>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 8 bit value
 */
uint8_t __LDREXB(uint8_t *addr)
{
     864:	b490      	push	{r4, r7}
     866:	b084      	sub	sp, #16
     868:	af00      	add	r7, sp, #0
     86a:	6078      	str	r0, [r7, #4]
    uint8_t result=0;
     86c:	f04f 0300 	mov.w	r3, #0
     870:	73fb      	strb	r3, [r7, #15]
  
   __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) );
     872:	687b      	ldr	r3, [r7, #4]
     874:	e8d3 4f4f 	ldrexb	r4, [r3]
     878:	73fc      	strb	r4, [r7, #15]
   return(result);
     87a:	7bfb      	ldrb	r3, [r7, #15]
}
     87c:	4618      	mov	r0, r3
     87e:	f107 0710 	add.w	r7, r7, #16
     882:	46bd      	mov	sp, r7
     884:	bc90      	pop	{r4, r7}
     886:	4770      	bx	lr

00000888 <__LDREXH>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 16 bit values
 */
uint16_t __LDREXH(uint16_t *addr)
{
     888:	b490      	push	{r4, r7}
     88a:	b084      	sub	sp, #16
     88c:	af00      	add	r7, sp, #0
     88e:	6078      	str	r0, [r7, #4]
    uint16_t result=0;
     890:	f04f 0300 	mov.w	r3, #0
     894:	81fb      	strh	r3, [r7, #14]
  
   __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) );
     896:	687b      	ldr	r3, [r7, #4]
     898:	e8d3 4f5f 	ldrexh	r4, [r3]
     89c:	81fc      	strh	r4, [r7, #14]
   return(result);
     89e:	89fb      	ldrh	r3, [r7, #14]
}
     8a0:	4618      	mov	r0, r3
     8a2:	f107 0710 	add.w	r7, r7, #16
     8a6:	46bd      	mov	sp, r7
     8a8:	bc90      	pop	{r4, r7}
     8aa:	4770      	bx	lr

000008ac <__LDREXW>:
 * @return        value of (*address)
 *
 * Exclusive LDR command for 32 bit values
 */
uint32_t __LDREXW(uint32_t *addr)
{
     8ac:	b490      	push	{r4, r7}
     8ae:	b084      	sub	sp, #16
     8b0:	af00      	add	r7, sp, #0
     8b2:	6078      	str	r0, [r7, #4]
    uint32_t result=0;
     8b4:	f04f 0300 	mov.w	r3, #0
     8b8:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     8ba:	687b      	ldr	r3, [r7, #4]
     8bc:	e853 4f00 	ldrex	r4, [r3]
     8c0:	60fc      	str	r4, [r7, #12]
   return(result);
     8c2:	68fb      	ldr	r3, [r7, #12]
}
     8c4:	4618      	mov	r0, r3
     8c6:	f107 0710 	add.w	r7, r7, #16
     8ca:	46bd      	mov	sp, r7
     8cc:	bc90      	pop	{r4, r7}
     8ce:	4770      	bx	lr

000008d0 <__STREXB>:
 * @return        successful / failed
 *
 * Exclusive STR command for 8 bit values
 */
uint32_t __STREXB(uint8_t value, uint8_t *addr)
{
     8d0:	b490      	push	{r4, r7}
     8d2:	b084      	sub	sp, #16
     8d4:	af00      	add	r7, sp, #0
     8d6:	4603      	mov	r3, r0
     8d8:	6039      	str	r1, [r7, #0]
     8da:	71fb      	strb	r3, [r7, #7]
   uint32_t result=0;
     8dc:	f04f 0300 	mov.w	r3, #0
     8e0:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexb %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     8e2:	683b      	ldr	r3, [r7, #0]
     8e4:	79fa      	ldrb	r2, [r7, #7]
     8e6:	e8c3 2f44 	strexb	r4, r2, [r3]
     8ea:	60fc      	str	r4, [r7, #12]
   return(result);
     8ec:	68fb      	ldr	r3, [r7, #12]
}
     8ee:	4618      	mov	r0, r3
     8f0:	f107 0710 	add.w	r7, r7, #16
     8f4:	46bd      	mov	sp, r7
     8f6:	bc90      	pop	{r4, r7}
     8f8:	4770      	bx	lr
     8fa:	bf00      	nop

000008fc <__STREXH>:
 * @return        successful / failed
 *
 * Exclusive STR command for 16 bit values
 */
uint32_t __STREXH(uint16_t value, uint16_t *addr)
{
     8fc:	b490      	push	{r4, r7}
     8fe:	b084      	sub	sp, #16
     900:	af00      	add	r7, sp, #0
     902:	4603      	mov	r3, r0
     904:	6039      	str	r1, [r7, #0]
     906:	80fb      	strh	r3, [r7, #6]
   uint32_t result=0;
     908:	f04f 0300 	mov.w	r3, #0
     90c:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strexh %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     90e:	683b      	ldr	r3, [r7, #0]
     910:	88fa      	ldrh	r2, [r7, #6]
     912:	e8c3 2f54 	strexh	r4, r2, [r3]
     916:	60fc      	str	r4, [r7, #12]
   return(result);
     918:	68fb      	ldr	r3, [r7, #12]
}
     91a:	4618      	mov	r0, r3
     91c:	f107 0710 	add.w	r7, r7, #16
     920:	46bd      	mov	sp, r7
     922:	bc90      	pop	{r4, r7}
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__STREXW>:
 * @return        successful / failed
 *
 * Exclusive STR command for 32 bit values
 */
uint32_t __STREXW(uint32_t value, uint32_t *addr)
{
     928:	b490      	push	{r4, r7}
     92a:	b084      	sub	sp, #16
     92c:	af00      	add	r7, sp, #0
     92e:	6078      	str	r0, [r7, #4]
     930:	6039      	str	r1, [r7, #0]
   uint32_t result=0;
     932:	f04f 0300 	mov.w	r3, #0
     936:	60fb      	str	r3, [r7, #12]
  
   __ASM volatile ("strex %0, %2, [%1]" : "=r" (result) : "r" (addr), "r" (value) );
     938:	683b      	ldr	r3, [r7, #0]
     93a:	687a      	ldr	r2, [r7, #4]
     93c:	e843 2400 	strex	r4, r2, [r3]
     940:	60fc      	str	r4, [r7, #12]
   return(result);
     942:	68fb      	ldr	r3, [r7, #12]
}
     944:	4618      	mov	r0, r3
     946:	f107 0710 	add.w	r7, r7, #16
     94a:	46bd      	mov	sp, r7
     94c:	bc90      	pop	{r4, r7}
     94e:	4770      	bx	lr

00000950 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
     950:	b580      	push	{r7, lr}
     952:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
     954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     958:	f2c4 0302 	movt	r3, #16386	; 0x4002
     95c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     960:	f2c4 0202 	movt	r2, #16386	; 0x4002
     964:	6812      	ldr	r2, [r2, #0]
     966:	f042 0201 	orr.w	r2, r2, #1
     96a:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
     96c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     970:	f2c4 0202 	movt	r2, #16386	; 0x4002
     974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     978:	f2c4 0302 	movt	r3, #16386	; 0x4002
     97c:	6859      	ldr	r1, [r3, #4]
     97e:	f04f 0300 	mov.w	r3, #0
     982:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
     986:	400b      	ands	r3, r1
     988:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
     98a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     98e:	f2c4 0302 	movt	r3, #16386	; 0x4002
     992:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     996:	f2c4 0202 	movt	r2, #16386	; 0x4002
     99a:	6812      	ldr	r2, [r2, #0]
     99c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
     9a0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
     9a4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
     9a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9aa:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     9b2:	f2c4 0202 	movt	r2, #16386	; 0x4002
     9b6:	6812      	ldr	r2, [r2, #0]
     9b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
     9bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
     9be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     9ca:	f2c4 0202 	movt	r2, #16386	; 0x4002
     9ce:	6852      	ldr	r2, [r2, #4]
     9d0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
     9d4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
     9d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     9da:	f2c4 0302 	movt	r3, #16386	; 0x4002
     9de:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
     9e2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
     9e4:	f000 f8ac 	bl	b40 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
     9e8:	f44f 436d 	mov.w	r3, #60672	; 0xed00
     9ec:	f2ce 0300 	movt	r3, #57344	; 0xe000
     9f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
     9f4:	609a      	str	r2, [r3, #8]
#endif 
}
     9f6:	bd80      	pop	{r7, pc}

000009f8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
     9f8:	b480      	push	{r7}
     9fa:	b085      	sub	sp, #20
     9fc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
     9fe:	f04f 0300 	mov.w	r3, #0
     a02:	60fb      	str	r3, [r7, #12]
     a04:	f04f 0300 	mov.w	r3, #0
     a08:	60bb      	str	r3, [r7, #8]
     a0a:	f04f 0300 	mov.w	r3, #0
     a0e:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
     a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a14:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a18:	685b      	ldr	r3, [r3, #4]
     a1a:	f003 030c 	and.w	r3, r3, #12
     a1e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
     a20:	68fb      	ldr	r3, [r7, #12]
     a22:	2b04      	cmp	r3, #4
     a24:	d00d      	beq.n	a42 <SystemCoreClockUpdate+0x4a>
     a26:	2b08      	cmp	r3, #8
     a28:	d015      	beq.n	a56 <SystemCoreClockUpdate+0x5e>
     a2a:	2b00      	cmp	r3, #0
     a2c:	d15c      	bne.n	ae8 <SystemCoreClockUpdate+0xf0>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
     a2e:	f240 0300 	movw	r3, #0
     a32:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a36:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     a3a:	f2c0 027a 	movt	r2, #122	; 0x7a
     a3e:	601a      	str	r2, [r3, #0]
      break;
     a40:	e05c      	b.n	afc <SystemCoreClockUpdate+0x104>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
     a42:	f240 0300 	movw	r3, #0
     a46:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a4a:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     a4e:	f2c0 027a 	movt	r2, #122	; 0x7a
     a52:	601a      	str	r2, [r3, #0]
      break;
     a54:	e052      	b.n	afc <SystemCoreClockUpdate+0x104>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
     a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a5a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a5e:	685b      	ldr	r3, [r3, #4]
     a60:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
     a64:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
     a66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     a6a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     a6e:	685b      	ldr	r3, [r3, #4]
     a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
     a74:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
     a76:	68bb      	ldr	r3, [r7, #8]
     a78:	ea4f 4393 	mov.w	r3, r3, lsr #18
     a7c:	f103 0302 	add.w	r3, r3, #2
     a80:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
     a82:	687b      	ldr	r3, [r7, #4]
     a84:	2b00      	cmp	r3, #0
     a86:	d10c      	bne.n	aa2 <SystemCoreClockUpdate+0xaa>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
     a88:	68ba      	ldr	r2, [r7, #8]
     a8a:	f44f 6310 	mov.w	r3, #2304	; 0x900
     a8e:	f2c0 033d 	movt	r3, #61	; 0x3d
     a92:	fb03 f202 	mul.w	r2, r3, r2
     a96:	f240 0300 	movw	r3, #0
     a9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
     a9e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     aa0:	e02c      	b.n	afc <SystemCoreClockUpdate+0x104>
       prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
     aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     aa6:	f2c4 0302 	movt	r3, #16386	; 0x4002
     aaa:	685b      	ldr	r3, [r3, #4]
     aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     ab0:	2b00      	cmp	r3, #0
     ab2:	d00c      	beq.n	ace <SystemCoreClockUpdate+0xd6>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
     ab4:	68ba      	ldr	r2, [r7, #8]
     ab6:	f44f 6310 	mov.w	r3, #2304	; 0x900
     aba:	f2c0 033d 	movt	r3, #61	; 0x3d
     abe:	fb03 f202 	mul.w	r2, r3, r2
     ac2:	f240 0300 	movw	r3, #0
     ac6:	f2c2 0300 	movt	r3, #8192	; 0x2000
     aca:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     acc:	e016      	b.n	afc <SystemCoreClockUpdate+0x104>
        {/* HSE oscillator clock divided by 2 */
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          SystemCoreClock = HSE_VALUE * pllmull;
     ace:	68ba      	ldr	r2, [r7, #8]
     ad0:	f44f 5390 	mov.w	r3, #4608	; 0x1200
     ad4:	f2c0 037a 	movt	r3, #122	; 0x7a
     ad8:	fb03 f202 	mul.w	r2, r3, r2
     adc:	f240 0300 	movw	r3, #0
     ae0:	f2c2 0300 	movt	r3, #8192	; 0x2000
     ae4:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
     ae6:	e009      	b.n	afc <SystemCoreClockUpdate+0x104>

    default:
      SystemCoreClock = HSI_VALUE;
     ae8:	f240 0300 	movw	r3, #0
     aec:	f2c2 0300 	movt	r3, #8192	; 0x2000
     af0:	f44f 5290 	mov.w	r2, #4608	; 0x1200
     af4:	f2c0 027a 	movt	r2, #122	; 0x7a
     af8:	601a      	str	r2, [r3, #0]
      break;
     afa:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
     afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b00:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b04:	685b      	ldr	r3, [r3, #4]
     b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     b0a:	ea4f 1213 	mov.w	r2, r3, lsr #4
     b0e:	f240 0304 	movw	r3, #4
     b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b16:	5c9b      	ldrb	r3, [r3, r2]
     b18:	b2db      	uxtb	r3, r3
     b1a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
     b1c:	f240 0300 	movw	r3, #0
     b20:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b24:	681a      	ldr	r2, [r3, #0]
     b26:	68fb      	ldr	r3, [r7, #12]
     b28:	fa22 f203 	lsr.w	r2, r2, r3
     b2c:	f240 0300 	movw	r3, #0
     b30:	f2c2 0300 	movt	r3, #8192	; 0x2000
     b34:	601a      	str	r2, [r3, #0]
}
     b36:	f107 0714 	add.w	r7, r7, #20
     b3a:	46bd      	mov	sp, r7
     b3c:	bc80      	pop	{r7}
     b3e:	4770      	bx	lr

00000b40 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
     b40:	b580      	push	{r7, lr}
     b42:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
     b44:	f000 f802 	bl	b4c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
     b48:	bd80      	pop	{r7, pc}
     b4a:	bf00      	nop

00000b4c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
     b4c:	b480      	push	{r7}
     b4e:	b083      	sub	sp, #12
     b50:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
     b52:	f04f 0300 	mov.w	r3, #0
     b56:	607b      	str	r3, [r7, #4]
     b58:	f04f 0300 	mov.w	r3, #0
     b5c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
     b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b62:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b66:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b6a:	f2c4 0202 	movt	r2, #16386	; 0x4002
     b6e:	6812      	ldr	r2, [r2, #0]
     b70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
     b74:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
     b76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     b7a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     b7e:	681b      	ldr	r3, [r3, #0]
     b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     b84:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
     b86:	687b      	ldr	r3, [r7, #4]
     b88:	f103 0301 	add.w	r3, r3, #1
     b8c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
     b8e:	683b      	ldr	r3, [r7, #0]
     b90:	2b00      	cmp	r3, #0
     b92:	d103      	bne.n	b9c <SetSysClockTo72+0x50>
     b94:	687b      	ldr	r3, [r7, #4]
     b96:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
     b9a:	d1ec      	bne.n	b76 <SetSysClockTo72+0x2a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
     b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     ba0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ba4:	681b      	ldr	r3, [r3, #0]
     ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
     baa:	2b00      	cmp	r3, #0
     bac:	d003      	beq.n	bb6 <SetSysClockTo72+0x6a>
  {
    HSEStatus = (uint32_t)0x01;
     bae:	f04f 0301 	mov.w	r3, #1
     bb2:	603b      	str	r3, [r7, #0]
     bb4:	e002      	b.n	bbc <SetSysClockTo72+0x70>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
     bb6:	f04f 0300 	mov.w	r3, #0
     bba:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
     bbc:	683b      	ldr	r3, [r7, #0]
     bbe:	2b01      	cmp	r3, #1
     bc0:	f040 8094 	bne.w	cec <SetSysClockTo72+0x1a0>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
     bc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     bc8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     bd0:	f2c4 0202 	movt	r2, #16386	; 0x4002
     bd4:	6812      	ldr	r2, [r2, #0]
     bd6:	f042 0210 	orr.w	r2, r2, #16
     bda:	601a      	str	r2, [r3, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
     bdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     be0:	f2c4 0302 	movt	r3, #16386	; 0x4002
     be4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     be8:	f2c4 0202 	movt	r2, #16386	; 0x4002
     bec:	6812      	ldr	r2, [r2, #0]
     bee:	f022 0203 	bic.w	r2, r2, #3
     bf2:	601a      	str	r2, [r3, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
     bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
     bf8:	f2c4 0302 	movt	r3, #16386	; 0x4002
     bfc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
     c00:	f2c4 0202 	movt	r2, #16386	; 0x4002
     c04:	6812      	ldr	r2, [r2, #0]
     c06:	f042 0202 	orr.w	r2, r2, #2
     c0a:	601a      	str	r2, [r3, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
     c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c10:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     c18:	f2c4 0202 	movt	r2, #16386	; 0x4002
     c1c:	6852      	ldr	r2, [r2, #4]
     c1e:	605a      	str	r2, [r3, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
     c20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c24:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     c2c:	f2c4 0202 	movt	r2, #16386	; 0x4002
     c30:	6852      	ldr	r2, [r2, #4]
     c32:	605a      	str	r2, [r3, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
     c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c38:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     c40:	f2c4 0202 	movt	r2, #16386	; 0x4002
     c44:	6852      	ldr	r2, [r2, #4]
     c46:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
     c4a:	605a      	str	r2, [r3, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
     c4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c50:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     c58:	f2c4 0202 	movt	r2, #16386	; 0x4002
     c5c:	6852      	ldr	r2, [r2, #4]
     c5e:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
     c62:	605a      	str	r2, [r3, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
     c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c68:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     c70:	f2c4 0202 	movt	r2, #16386	; 0x4002
     c74:	6852      	ldr	r2, [r2, #4]
     c76:	f442 12e8 	orr.w	r2, r2, #1900544	; 0x1d0000
     c7a:	605a      	str	r2, [r3, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
     c7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c80:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     c88:	f2c4 0202 	movt	r2, #16386	; 0x4002
     c8c:	6812      	ldr	r2, [r2, #0]
     c8e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
     c92:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
     c94:	bf00      	nop
     c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     c9a:	f2c4 0302 	movt	r3, #16386	; 0x4002
     c9e:	681b      	ldr	r3, [r3, #0]
     ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
     ca4:	2b00      	cmp	r3, #0
     ca6:	d0f6      	beq.n	c96 <SetSysClockTo72+0x14a>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
     ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cac:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cb0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     cb4:	f2c4 0202 	movt	r2, #16386	; 0x4002
     cb8:	6852      	ldr	r2, [r2, #4]
     cba:	f022 0203 	bic.w	r2, r2, #3
     cbe:	605a      	str	r2, [r3, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
     cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cc4:	f2c4 0302 	movt	r3, #16386	; 0x4002
     cc8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ccc:	f2c4 0202 	movt	r2, #16386	; 0x4002
     cd0:	6852      	ldr	r2, [r2, #4]
     cd2:	f042 0202 	orr.w	r2, r2, #2
     cd6:	605a      	str	r2, [r3, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
     cd8:	bf00      	nop
     cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     cde:	f2c4 0302 	movt	r3, #16386	; 0x4002
     ce2:	685b      	ldr	r3, [r3, #4]
     ce4:	f003 030c 	and.w	r3, r3, #12
     ce8:	2b08      	cmp	r3, #8
     cea:	d1f6      	bne.n	cda <SetSysClockTo72+0x18e>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
     cec:	f107 070c 	add.w	r7, r7, #12
     cf0:	46bd      	mov	sp, r7
     cf2:	bc80      	pop	{r7}
     cf4:	4770      	bx	lr
     cf6:	bf00      	nop
     cf8:	000082fc 	.word	0x000082fc
     cfc:	20000000 	.word	0x20000000
     d00:	20000030 	.word	0x20000030
     d04:	20000030 	.word	0x20000030
     d08:	200045c8 	.word	0x200045c8

00000d0c <init_led>:
#include "stm32f10x_exti.h"
#include "stm32f10x_adc.h"
#include "misc.h"

void init_led(void)
{
     d0c:	b580      	push	{r7, lr}
     d0e:	b082      	sub	sp, #8
     d10:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO C clock. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
     d12:	f04f 0010 	mov.w	r0, #16
     d16:	f04f 0101 	mov.w	r1, #1
     d1a:	f000 fd51 	bl	17c0 <RCC_APB2PeriphClockCmd>

    /* Set the LED pin state such that the LED is off.  The LED is connected
     * between power and the microcontroller pin, which makes it turn on when
     * the pin is low.
     */
    GPIO_WriteBit(GPIOC,GPIO_Pin_12,Bit_SET);
     d1e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     d22:	f2c4 0001 	movt	r0, #16385	; 0x4001
     d26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     d2a:	f04f 0201 	mov.w	r2, #1
     d2e:	f001 f8af 	bl	1e90 <GPIO_WriteBit>

    /* Configure the LED pin as push-pull output. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_12;
     d32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     d36:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
     d38:	f04f 0310 	mov.w	r3, #16
     d3c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     d3e:	f04f 0303 	mov.w	r3, #3
     d42:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
     d44:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     d48:	f2c4 0001 	movt	r0, #16385	; 0x4001
     d4c:	f107 0304 	add.w	r3, r7, #4
     d50:	4619      	mov	r1, r3
     d52:	f000 ff3b 	bl	1bcc <GPIO_Init>
}
     d56:	f107 0708 	add.w	r7, r7, #8
     d5a:	46bd      	mov	sp, r7
     d5c:	bd80      	pop	{r7, pc}
     d5e:	bf00      	nop

00000d60 <init_button>:

void init_button(void)
{
     d60:	b580      	push	{r7, lr}
     d62:	b082      	sub	sp, #8
     d64:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable GPIO A clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
     d66:	f04f 0004 	mov.w	r0, #4
     d6a:	f04f 0101 	mov.w	r1, #1
     d6e:	f000 fd27 	bl	17c0 <RCC_APB2PeriphClockCmd>

    /* Configure the button pin as a floating input. */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0;
     d72:	f04f 0301 	mov.w	r3, #1
     d76:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     d78:	f04f 0304 	mov.w	r3, #4
     d7c:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     d7e:	f04f 0303 	mov.w	r3, #3
     d82:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
     d84:	f44f 5080 	mov.w	r0, #4096	; 0x1000
     d88:	f2c4 0001 	movt	r0, #16385	; 0x4001
     d8c:	f107 0304 	add.w	r3, r7, #4
     d90:	4619      	mov	r1, r3
     d92:	f000 ff1b 	bl	1bcc <GPIO_Init>
}
     d96:	f107 0708 	add.w	r7, r7, #8
     d9a:	46bd      	mov	sp, r7
     d9c:	bd80      	pop	{r7, pc}
     d9e:	bf00      	nop

00000da0 <enable_button_interrupts>:

void enable_button_interrupts(void)
{
     da0:	b580      	push	{r7, lr}
     da2:	b084      	sub	sp, #16
     da4:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable the AFIO clock.  GPIO_EXTILineConfig sets registers in
     * the AFIO.
     */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
     da6:	f04f 0001 	mov.w	r0, #1
     daa:	f04f 0101 	mov.w	r1, #1
     dae:	f000 fd07 	bl	17c0 <RCC_APB2PeriphClockCmd>

    /* Connect EXTI Line 0 to the button GPIO Pin */
    GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
     db2:	f04f 0000 	mov.w	r0, #0
     db6:	f04f 0100 	mov.w	r1, #0
     dba:	f001 f97b 	bl	20b4 <GPIO_EXTILineConfig>

    /* Configure the EXTI line to generate an interrupt when the button is
     * pressed.  The button pin is high when pressed, so it needs to trigger
     * when rising from low to high. */
    EXTI_InitStructure.EXTI_Line = EXTI_Line0;
     dbe:	f04f 0301 	mov.w	r3, #1
     dc2:	60bb      	str	r3, [r7, #8]
    EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
     dc4:	f04f 0300 	mov.w	r3, #0
     dc8:	733b      	strb	r3, [r7, #12]
    EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
     dca:	f04f 0308 	mov.w	r3, #8
     dce:	737b      	strb	r3, [r7, #13]
    EXTI_InitStructure.EXTI_LineCmd = ENABLE;
     dd0:	f04f 0301 	mov.w	r3, #1
     dd4:	73bb      	strb	r3, [r7, #14]
    EXTI_Init(&EXTI_InitStructure);
     dd6:	f107 0308 	add.w	r3, r7, #8
     dda:	4618      	mov	r0, r3
     ddc:	f001 fed8 	bl	2b90 <EXTI_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    NVIC_InitStructure.NVIC_IRQChannel = EXTI0_IRQn;
     de0:	f04f 0306 	mov.w	r3, #6
     de4:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x0F;
     de6:	f04f 030f 	mov.w	r3, #15
     dea:	717b      	strb	r3, [r7, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x0F;
     dec:	f04f 030f 	mov.w	r3, #15
     df0:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     df2:	f04f 0301 	mov.w	r3, #1
     df6:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     df8:	f107 0304 	add.w	r3, r7, #4
     dfc:	4618      	mov	r0, r3
     dfe:	f004 fd89 	bl	5914 <NVIC_Init>
}
     e02:	f107 0710 	add.w	r7, r7, #16
     e06:	46bd      	mov	sp, r7
     e08:	bd80      	pop	{r7, pc}
     e0a:	bf00      	nop

00000e0c <init_rs232>:

void init_rs232(void)
{
     e0c:	b580      	push	{r7, lr}
     e0e:	b086      	sub	sp, #24
     e10:	af00      	add	r7, sp, #0
    USART_InitTypeDef USART_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable peripheral clocks. */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_AFIO, ENABLE);
     e12:	f04f 0005 	mov.w	r0, #5
     e16:	f04f 0101 	mov.w	r1, #1
     e1a:	f000 fcd1 	bl	17c0 <RCC_APB2PeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
     e1e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
     e22:	f04f 0101 	mov.w	r1, #1
     e26:	f000 fcf5 	bl	1814 <RCC_APB1PeriphClockCmd>

    /* Configure USART2 Rx pin as floating input. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
     e2a:	f04f 0308 	mov.w	r3, #8
     e2e:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
     e30:	f04f 0304 	mov.w	r3, #4
     e34:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     e36:	f44f 6000 	mov.w	r0, #2048	; 0x800
     e3a:	f2c4 0001 	movt	r0, #16385	; 0x4001
     e3e:	f107 0304 	add.w	r3, r7, #4
     e42:	4619      	mov	r1, r3
     e44:	f000 fec2 	bl	1bcc <GPIO_Init>

    /* Configure USART2 Tx as alternate function push-pull. */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
     e48:	f04f 0304 	mov.w	r3, #4
     e4c:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
     e4e:	f04f 0303 	mov.w	r3, #3
     e52:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
     e54:	f04f 0318 	mov.w	r3, #24
     e58:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     e5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
     e5e:	f2c4 0001 	movt	r0, #16385	; 0x4001
     e62:	f107 0304 	add.w	r3, r7, #4
     e66:	4619      	mov	r1, r3
     e68:	f000 feb0 	bl	1bcc <GPIO_Init>

    /* Configure the USART2 */
    USART_InitStructure.USART_BaudRate = 9600;
     e6c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
     e70:	60bb      	str	r3, [r7, #8]
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
     e72:	f04f 0300 	mov.w	r3, #0
     e76:	81bb      	strh	r3, [r7, #12]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
     e78:	f04f 0300 	mov.w	r3, #0
     e7c:	81fb      	strh	r3, [r7, #14]
    USART_InitStructure.USART_Parity = USART_Parity_No;
     e7e:	f04f 0300 	mov.w	r3, #0
     e82:	823b      	strh	r3, [r7, #16]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
     e84:	f04f 0300 	mov.w	r3, #0
     e88:	82bb      	strh	r3, [r7, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
     e8a:	f04f 030c 	mov.w	r3, #12
     e8e:	827b      	strh	r3, [r7, #18]
    USART_Init(USART2, &USART_InitStructure);
     e90:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     e94:	f2c4 0000 	movt	r0, #16384	; 0x4000
     e98:	f107 0308 	add.w	r3, r7, #8
     e9c:	4619      	mov	r1, r3
     e9e:	f001 f9dd 	bl	225c <USART_Init>
    USART_Cmd(USART2, ENABLE);
     ea2:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     ea6:	f2c4 0000 	movt	r0, #16384	; 0x4000
     eaa:	f04f 0101 	mov.w	r1, #1
     eae:	f001 fb13 	bl	24d8 <USART_Cmd>
}
     eb2:	f107 0718 	add.w	r7, r7, #24
     eb6:	46bd      	mov	sp, r7
     eb8:	bd80      	pop	{r7, pc}
     eba:	bf00      	nop

00000ebc <enable_rs232_interrupts>:

void enable_rs232_interrupts(void)
{
     ebc:	b580      	push	{r7, lr}
     ebe:	b082      	sub	sp, #8
     ec0:	af00      	add	r7, sp, #0
    NVIC_InitTypeDef NVIC_InitStructure;

    /* Enable transmit and receive interrupts for the USART2. */
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
     ec2:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     ec6:	f2c4 0000 	movt	r0, #16384	; 0x4000
     eca:	f240 7127 	movw	r1, #1831	; 0x727
     ece:	f04f 0200 	mov.w	r2, #0
     ed2:	f001 fb21 	bl	2518 <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
     ed6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     eda:	f2c4 0000 	movt	r0, #16384	; 0x4000
     ede:	f240 5125 	movw	r1, #1317	; 0x525
     ee2:	f04f 0201 	mov.w	r2, #1
     ee6:	f001 fb17 	bl	2518 <USART_ITConfig>

    /* Enable the USART2 IRQ in the NVIC module (so that the USART2 interrupt
     * handler is enabled). */
    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
     eea:	f04f 0326 	mov.w	r3, #38	; 0x26
     eee:	713b      	strb	r3, [r7, #4]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
     ef0:	f04f 0300 	mov.w	r3, #0
     ef4:	71bb      	strb	r3, [r7, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
     ef6:	f04f 0301 	mov.w	r3, #1
     efa:	71fb      	strb	r3, [r7, #7]
    NVIC_Init(&NVIC_InitStructure);
     efc:	f107 0304 	add.w	r3, r7, #4
     f00:	4618      	mov	r0, r3
     f02:	f004 fd07 	bl	5914 <NVIC_Init>
}
     f06:	f107 0708 	add.w	r7, r7, #8
     f0a:	46bd      	mov	sp, r7
     f0c:	bd80      	pop	{r7, pc}
     f0e:	bf00      	nop

00000f10 <enable_rs232>:

void enable_rs232(void)
{
     f10:	b580      	push	{r7, lr}
     f12:	af00      	add	r7, sp, #0
    /* Enable the RS232 port. */
    USART_Cmd(USART2, ENABLE);
     f14:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     f18:	f2c4 0000 	movt	r0, #16384	; 0x4000
     f1c:	f04f 0101 	mov.w	r1, #1
     f20:	f001 fada 	bl	24d8 <USART_Cmd>
}
     f24:	bd80      	pop	{r7, pc}
     f26:	bf00      	nop

00000f28 <rs232_print_str>:

void rs232_print_str(const char *str)
{
     f28:	b580      	push	{r7, lr}
     f2a:	b084      	sub	sp, #16
     f2c:	af00      	add	r7, sp, #0
     f2e:	6078      	str	r0, [r7, #4]
    const char *curr_char = str;
     f30:	687b      	ldr	r3, [r7, #4]
     f32:	60fb      	str	r3, [r7, #12]

    while(*curr_char != '\0') {
     f34:	e018      	b.n	f68 <rs232_print_str+0x40>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     f36:	bf00      	nop
     f38:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     f3c:	f2c4 0000 	movt	r0, #16384	; 0x4000
     f40:	f04f 0180 	mov.w	r1, #128	; 0x80
     f44:	f001 fd44 	bl	29d0 <USART_GetFlagStatus>
     f48:	4603      	mov	r3, r0
     f4a:	2b00      	cmp	r3, #0
     f4c:	d0f4      	beq.n	f38 <rs232_print_str+0x10>
        USART_SendData(USART2, *curr_char);
     f4e:	68fb      	ldr	r3, [r7, #12]
     f50:	781b      	ldrb	r3, [r3, #0]
     f52:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     f56:	f2c4 0000 	movt	r0, #16384	; 0x4000
     f5a:	4619      	mov	r1, r3
     f5c:	f001 fbe6 	bl	272c <USART_SendData>
        curr_char++;
     f60:	68fb      	ldr	r3, [r7, #12]
     f62:	f103 0301 	add.w	r3, r3, #1
     f66:	60fb      	str	r3, [r7, #12]

void rs232_print_str(const char *str)
{
    const char *curr_char = str;

    while(*curr_char != '\0') {
     f68:	68fb      	ldr	r3, [r7, #12]
     f6a:	781b      	ldrb	r3, [r3, #0]
     f6c:	2b00      	cmp	r3, #0
     f6e:	d1e2      	bne.n	f36 <rs232_print_str+0xe>
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
        USART_SendData(USART2, *curr_char);
        curr_char++;
    }
}
     f70:	f107 0710 	add.w	r7, r7, #16
     f74:	46bd      	mov	sp, r7
     f76:	bd80      	pop	{r7, pc}

00000f78 <hex_to_char>:

/* Functions for sending numbers through the UART */
char hex_to_char(unsigned hex_number)
{
     f78:	b480      	push	{r7}
     f7a:	b083      	sub	sp, #12
     f7c:	af00      	add	r7, sp, #0
     f7e:	6078      	str	r0, [r7, #4]
    if(hex_number < 0xA) {
     f80:	687b      	ldr	r3, [r7, #4]
     f82:	2b09      	cmp	r3, #9
     f84:	d805      	bhi.n	f92 <hex_to_char+0x1a>
        return hex_number + '0';
     f86:	687b      	ldr	r3, [r7, #4]
     f88:	b2db      	uxtb	r3, r3
     f8a:	f103 0330 	add.w	r3, r3, #48	; 0x30
     f8e:	b2db      	uxtb	r3, r3
     f90:	e004      	b.n	f9c <hex_to_char+0x24>
    } else {
        return hex_number - 0xA + 'A';
     f92:	687b      	ldr	r3, [r7, #4]
     f94:	b2db      	uxtb	r3, r3
     f96:	f103 0337 	add.w	r3, r3, #55	; 0x37
     f9a:	b2db      	uxtb	r3, r3
    }
}
     f9c:	4618      	mov	r0, r3
     f9e:	f107 070c 	add.w	r7, r7, #12
     fa2:	46bd      	mov	sp, r7
     fa4:	bc80      	pop	{r7}
     fa6:	4770      	bx	lr

00000fa8 <send_byte>:

void send_byte(uint8_t b)
{
     fa8:	b580      	push	{r7, lr}
     faa:	b082      	sub	sp, #8
     fac:	af00      	add	r7, sp, #0
     fae:	4603      	mov	r3, r0
     fb0:	71fb      	strb	r3, [r7, #7]
    /* Wait until the RS232 port can receive another byte. */
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
     fb2:	bf00      	nop
     fb4:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     fb8:	f2c4 0000 	movt	r0, #16384	; 0x4000
     fbc:	f04f 0180 	mov.w	r1, #128	; 0x80
     fc0:	f001 fd06 	bl	29d0 <USART_GetFlagStatus>
     fc4:	4603      	mov	r3, r0
     fc6:	2b00      	cmp	r3, #0
     fc8:	d0f4      	beq.n	fb4 <send_byte+0xc>

    /* Toggle the LED just to show that progress is being made. */
    GPIOC->ODR ^= 0x00001000;
     fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
     fce:	f2c4 0301 	movt	r3, #16385	; 0x4001
     fd2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     fd6:	f2c4 0201 	movt	r2, #16385	; 0x4001
     fda:	68d2      	ldr	r2, [r2, #12]
     fdc:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
     fe0:	60da      	str	r2, [r3, #12]

    /* Send the byte */
    USART_SendData(USART2, b);
     fe2:	79fb      	ldrb	r3, [r7, #7]
     fe4:	b29b      	uxth	r3, r3
     fe6:	f44f 4088 	mov.w	r0, #17408	; 0x4400
     fea:	f2c4 0000 	movt	r0, #16384	; 0x4000
     fee:	4619      	mov	r1, r3
     ff0:	f001 fb9c 	bl	272c <USART_SendData>
}
     ff4:	f107 0708 	add.w	r7, r7, #8
     ff8:	46bd      	mov	sp, r7
     ffa:	bd80      	pop	{r7, pc}

00000ffc <send_number>:

void send_number(unsigned long sample, int radix)
{
     ffc:	b580      	push	{r7, lr}
     ffe:	b09e      	sub	sp, #120	; 0x78
    1000:	af00      	add	r7, sp, #0
    1002:	6078      	str	r0, [r7, #4]
    1004:	6039      	str	r1, [r7, #0]
    int digit;
    unsigned long  mod;
    char str[100];

    digit = 0;
    1006:	f04f 0300 	mov.w	r3, #0
    100a:	677b      	str	r3, [r7, #116]	; 0x74
    do {
        mod = sample % radix;
    100c:	683a      	ldr	r2, [r7, #0]
    100e:	687b      	ldr	r3, [r7, #4]
    1010:	fbb3 f1f2 	udiv	r1, r3, r2
    1014:	fb02 f201 	mul.w	r2, r2, r1
    1018:	1a9b      	subs	r3, r3, r2
    101a:	673b      	str	r3, [r7, #112]	; 0x70
        str[digit] = hex_to_char(mod);
    101c:	6f38      	ldr	r0, [r7, #112]	; 0x70
    101e:	f7ff ffab 	bl	f78 <hex_to_char>
    1022:	4603      	mov	r3, r0
    1024:	461a      	mov	r2, r3
    1026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1028:	f107 010c 	add.w	r1, r7, #12
    102c:	18cb      	adds	r3, r1, r3
    102e:	701a      	strb	r2, [r3, #0]
        sample /= radix;
    1030:	683b      	ldr	r3, [r7, #0]
    1032:	687a      	ldr	r2, [r7, #4]
    1034:	fbb2 f3f3 	udiv	r3, r2, r3
    1038:	607b      	str	r3, [r7, #4]
        digit++;
    103a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    103c:	f103 0301 	add.w	r3, r3, #1
    1040:	677b      	str	r3, [r7, #116]	; 0x74
    } while(sample != 0);
    1042:	687b      	ldr	r3, [r7, #4]
    1044:	2b00      	cmp	r3, #0
    1046:	d1e1      	bne.n	100c <send_number+0x10>

    while(digit != 0) {
    1048:	e01b      	b.n	1082 <send_number+0x86>
        digit--;
    104a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    104c:	f103 33ff 	add.w	r3, r3, #4294967295
    1050:	677b      	str	r3, [r7, #116]	; 0x74
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
    1052:	bf00      	nop
    1054:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    1058:	f2c4 0000 	movt	r0, #16384	; 0x4000
    105c:	f04f 0180 	mov.w	r1, #128	; 0x80
    1060:	f001 fcb6 	bl	29d0 <USART_GetFlagStatus>
    1064:	4603      	mov	r3, r0
    1066:	2b00      	cmp	r3, #0
    1068:	d0f4      	beq.n	1054 <send_number+0x58>
        USART_SendData(USART2, str[digit]);
    106a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    106c:	f107 020c 	add.w	r2, r7, #12
    1070:	18d3      	adds	r3, r2, r3
    1072:	781b      	ldrb	r3, [r3, #0]
    1074:	f44f 4088 	mov.w	r0, #17408	; 0x4400
    1078:	f2c4 0000 	movt	r0, #16384	; 0x4000
    107c:	4619      	mov	r1, r3
    107e:	f001 fb55 	bl	272c <USART_SendData>
        str[digit] = hex_to_char(mod);
        sample /= radix;
        digit++;
    } while(sample != 0);

    while(digit != 0) {
    1082:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    1084:	2b00      	cmp	r3, #0
    1086:	d1e0      	bne.n	104a <send_number+0x4e>
        digit--;
        while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
        USART_SendData(USART2, str[digit]);
    }
}
    1088:	f107 0778 	add.w	r7, r7, #120	; 0x78
    108c:	46bd      	mov	sp, r7
    108e:	bd80      	pop	{r7, pc}

00001090 <RCC_DeInit>:
  * @brief  Resets the RCC clock configuration to the default reset state.
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
    1090:	b480      	push	{r7}
    1092:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
    1094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1098:	f2c4 0302 	movt	r3, #16386	; 0x4002
    109c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    10a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
    10a4:	6812      	ldr	r2, [r2, #0]
    10a6:	f042 0201 	orr.w	r2, r2, #1
    10aa:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
    10ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    10b0:	f2c4 0202 	movt	r2, #16386	; 0x4002
    10b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10b8:	f2c4 0302 	movt	r3, #16386	; 0x4002
    10bc:	6859      	ldr	r1, [r3, #4]
    10be:	f04f 0300 	mov.w	r3, #0
    10c2:	f6cf 03ff 	movt	r3, #63743	; 0xf8ff
    10c6:	400b      	ands	r3, r1
    10c8:	6053      	str	r3, [r2, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
    10ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ce:	f2c4 0302 	movt	r3, #16386	; 0x4002
    10d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    10d6:	f2c4 0202 	movt	r2, #16386	; 0x4002
    10da:	6812      	ldr	r2, [r2, #0]
    10dc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
    10e0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    10e4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
    10e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    10ea:	f2c4 0302 	movt	r3, #16386	; 0x4002
    10ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    10f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
    10f6:	6812      	ldr	r2, [r2, #0]
    10f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    10fc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
    10fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1102:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1106:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    110a:	f2c4 0202 	movt	r2, #16386	; 0x4002
    110e:	6852      	ldr	r2, [r2, #4]
    1110:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
    1114:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
    1116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    111a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    111e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
    1122:	609a      	str	r2, [r3, #8]
#endif /* STM32F10X_CL */

}
    1124:	46bd      	mov	sp, r7
    1126:	bc80      	pop	{r7}
    1128:	4770      	bx	lr
    112a:	bf00      	nop

0000112c <RCC_HSEConfig>:
  *     @arg RCC_HSE_ON: HSE oscillator ON
  *     @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint32_t RCC_HSE)
{
    112c:	b480      	push	{r7}
    112e:	b083      	sub	sp, #12
    1130:	af00      	add	r7, sp, #0
    1132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));
  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
    1134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1138:	f2c4 0302 	movt	r3, #16386	; 0x4002
    113c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1140:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1144:	6812      	ldr	r2, [r2, #0]
    1146:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    114a:	601a      	str	r2, [r3, #0]
  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
    114c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1150:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1154:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1158:	f2c4 0202 	movt	r2, #16386	; 0x4002
    115c:	6812      	ldr	r2, [r2, #0]
    115e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    1162:	601a      	str	r2, [r3, #0]
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
    1164:	687b      	ldr	r3, [r7, #4]
    1166:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    116a:	d003      	beq.n	1174 <RCC_HSEConfig+0x48>
    116c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1170:	d00d      	beq.n	118e <RCC_HSEConfig+0x62>
    1172:	e019      	b.n	11a8 <RCC_HSEConfig+0x7c>
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
    1174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1178:	f2c4 0302 	movt	r3, #16386	; 0x4002
    117c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1180:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1184:	6812      	ldr	r2, [r2, #0]
    1186:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    118a:	601a      	str	r2, [r3, #0]
      break;
    118c:	e00d      	b.n	11aa <RCC_HSEConfig+0x7e>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
    118e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1192:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1196:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    119a:	f2c4 0202 	movt	r2, #16386	; 0x4002
    119e:	6812      	ldr	r2, [r2, #0]
    11a0:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
    11a4:	601a      	str	r2, [r3, #0]
      break;
    11a6:	e000      	b.n	11aa <RCC_HSEConfig+0x7e>
      
    default:
      break;
    11a8:	bf00      	nop
  }
}
    11aa:	f107 070c 	add.w	r7, r7, #12
    11ae:	46bd      	mov	sp, r7
    11b0:	bc80      	pop	{r7}
    11b2:	4770      	bx	lr

000011b4 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumuration value:
  * - SUCCESS: HSE oscillator is stable and ready to use
  * - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
    11b4:	b580      	push	{r7, lr}
    11b6:	b082      	sub	sp, #8
    11b8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0;
    11ba:	f04f 0300 	mov.w	r3, #0
    11be:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
    11c0:	f04f 0300 	mov.w	r3, #0
    11c4:	71fb      	strb	r3, [r7, #7]
  FlagStatus HSEStatus = RESET;
    11c6:	f04f 0300 	mov.w	r3, #0
    11ca:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    11cc:	f04f 0031 	mov.w	r0, #49	; 0x31
    11d0:	f000 fbce 	bl	1970 <RCC_GetFlagStatus>
    11d4:	4603      	mov	r3, r0
    11d6:	71bb      	strb	r3, [r7, #6]
    StartUpCounter++;  
    11d8:	683b      	ldr	r3, [r7, #0]
    11da:	f103 0301 	add.w	r3, r3, #1
    11de:	603b      	str	r3, [r7, #0]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
    11e0:	683b      	ldr	r3, [r7, #0]
    11e2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    11e6:	d002      	beq.n	11ee <RCC_WaitForHSEStartUp+0x3a>
    11e8:	79bb      	ldrb	r3, [r7, #6]
    11ea:	2b00      	cmp	r3, #0
    11ec:	d0ee      	beq.n	11cc <RCC_WaitForHSEStartUp+0x18>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
    11ee:	f04f 0031 	mov.w	r0, #49	; 0x31
    11f2:	f000 fbbd 	bl	1970 <RCC_GetFlagStatus>
    11f6:	4603      	mov	r3, r0
    11f8:	2b00      	cmp	r3, #0
    11fa:	d003      	beq.n	1204 <RCC_WaitForHSEStartUp+0x50>
  {
    status = SUCCESS;
    11fc:	f04f 0301 	mov.w	r3, #1
    1200:	71fb      	strb	r3, [r7, #7]
    1202:	e002      	b.n	120a <RCC_WaitForHSEStartUp+0x56>
  }
  else
  {
    status = ERROR;
    1204:	f04f 0300 	mov.w	r3, #0
    1208:	71fb      	strb	r3, [r7, #7]
  }  
  return (status);
    120a:	79fb      	ldrb	r3, [r7, #7]
}
    120c:	4618      	mov	r0, r3
    120e:	f107 0708 	add.w	r7, r7, #8
    1212:	46bd      	mov	sp, r7
    1214:	bd80      	pop	{r7, pc}
    1216:	bf00      	nop

00001218 <RCC_AdjustHSICalibrationValue>:
  * @param  HSICalibrationValue: specifies the calibration trimming value.
  *   This parameter must be a number between 0 and 0x1F.
  * @retval None
  */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
    1218:	b480      	push	{r7}
    121a:	b085      	sub	sp, #20
    121c:	af00      	add	r7, sp, #0
    121e:	4603      	mov	r3, r0
    1220:	71fb      	strb	r3, [r7, #7]
  uint32_t tmpreg = 0;
    1222:	f04f 0300 	mov.w	r3, #0
    1226:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_CALIBRATION_VALUE(HSICalibrationValue));
  tmpreg = RCC->CR;
    1228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    122c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1230:	681b      	ldr	r3, [r3, #0]
    1232:	60fb      	str	r3, [r7, #12]
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= CR_HSITRIM_Mask;
    1234:	68fb      	ldr	r3, [r7, #12]
    1236:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
    123a:	60fb      	str	r3, [r7, #12]
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
    123c:	79fb      	ldrb	r3, [r7, #7]
    123e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    1242:	68fa      	ldr	r2, [r7, #12]
    1244:	4313      	orrs	r3, r2
    1246:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CR = tmpreg;
    1248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    124c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1250:	68fa      	ldr	r2, [r7, #12]
    1252:	601a      	str	r2, [r3, #0]
}
    1254:	f107 0714 	add.w	r7, r7, #20
    1258:	46bd      	mov	sp, r7
    125a:	bc80      	pop	{r7}
    125c:	4770      	bx	lr
    125e:	bf00      	nop

00001260 <RCC_HSICmd>:
  * @note   HSI can not be stopped if it is used directly or through the PLL as system clock.
  * @param  NewState: new state of the HSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
    1260:	b480      	push	{r7}
    1262:	b083      	sub	sp, #12
    1264:	af00      	add	r7, sp, #0
    1266:	4603      	mov	r3, r0
    1268:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
    126a:	f04f 0300 	mov.w	r3, #0
    126e:	f2c4 2342 	movt	r3, #16962	; 0x4242
    1272:	79fa      	ldrb	r2, [r7, #7]
    1274:	601a      	str	r2, [r3, #0]
}
    1276:	f107 070c 	add.w	r7, r7, #12
    127a:	46bd      	mov	sp, r7
    127c:	bc80      	pop	{r7}
    127e:	4770      	bx	lr

00001280 <RCC_PLLConfig>:
  *   For @b STM32_Connectivity_line_devices, this parameter can be RCC_PLLMul_x where x:{[4,9], 6_5}
  *   For @b other_STM32_devices, this parameter can be RCC_PLLMul_x where x:[2,16]  
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
    1280:	b480      	push	{r7}
    1282:	b085      	sub	sp, #20
    1284:	af00      	add	r7, sp, #0
    1286:	6078      	str	r0, [r7, #4]
    1288:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    128a:	f04f 0300 	mov.w	r3, #0
    128e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  tmpreg = RCC->CFGR;
    1290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1294:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1298:	685b      	ldr	r3, [r3, #4]
    129a:	60fb      	str	r3, [r7, #12]
  /* Clear PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  tmpreg &= CFGR_PLL_Mask;
    129c:	68fb      	ldr	r3, [r7, #12]
    129e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
    12a2:	60fb      	str	r3, [r7, #12]
  /* Set the PLL configuration bits */
  tmpreg |= RCC_PLLSource | RCC_PLLMul;
    12a4:	687a      	ldr	r2, [r7, #4]
    12a6:	683b      	ldr	r3, [r7, #0]
    12a8:	4313      	orrs	r3, r2
    12aa:	68fa      	ldr	r2, [r7, #12]
    12ac:	4313      	orrs	r3, r2
    12ae:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    12b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    12b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    12b8:	68fa      	ldr	r2, [r7, #12]
    12ba:	605a      	str	r2, [r3, #4]
}
    12bc:	f107 0714 	add.w	r7, r7, #20
    12c0:	46bd      	mov	sp, r7
    12c2:	bc80      	pop	{r7}
    12c4:	4770      	bx	lr
    12c6:	bf00      	nop

000012c8 <RCC_PLLCmd>:
  * @note   The PLL can not be disabled if it is used as system clock.
  * @param  NewState: new state of the PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
    12c8:	b480      	push	{r7}
    12ca:	b083      	sub	sp, #12
    12cc:	af00      	add	r7, sp, #0
    12ce:	4603      	mov	r3, r0
    12d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
    12d2:	f04f 0360 	mov.w	r3, #96	; 0x60
    12d6:	f2c4 2342 	movt	r3, #16962	; 0x4242
    12da:	79fa      	ldrb	r2, [r7, #7]
    12dc:	601a      	str	r2, [r3, #0]
}
    12de:	f107 070c 	add.w	r7, r7, #12
    12e2:	46bd      	mov	sp, r7
    12e4:	bc80      	pop	{r7}
    12e6:	4770      	bx	lr

000012e8 <RCC_SYSCLKConfig>:
  *     @arg RCC_SYSCLKSource_HSE: HSE selected as system clock
  *     @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
    12e8:	b480      	push	{r7}
    12ea:	b085      	sub	sp, #20
    12ec:	af00      	add	r7, sp, #0
    12ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    12f0:	f04f 0300 	mov.w	r3, #0
    12f4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  tmpreg = RCC->CFGR;
    12f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    12fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
    12fe:	685b      	ldr	r3, [r3, #4]
    1300:	60fb      	str	r3, [r7, #12]
  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
    1302:	68fb      	ldr	r3, [r7, #12]
    1304:	f023 0303 	bic.w	r3, r3, #3
    1308:	60fb      	str	r3, [r7, #12]
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
    130a:	68fa      	ldr	r2, [r7, #12]
    130c:	687b      	ldr	r3, [r7, #4]
    130e:	4313      	orrs	r3, r2
    1310:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1316:	f2c4 0302 	movt	r3, #16386	; 0x4002
    131a:	68fa      	ldr	r2, [r7, #12]
    131c:	605a      	str	r2, [r3, #4]
}
    131e:	f107 0714 	add.w	r7, r7, #20
    1322:	46bd      	mov	sp, r7
    1324:	bc80      	pop	{r7}
    1326:	4770      	bx	lr

00001328 <RCC_GetSYSCLKSource>:
  *     - 0x00: HSI used as system clock
  *     - 0x04: HSE used as system clock
  *     - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
    1328:	b480      	push	{r7}
    132a:	af00      	add	r7, sp, #0
  return ((uint8_t)(RCC->CFGR & CFGR_SWS_Mask));
    132c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1330:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1334:	685b      	ldr	r3, [r3, #4]
    1336:	b2db      	uxtb	r3, r3
    1338:	f003 030c 	and.w	r3, r3, #12
    133c:	b2db      	uxtb	r3, r3
}
    133e:	4618      	mov	r0, r3
    1340:	46bd      	mov	sp, r7
    1342:	bc80      	pop	{r7}
    1344:	4770      	bx	lr
    1346:	bf00      	nop

00001348 <RCC_HCLKConfig>:
  *     @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *     @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
    1348:	b480      	push	{r7}
    134a:	b085      	sub	sp, #20
    134c:	af00      	add	r7, sp, #0
    134e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1350:	f04f 0300 	mov.w	r3, #0
    1354:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  tmpreg = RCC->CFGR;
    1356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    135a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    135e:	685b      	ldr	r3, [r3, #4]
    1360:	60fb      	str	r3, [r7, #12]
  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
    1362:	68fb      	ldr	r3, [r7, #12]
    1364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
    1368:	60fb      	str	r3, [r7, #12]
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
    136a:	68fa      	ldr	r2, [r7, #12]
    136c:	687b      	ldr	r3, [r7, #4]
    136e:	4313      	orrs	r3, r2
    1370:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    1372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1376:	f2c4 0302 	movt	r3, #16386	; 0x4002
    137a:	68fa      	ldr	r2, [r7, #12]
    137c:	605a      	str	r2, [r3, #4]
}
    137e:	f107 0714 	add.w	r7, r7, #20
    1382:	46bd      	mov	sp, r7
    1384:	bc80      	pop	{r7}
    1386:	4770      	bx	lr

00001388 <RCC_PCLK1Config>:
  *     @arg RCC_HCLK_Div8: APB1 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
    1388:	b480      	push	{r7}
    138a:	b085      	sub	sp, #20
    138c:	af00      	add	r7, sp, #0
    138e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1390:	f04f 0300 	mov.w	r3, #0
    1394:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    1396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    139a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    139e:	685b      	ldr	r3, [r3, #4]
    13a0:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
    13a2:	68fb      	ldr	r3, [r7, #12]
    13a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
    13a8:	60fb      	str	r3, [r7, #12]
  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
    13aa:	68fa      	ldr	r2, [r7, #12]
    13ac:	687b      	ldr	r3, [r7, #4]
    13ae:	4313      	orrs	r3, r2
    13b0:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    13b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    13b6:	f2c4 0302 	movt	r3, #16386	; 0x4002
    13ba:	68fa      	ldr	r2, [r7, #12]
    13bc:	605a      	str	r2, [r3, #4]
}
    13be:	f107 0714 	add.w	r7, r7, #20
    13c2:	46bd      	mov	sp, r7
    13c4:	bc80      	pop	{r7}
    13c6:	4770      	bx	lr

000013c8 <RCC_PCLK2Config>:
  *     @arg RCC_HCLK_Div8: APB2 clock = HCLK/8
  *     @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
    13c8:	b480      	push	{r7}
    13ca:	b085      	sub	sp, #20
    13cc:	af00      	add	r7, sp, #0
    13ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    13d0:	f04f 0300 	mov.w	r3, #0
    13d4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  tmpreg = RCC->CFGR;
    13d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    13da:	f2c4 0302 	movt	r3, #16386	; 0x4002
    13de:	685b      	ldr	r3, [r3, #4]
    13e0:	60fb      	str	r3, [r7, #12]
  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
    13e2:	68fb      	ldr	r3, [r7, #12]
    13e4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
    13e8:	60fb      	str	r3, [r7, #12]
  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
    13ea:	687b      	ldr	r3, [r7, #4]
    13ec:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    13f0:	68fa      	ldr	r2, [r7, #12]
    13f2:	4313      	orrs	r3, r2
    13f4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    13f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    13fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
    13fe:	68fa      	ldr	r2, [r7, #12]
    1400:	605a      	str	r2, [r3, #4]
}
    1402:	f107 0714 	add.w	r7, r7, #20
    1406:	46bd      	mov	sp, r7
    1408:	bc80      	pop	{r7}
    140a:	4770      	bx	lr

0000140c <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
    140c:	b480      	push	{r7}
    140e:	b083      	sub	sp, #12
    1410:	af00      	add	r7, sp, #0
    1412:	4602      	mov	r2, r0
    1414:	460b      	mov	r3, r1
    1416:	71fa      	strb	r2, [r7, #7]
    1418:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    141a:	79bb      	ldrb	r3, [r7, #6]
    141c:	2b00      	cmp	r3, #0
    141e:	d00e      	beq.n	143e <RCC_ITConfig+0x32>
  {
    /* Perform Byte access to RCC_CIR bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS |= RCC_IT;
    1420:	f241 0309 	movw	r3, #4105	; 0x1009
    1424:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1428:	f241 0209 	movw	r2, #4105	; 0x1009
    142c:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1430:	7812      	ldrb	r2, [r2, #0]
    1432:	b2d1      	uxtb	r1, r2
    1434:	79fa      	ldrb	r2, [r7, #7]
    1436:	430a      	orrs	r2, r1
    1438:	b2d2      	uxtb	r2, r2
    143a:	701a      	strb	r2, [r3, #0]
    143c:	e010      	b.n	1460 <RCC_ITConfig+0x54>
  }
  else
  {
    /* Perform Byte access to RCC_CIR bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE2_ADDRESS &= (uint8_t)~RCC_IT;
    143e:	f241 0309 	movw	r3, #4105	; 0x1009
    1442:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1446:	f241 0209 	movw	r2, #4105	; 0x1009
    144a:	f2c4 0202 	movt	r2, #16386	; 0x4002
    144e:	7812      	ldrb	r2, [r2, #0]
    1450:	b2d1      	uxtb	r1, r2
    1452:	79fa      	ldrb	r2, [r7, #7]
    1454:	ea6f 0202 	mvn.w	r2, r2
    1458:	b2d2      	uxtb	r2, r2
    145a:	400a      	ands	r2, r1
    145c:	b2d2      	uxtb	r2, r2
    145e:	701a      	strb	r2, [r3, #0]
  }
}
    1460:	f107 070c 	add.w	r7, r7, #12
    1464:	46bd      	mov	sp, r7
    1466:	bc80      	pop	{r7}
    1468:	4770      	bx	lr
    146a:	bf00      	nop

0000146c <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
    146c:	b480      	push	{r7}
    146e:	b083      	sub	sp, #12
    1470:	af00      	add	r7, sp, #0
    1472:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
    1474:	f04f 03d8 	mov.w	r3, #216	; 0xd8
    1478:	f2c4 2342 	movt	r3, #16962	; 0x4242
    147c:	687a      	ldr	r2, [r7, #4]
    147e:	601a      	str	r2, [r3, #0]
}
    1480:	f107 070c 	add.w	r7, r7, #12
    1484:	46bd      	mov	sp, r7
    1486:	bc80      	pop	{r7}
    1488:	4770      	bx	lr
    148a:	bf00      	nop

0000148c <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
    148c:	b480      	push	{r7}
    148e:	b085      	sub	sp, #20
    1490:	af00      	add	r7, sp, #0
    1492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
    1494:	f04f 0300 	mov.w	r3, #0
    1498:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
    149a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    149e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    14a2:	685b      	ldr	r3, [r3, #4]
    14a4:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
    14a6:	68fb      	ldr	r3, [r7, #12]
    14a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    14ac:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
    14ae:	68fa      	ldr	r2, [r7, #12]
    14b0:	687b      	ldr	r3, [r7, #4]
    14b2:	4313      	orrs	r3, r2
    14b4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
    14b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    14ba:	f2c4 0302 	movt	r3, #16386	; 0x4002
    14be:	68fa      	ldr	r2, [r7, #12]
    14c0:	605a      	str	r2, [r3, #4]
}
    14c2:	f107 0714 	add.w	r7, r7, #20
    14c6:	46bd      	mov	sp, r7
    14c8:	bc80      	pop	{r7}
    14ca:	4770      	bx	lr

000014cc <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
    14cc:	b480      	push	{r7}
    14ce:	b083      	sub	sp, #12
    14d0:	af00      	add	r7, sp, #0
    14d2:	4603      	mov	r3, r0
    14d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    14d6:	f44f 5381 	mov.w	r3, #4128	; 0x1020
    14da:	f2c4 0302 	movt	r3, #16386	; 0x4002
    14de:	f04f 0200 	mov.w	r2, #0
    14e2:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
    14e4:	f44f 5381 	mov.w	r3, #4128	; 0x1020
    14e8:	f2c4 0302 	movt	r3, #16386	; 0x4002
    14ec:	f04f 0200 	mov.w	r2, #0
    14f0:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
    14f2:	79fb      	ldrb	r3, [r7, #7]
    14f4:	2b01      	cmp	r3, #1
    14f6:	d002      	beq.n	14fe <RCC_LSEConfig+0x32>
    14f8:	2b04      	cmp	r3, #4
    14fa:	d008      	beq.n	150e <RCC_LSEConfig+0x42>
    14fc:	e00f      	b.n	151e <RCC_LSEConfig+0x52>
  {
    case RCC_LSE_ON:
      /* Set LSEON bit */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
    14fe:	f44f 5381 	mov.w	r3, #4128	; 0x1020
    1502:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1506:	f04f 0201 	mov.w	r2, #1
    150a:	701a      	strb	r2, [r3, #0]
      break;
    150c:	e008      	b.n	1520 <RCC_LSEConfig+0x54>
      
    case RCC_LSE_Bypass:
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
    150e:	f44f 5381 	mov.w	r3, #4128	; 0x1020
    1512:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1516:	f04f 0205 	mov.w	r2, #5
    151a:	701a      	strb	r2, [r3, #0]
      break;            
    151c:	e000      	b.n	1520 <RCC_LSEConfig+0x54>
      
    default:
      break;      
    151e:	bf00      	nop
  }
}
    1520:	f107 070c 	add.w	r7, r7, #12
    1524:	46bd      	mov	sp, r7
    1526:	bc80      	pop	{r7}
    1528:	4770      	bx	lr
    152a:	bf00      	nop

0000152c <RCC_LSICmd>:
  * @note   LSI can not be disabled if the IWDG is running.
  * @param  NewState: new state of the LSI. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
    152c:	b480      	push	{r7}
    152e:	b083      	sub	sp, #12
    1530:	af00      	add	r7, sp, #0
    1532:	4603      	mov	r3, r0
    1534:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CSR_LSION_BB = (uint32_t)NewState;
    1536:	f44f 6390 	mov.w	r3, #1152	; 0x480
    153a:	f2c4 2342 	movt	r3, #16962	; 0x4242
    153e:	79fa      	ldrb	r2, [r7, #7]
    1540:	601a      	str	r2, [r3, #0]
}
    1542:	f107 070c 	add.w	r7, r7, #12
    1546:	46bd      	mov	sp, r7
    1548:	bc80      	pop	{r7}
    154a:	4770      	bx	lr

0000154c <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
    154c:	b480      	push	{r7}
    154e:	b083      	sub	sp, #12
    1550:	af00      	add	r7, sp, #0
    1552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
    1554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1558:	f2c4 0302 	movt	r3, #16386	; 0x4002
    155c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1560:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1564:	6a11      	ldr	r1, [r2, #32]
    1566:	687a      	ldr	r2, [r7, #4]
    1568:	430a      	orrs	r2, r1
    156a:	621a      	str	r2, [r3, #32]
}
    156c:	f107 070c 	add.w	r7, r7, #12
    1570:	46bd      	mov	sp, r7
    1572:	bc80      	pop	{r7}
    1574:	4770      	bx	lr
    1576:	bf00      	nop

00001578 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
    1578:	b480      	push	{r7}
    157a:	b083      	sub	sp, #12
    157c:	af00      	add	r7, sp, #0
    157e:	4603      	mov	r3, r0
    1580:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
    1582:	f240 433c 	movw	r3, #1084	; 0x43c
    1586:	f2c4 2342 	movt	r3, #16962	; 0x4242
    158a:	79fa      	ldrb	r2, [r7, #7]
    158c:	601a      	str	r2, [r3, #0]
}
    158e:	f107 070c 	add.w	r7, r7, #12
    1592:	46bd      	mov	sp, r7
    1594:	bc80      	pop	{r7}
    1596:	4770      	bx	lr

00001598 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    1598:	b480      	push	{r7}
    159a:	b087      	sub	sp, #28
    159c:	af00      	add	r7, sp, #0
    159e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
    15a0:	f04f 0300 	mov.w	r3, #0
    15a4:	617b      	str	r3, [r7, #20]
    15a6:	f04f 0300 	mov.w	r3, #0
    15aa:	613b      	str	r3, [r7, #16]
    15ac:	f04f 0300 	mov.w	r3, #0
    15b0:	60fb      	str	r3, [r7, #12]
    15b2:	f04f 0300 	mov.w	r3, #0
    15b6:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
    15b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    15bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    15c0:	685b      	ldr	r3, [r3, #4]
    15c2:	f003 030c 	and.w	r3, r3, #12
    15c6:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
    15c8:	697b      	ldr	r3, [r7, #20]
    15ca:	2b04      	cmp	r3, #4
    15cc:	d00a      	beq.n	15e4 <RCC_GetClocksFreq+0x4c>
    15ce:	2b08      	cmp	r3, #8
    15d0:	d00f      	beq.n	15f2 <RCC_GetClocksFreq+0x5a>
    15d2:	2b00      	cmp	r3, #0
    15d4:	d14d      	bne.n	1672 <RCC_GetClocksFreq+0xda>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    15d6:	687a      	ldr	r2, [r7, #4]
    15d8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    15dc:	f2c0 037a 	movt	r3, #122	; 0x7a
    15e0:	6013      	str	r3, [r2, #0]
      break;
    15e2:	e04d      	b.n	1680 <RCC_GetClocksFreq+0xe8>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
    15e4:	687a      	ldr	r2, [r7, #4]
    15e6:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    15ea:	f2c0 037a 	movt	r3, #122	; 0x7a
    15ee:	6013      	str	r3, [r2, #0]
      break;
    15f0:	e046      	b.n	1680 <RCC_GetClocksFreq+0xe8>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
    15f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    15f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
    15fa:	685b      	ldr	r3, [r3, #4]
    15fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
    1600:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
    1602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1606:	f2c4 0302 	movt	r3, #16386	; 0x4002
    160a:	685b      	ldr	r3, [r3, #4]
    160c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    1610:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
    1612:	693b      	ldr	r3, [r7, #16]
    1614:	ea4f 4393 	mov.w	r3, r3, lsr #18
    1618:	f103 0302 	add.w	r3, r3, #2
    161c:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
    161e:	68fb      	ldr	r3, [r7, #12]
    1620:	2b00      	cmp	r3, #0
    1622:	d109      	bne.n	1638 <RCC_GetClocksFreq+0xa0>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
    1624:	693a      	ldr	r2, [r7, #16]
    1626:	f44f 6310 	mov.w	r3, #2304	; 0x900
    162a:	f2c0 033d 	movt	r3, #61	; 0x3d
    162e:	fb03 f202 	mul.w	r2, r3, r2
    1632:	687b      	ldr	r3, [r7, #4]
    1634:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    1636:	e023      	b.n	1680 <RCC_GetClocksFreq+0xe8>
       prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
       /* HSE oscillator clock selected as PREDIV1 clock entry */
       RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 #else
        /* HSE selected as PLL clock entry */
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
    1638:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    163c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1640:	685b      	ldr	r3, [r3, #4]
    1642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    1646:	2b00      	cmp	r3, #0
    1648:	d009      	beq.n	165e <RCC_GetClocksFreq+0xc6>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
    164a:	693a      	ldr	r2, [r7, #16]
    164c:	f44f 6310 	mov.w	r3, #2304	; 0x900
    1650:	f2c0 033d 	movt	r3, #61	; 0x3d
    1654:	fb03 f202 	mul.w	r2, r3, r2
    1658:	687b      	ldr	r3, [r7, #4]
    165a:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    165c:	e010      	b.n	1680 <RCC_GetClocksFreq+0xe8>
        {/* HSE oscillator clock divided by 2 */
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
        }
        else
        {
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
    165e:	693a      	ldr	r2, [r7, #16]
    1660:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    1664:	f2c0 037a 	movt	r3, #122	; 0x7a
    1668:	fb03 f202 	mul.w	r2, r3, r2
    166c:	687b      	ldr	r3, [r7, #4]
    166e:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
    1670:	e006      	b.n	1680 <RCC_GetClocksFreq+0xe8>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    1672:	687a      	ldr	r2, [r7, #4]
    1674:	f44f 5390 	mov.w	r3, #4608	; 0x1200
    1678:	f2c0 037a 	movt	r3, #122	; 0x7a
    167c:	6013      	str	r3, [r2, #0]
      break;
    167e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
    1680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1684:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1688:	685b      	ldr	r3, [r3, #4]
    168a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    168e:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
    1690:	697b      	ldr	r3, [r7, #20]
    1692:	ea4f 1313 	mov.w	r3, r3, lsr #4
    1696:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    1698:	f240 0314 	movw	r3, #20
    169c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    16a0:	697a      	ldr	r2, [r7, #20]
    16a2:	189b      	adds	r3, r3, r2
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	b2db      	uxtb	r3, r3
    16a8:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    16aa:	687b      	ldr	r3, [r7, #4]
    16ac:	681a      	ldr	r2, [r3, #0]
    16ae:	68bb      	ldr	r3, [r7, #8]
    16b0:	fa22 f203 	lsr.w	r2, r2, r3
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
    16b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    16bc:	f2c4 0302 	movt	r3, #16386	; 0x4002
    16c0:	685b      	ldr	r3, [r3, #4]
    16c2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    16c6:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
    16c8:	697b      	ldr	r3, [r7, #20]
    16ca:	ea4f 2313 	mov.w	r3, r3, lsr #8
    16ce:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    16d0:	f240 0314 	movw	r3, #20
    16d4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    16d8:	697a      	ldr	r2, [r7, #20]
    16da:	189b      	adds	r3, r3, r2
    16dc:	781b      	ldrb	r3, [r3, #0]
    16de:	b2db      	uxtb	r3, r3
    16e0:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    16e2:	687b      	ldr	r3, [r7, #4]
    16e4:	685a      	ldr	r2, [r3, #4]
    16e6:	68bb      	ldr	r3, [r7, #8]
    16e8:	fa22 f203 	lsr.w	r2, r2, r3
    16ec:	687b      	ldr	r3, [r7, #4]
    16ee:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
    16f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    16f4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    16f8:	685b      	ldr	r3, [r3, #4]
    16fa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
    16fe:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
    1700:	697b      	ldr	r3, [r7, #20]
    1702:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    1706:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
    1708:	f240 0314 	movw	r3, #20
    170c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1710:	697a      	ldr	r2, [r7, #20]
    1712:	189b      	adds	r3, r3, r2
    1714:	781b      	ldrb	r3, [r3, #0]
    1716:	b2db      	uxtb	r3, r3
    1718:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
    171a:	687b      	ldr	r3, [r7, #4]
    171c:	685a      	ldr	r2, [r3, #4]
    171e:	68bb      	ldr	r3, [r7, #8]
    1720:	fa22 f203 	lsr.w	r2, r2, r3
    1724:	687b      	ldr	r3, [r7, #4]
    1726:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
    1728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    172c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1730:	685b      	ldr	r3, [r3, #4]
    1732:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    1736:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
    1738:	697b      	ldr	r3, [r7, #20]
    173a:	ea4f 3393 	mov.w	r3, r3, lsr #14
    173e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
    1740:	f240 0324 	movw	r3, #36	; 0x24
    1744:	f2c2 0300 	movt	r3, #8192	; 0x2000
    1748:	697a      	ldr	r2, [r7, #20]
    174a:	189b      	adds	r3, r3, r2
    174c:	781b      	ldrb	r3, [r3, #0]
    174e:	b2db      	uxtb	r3, r3
    1750:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
    1752:	687b      	ldr	r3, [r7, #4]
    1754:	68da      	ldr	r2, [r3, #12]
    1756:	68bb      	ldr	r3, [r7, #8]
    1758:	fbb2 f2f3 	udiv	r2, r2, r3
    175c:	687b      	ldr	r3, [r7, #4]
    175e:	611a      	str	r2, [r3, #16]
}
    1760:	f107 071c 	add.w	r7, r7, #28
    1764:	46bd      	mov	sp, r7
    1766:	bc80      	pop	{r7}
    1768:	4770      	bx	lr
    176a:	bf00      	nop

0000176c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    176c:	b480      	push	{r7}
    176e:	b083      	sub	sp, #12
    1770:	af00      	add	r7, sp, #0
    1772:	6078      	str	r0, [r7, #4]
    1774:	460b      	mov	r3, r1
    1776:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
    1778:	78fb      	ldrb	r3, [r7, #3]
    177a:	2b00      	cmp	r3, #0
    177c:	d00c      	beq.n	1798 <RCC_AHBPeriphClockCmd+0x2c>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
    177e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1782:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1786:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    178a:	f2c4 0202 	movt	r2, #16386	; 0x4002
    178e:	6951      	ldr	r1, [r2, #20]
    1790:	687a      	ldr	r2, [r7, #4]
    1792:	430a      	orrs	r2, r1
    1794:	615a      	str	r2, [r3, #20]
    1796:	e00d      	b.n	17b4 <RCC_AHBPeriphClockCmd+0x48>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
    1798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    179c:	f2c4 0302 	movt	r3, #16386	; 0x4002
    17a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    17a4:	f2c4 0202 	movt	r2, #16386	; 0x4002
    17a8:	6951      	ldr	r1, [r2, #20]
    17aa:	687a      	ldr	r2, [r7, #4]
    17ac:	ea6f 0202 	mvn.w	r2, r2
    17b0:	400a      	ands	r2, r1
    17b2:	615a      	str	r2, [r3, #20]
  }
}
    17b4:	f107 070c 	add.w	r7, r7, #12
    17b8:	46bd      	mov	sp, r7
    17ba:	bc80      	pop	{r7}
    17bc:	4770      	bx	lr
    17be:	bf00      	nop

000017c0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    17c0:	b480      	push	{r7}
    17c2:	b083      	sub	sp, #12
    17c4:	af00      	add	r7, sp, #0
    17c6:	6078      	str	r0, [r7, #4]
    17c8:	460b      	mov	r3, r1
    17ca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    17cc:	78fb      	ldrb	r3, [r7, #3]
    17ce:	2b00      	cmp	r3, #0
    17d0:	d00c      	beq.n	17ec <RCC_APB2PeriphClockCmd+0x2c>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
    17d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    17d6:	f2c4 0302 	movt	r3, #16386	; 0x4002
    17da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    17de:	f2c4 0202 	movt	r2, #16386	; 0x4002
    17e2:	6991      	ldr	r1, [r2, #24]
    17e4:	687a      	ldr	r2, [r7, #4]
    17e6:	430a      	orrs	r2, r1
    17e8:	619a      	str	r2, [r3, #24]
    17ea:	e00d      	b.n	1808 <RCC_APB2PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
    17ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    17f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    17f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    17f8:	f2c4 0202 	movt	r2, #16386	; 0x4002
    17fc:	6991      	ldr	r1, [r2, #24]
    17fe:	687a      	ldr	r2, [r7, #4]
    1800:	ea6f 0202 	mvn.w	r2, r2
    1804:	400a      	ands	r2, r1
    1806:	619a      	str	r2, [r3, #24]
  }
}
    1808:	f107 070c 	add.w	r7, r7, #12
    180c:	46bd      	mov	sp, r7
    180e:	bc80      	pop	{r7}
    1810:	4770      	bx	lr
    1812:	bf00      	nop

00001814 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    1814:	b480      	push	{r7}
    1816:	b083      	sub	sp, #12
    1818:	af00      	add	r7, sp, #0
    181a:	6078      	str	r0, [r7, #4]
    181c:	460b      	mov	r3, r1
    181e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1820:	78fb      	ldrb	r3, [r7, #3]
    1822:	2b00      	cmp	r3, #0
    1824:	d00c      	beq.n	1840 <RCC_APB1PeriphClockCmd+0x2c>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
    1826:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    182a:	f2c4 0302 	movt	r3, #16386	; 0x4002
    182e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1832:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1836:	69d1      	ldr	r1, [r2, #28]
    1838:	687a      	ldr	r2, [r7, #4]
    183a:	430a      	orrs	r2, r1
    183c:	61da      	str	r2, [r3, #28]
    183e:	e00d      	b.n	185c <RCC_APB1PeriphClockCmd+0x48>
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
    1840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1844:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1848:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    184c:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1850:	69d1      	ldr	r1, [r2, #28]
    1852:	687a      	ldr	r2, [r7, #4]
    1854:	ea6f 0202 	mvn.w	r2, r2
    1858:	400a      	ands	r2, r1
    185a:	61da      	str	r2, [r3, #28]
  }
}
    185c:	f107 070c 	add.w	r7, r7, #12
    1860:	46bd      	mov	sp, r7
    1862:	bc80      	pop	{r7}
    1864:	4770      	bx	lr
    1866:	bf00      	nop

00001868 <RCC_APB2PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    1868:	b480      	push	{r7}
    186a:	b083      	sub	sp, #12
    186c:	af00      	add	r7, sp, #0
    186e:	6078      	str	r0, [r7, #4]
    1870:	460b      	mov	r3, r1
    1872:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    1874:	78fb      	ldrb	r3, [r7, #3]
    1876:	2b00      	cmp	r3, #0
    1878:	d00c      	beq.n	1894 <RCC_APB2PeriphResetCmd+0x2c>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
    187a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    187e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1882:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1886:	f2c4 0202 	movt	r2, #16386	; 0x4002
    188a:	68d1      	ldr	r1, [r2, #12]
    188c:	687a      	ldr	r2, [r7, #4]
    188e:	430a      	orrs	r2, r1
    1890:	60da      	str	r2, [r3, #12]
    1892:	e00d      	b.n	18b0 <RCC_APB2PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
    1894:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1898:	f2c4 0302 	movt	r3, #16386	; 0x4002
    189c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    18a0:	f2c4 0202 	movt	r2, #16386	; 0x4002
    18a4:	68d1      	ldr	r1, [r2, #12]
    18a6:	687a      	ldr	r2, [r7, #4]
    18a8:	ea6f 0202 	mvn.w	r2, r2
    18ac:	400a      	ands	r2, r1
    18ae:	60da      	str	r2, [r3, #12]
  }
}
    18b0:	f107 070c 	add.w	r7, r7, #12
    18b4:	46bd      	mov	sp, r7
    18b6:	bc80      	pop	{r7}
    18b8:	4770      	bx	lr
    18ba:	bf00      	nop

000018bc <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
    18c4:	460b      	mov	r3, r1
    18c6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    18c8:	78fb      	ldrb	r3, [r7, #3]
    18ca:	2b00      	cmp	r3, #0
    18cc:	d00c      	beq.n	18e8 <RCC_APB1PeriphResetCmd+0x2c>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
    18ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    18d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
    18d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    18da:	f2c4 0202 	movt	r2, #16386	; 0x4002
    18de:	6911      	ldr	r1, [r2, #16]
    18e0:	687a      	ldr	r2, [r7, #4]
    18e2:	430a      	orrs	r2, r1
    18e4:	611a      	str	r2, [r3, #16]
    18e6:	e00d      	b.n	1904 <RCC_APB1PeriphResetCmd+0x48>
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
    18e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    18ec:	f2c4 0302 	movt	r3, #16386	; 0x4002
    18f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    18f4:	f2c4 0202 	movt	r2, #16386	; 0x4002
    18f8:	6911      	ldr	r1, [r2, #16]
    18fa:	687a      	ldr	r2, [r7, #4]
    18fc:	ea6f 0202 	mvn.w	r2, r2
    1900:	400a      	ands	r2, r1
    1902:	611a      	str	r2, [r3, #16]
  }
}
    1904:	f107 070c 	add.w	r7, r7, #12
    1908:	46bd      	mov	sp, r7
    190a:	bc80      	pop	{r7}
    190c:	4770      	bx	lr
    190e:	bf00      	nop

00001910 <RCC_BackupResetCmd>:
  * @param  NewState: new state of the Backup domain reset.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
    1910:	b480      	push	{r7}
    1912:	b083      	sub	sp, #12
    1914:	af00      	add	r7, sp, #0
    1916:	4603      	mov	r3, r0
    1918:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_BDRST_BB = (uint32_t)NewState;
    191a:	f44f 6388 	mov.w	r3, #1088	; 0x440
    191e:	f2c4 2342 	movt	r3, #16962	; 0x4242
    1922:	79fa      	ldrb	r2, [r7, #7]
    1924:	601a      	str	r2, [r3, #0]
}
    1926:	f107 070c 	add.w	r7, r7, #12
    192a:	46bd      	mov	sp, r7
    192c:	bc80      	pop	{r7}
    192e:	4770      	bx	lr

00001930 <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System..
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
    1930:	b480      	push	{r7}
    1932:	b083      	sub	sp, #12
    1934:	af00      	add	r7, sp, #0
    1936:	4603      	mov	r3, r0
    1938:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
    193a:	f04f 034c 	mov.w	r3, #76	; 0x4c
    193e:	f2c4 2342 	movt	r3, #16962	; 0x4242
    1942:	79fa      	ldrb	r2, [r7, #7]
    1944:	601a      	str	r2, [r3, #0]
}
    1946:	f107 070c 	add.w	r7, r7, #12
    194a:	46bd      	mov	sp, r7
    194c:	bc80      	pop	{r7}
    194e:	4770      	bx	lr

00001950 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    1950:	b480      	push	{r7}
    1952:	b083      	sub	sp, #12
    1954:	af00      	add	r7, sp, #0
    1956:	4603      	mov	r3, r0
    1958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
    195a:	f241 0307 	movw	r3, #4103	; 0x1007
    195e:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1962:	79fa      	ldrb	r2, [r7, #7]
    1964:	701a      	strb	r2, [r3, #0]
}
    1966:	f107 070c 	add.w	r7, r7, #12
    196a:	46bd      	mov	sp, r7
    196c:	bc80      	pop	{r7}
    196e:	4770      	bx	lr

00001970 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  *   
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    1970:	b480      	push	{r7}
    1972:	b087      	sub	sp, #28
    1974:	af00      	add	r7, sp, #0
    1976:	4603      	mov	r3, r0
    1978:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
    197a:	f04f 0300 	mov.w	r3, #0
    197e:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
    1980:	f04f 0300 	mov.w	r3, #0
    1984:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
    1986:	f04f 0300 	mov.w	r3, #0
    198a:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
    198c:	79fb      	ldrb	r3, [r7, #7]
    198e:	ea4f 1353 	mov.w	r3, r3, lsr #5
    1992:	b2db      	uxtb	r3, r3
    1994:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
    1996:	68fb      	ldr	r3, [r7, #12]
    1998:	2b01      	cmp	r3, #1
    199a:	d106      	bne.n	19aa <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->CR;
    199c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    19a0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    19a4:	681b      	ldr	r3, [r3, #0]
    19a6:	617b      	str	r3, [r7, #20]
    19a8:	e00f      	b.n	19ca <RCC_GetFlagStatus+0x5a>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
    19aa:	68fb      	ldr	r3, [r7, #12]
    19ac:	2b02      	cmp	r3, #2
    19ae:	d106      	bne.n	19be <RCC_GetFlagStatus+0x4e>
  {
    statusreg = RCC->BDCR;
    19b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    19b4:	f2c4 0302 	movt	r3, #16386	; 0x4002
    19b8:	6a1b      	ldr	r3, [r3, #32]
    19ba:	617b      	str	r3, [r7, #20]
    19bc:	e005      	b.n	19ca <RCC_GetFlagStatus+0x5a>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
    19be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    19c2:	f2c4 0302 	movt	r3, #16386	; 0x4002
    19c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19c8:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
    19ca:	79fb      	ldrb	r3, [r7, #7]
    19cc:	f003 031f 	and.w	r3, r3, #31
    19d0:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    19d2:	68fb      	ldr	r3, [r7, #12]
    19d4:	697a      	ldr	r2, [r7, #20]
    19d6:	fa22 f303 	lsr.w	r3, r2, r3
    19da:	f003 0301 	and.w	r3, r3, #1
    19de:	b2db      	uxtb	r3, r3
    19e0:	2b00      	cmp	r3, #0
    19e2:	d003      	beq.n	19ec <RCC_GetFlagStatus+0x7c>
  {
    bitstatus = SET;
    19e4:	f04f 0301 	mov.w	r3, #1
    19e8:	74fb      	strb	r3, [r7, #19]
    19ea:	e002      	b.n	19f2 <RCC_GetFlagStatus+0x82>
  }
  else
  {
    bitstatus = RESET;
    19ec:	f04f 0300 	mov.w	r3, #0
    19f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
    19f2:	7cfb      	ldrb	r3, [r7, #19]
}
    19f4:	4618      	mov	r0, r3
    19f6:	f107 071c 	add.w	r7, r7, #28
    19fa:	46bd      	mov	sp, r7
    19fc:	bc80      	pop	{r7}
    19fe:	4770      	bx	lr

00001a00 <RCC_ClearFlag>:
  *   RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
  * @param  None
  * @retval None
  */
void RCC_ClearFlag(void)
{
    1a00:	b480      	push	{r7}
    1a02:	af00      	add	r7, sp, #0
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= CSR_RMVF_Set;
    1a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1a08:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1a0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    1a10:	f2c4 0202 	movt	r2, #16386	; 0x4002
    1a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
    1a16:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1a1a:	625a      	str	r2, [r3, #36]	; 0x24
}
    1a1c:	46bd      	mov	sp, r7
    1a1e:	bc80      	pop	{r7}
    1a20:	4770      	bx	lr
    1a22:	bf00      	nop

00001a24 <RCC_GetITStatus>:
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  *   
  * @retval The new state of RCC_IT (SET or RESET).
  */
ITStatus RCC_GetITStatus(uint8_t RCC_IT)
{
    1a24:	b480      	push	{r7}
    1a26:	b085      	sub	sp, #20
    1a28:	af00      	add	r7, sp, #0
    1a2a:	4603      	mov	r3, r0
    1a2c:	71fb      	strb	r3, [r7, #7]
  ITStatus bitstatus = RESET;
    1a2e:	f04f 0300 	mov.w	r3, #0
    1a32:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));

  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
    1a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1a38:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1a3c:	689a      	ldr	r2, [r3, #8]
    1a3e:	79fb      	ldrb	r3, [r7, #7]
    1a40:	4013      	ands	r3, r2
    1a42:	2b00      	cmp	r3, #0
    1a44:	d003      	beq.n	1a4e <RCC_GetITStatus+0x2a>
  {
    bitstatus = SET;
    1a46:	f04f 0301 	mov.w	r3, #1
    1a4a:	73fb      	strb	r3, [r7, #15]
    1a4c:	e002      	b.n	1a54 <RCC_GetITStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    1a4e:	f04f 0300 	mov.w	r3, #0
    1a52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the RCC_IT status */
  return  bitstatus;
    1a54:	7bfb      	ldrb	r3, [r7, #15]
}
    1a56:	4618      	mov	r0, r3
    1a58:	f107 0714 	add.w	r7, r7, #20
    1a5c:	46bd      	mov	sp, r7
    1a5e:	bc80      	pop	{r7}
    1a60:	4770      	bx	lr
    1a62:	bf00      	nop

00001a64 <RCC_ClearITPendingBit>:
  *   
  *     @arg RCC_IT_CSS: Clock Security System interrupt
  * @retval None
  */
void RCC_ClearITPendingBit(uint8_t RCC_IT)
{
    1a64:	b480      	push	{r7}
    1a66:	b083      	sub	sp, #12
    1a68:	af00      	add	r7, sp, #0
    1a6a:	4603      	mov	r3, r0
    1a6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));

  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE3_ADDRESS = RCC_IT;
    1a6e:	f241 030a 	movw	r3, #4106	; 0x100a
    1a72:	f2c4 0302 	movt	r3, #16386	; 0x4002
    1a76:	79fa      	ldrb	r2, [r7, #7]
    1a78:	701a      	strb	r2, [r3, #0]
}
    1a7a:	f107 070c 	add.w	r7, r7, #12
    1a7e:	46bd      	mov	sp, r7
    1a80:	bc80      	pop	{r7}
    1a82:	4770      	bx	lr

00001a84 <GPIO_DeInit>:
  * @brief  Deinitializes the GPIOx peripheral registers to their default reset values.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
    1a84:	b580      	push	{r7, lr}
    1a86:	b082      	sub	sp, #8
    1a88:	af00      	add	r7, sp, #0
    1a8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  if (GPIOx == GPIOA)
    1a8c:	687a      	ldr	r2, [r7, #4]
    1a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    1a92:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1a96:	429a      	cmp	r2, r3
    1a98:	d10c      	bne.n	1ab4 <GPIO_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    1a9a:	f04f 0004 	mov.w	r0, #4
    1a9e:	f04f 0101 	mov.w	r1, #1
    1aa2:	f7ff fee1 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    1aa6:	f04f 0004 	mov.w	r0, #4
    1aaa:	f04f 0100 	mov.w	r1, #0
    1aae:	f7ff fedb 	bl	1868 <RCC_APB2PeriphResetCmd>
    1ab2:	e076      	b.n	1ba2 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOB)
    1ab4:	687a      	ldr	r2, [r7, #4]
    1ab6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    1aba:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1abe:	429a      	cmp	r2, r3
    1ac0:	d10c      	bne.n	1adc <GPIO_DeInit+0x58>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    1ac2:	f04f 0008 	mov.w	r0, #8
    1ac6:	f04f 0101 	mov.w	r1, #1
    1aca:	f7ff fecd 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    1ace:	f04f 0008 	mov.w	r0, #8
    1ad2:	f04f 0100 	mov.w	r1, #0
    1ad6:	f7ff fec7 	bl	1868 <RCC_APB2PeriphResetCmd>
    1ada:	e062      	b.n	1ba2 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOC)
    1adc:	687a      	ldr	r2, [r7, #4]
    1ade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    1ae2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1ae6:	429a      	cmp	r2, r3
    1ae8:	d10c      	bne.n	1b04 <GPIO_DeInit+0x80>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    1aea:	f04f 0010 	mov.w	r0, #16
    1aee:	f04f 0101 	mov.w	r1, #1
    1af2:	f7ff feb9 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    1af6:	f04f 0010 	mov.w	r0, #16
    1afa:	f04f 0100 	mov.w	r1, #0
    1afe:	f7ff feb3 	bl	1868 <RCC_APB2PeriphResetCmd>
    1b02:	e04e      	b.n	1ba2 <GPIO_DeInit+0x11e>
  }
  else if (GPIOx == GPIOD)
    1b04:	687a      	ldr	r2, [r7, #4]
    1b06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    1b0a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1b0e:	429a      	cmp	r2, r3
    1b10:	d10c      	bne.n	1b2c <GPIO_DeInit+0xa8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, ENABLE);
    1b12:	f04f 0020 	mov.w	r0, #32
    1b16:	f04f 0101 	mov.w	r1, #1
    1b1a:	f7ff fea5 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOD, DISABLE);
    1b1e:	f04f 0020 	mov.w	r0, #32
    1b22:	f04f 0100 	mov.w	r1, #0
    1b26:	f7ff fe9f 	bl	1868 <RCC_APB2PeriphResetCmd>
    1b2a:	e03a      	b.n	1ba2 <GPIO_DeInit+0x11e>
  }    
  else if (GPIOx == GPIOE)
    1b2c:	687a      	ldr	r2, [r7, #4]
    1b2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    1b32:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1b36:	429a      	cmp	r2, r3
    1b38:	d10c      	bne.n	1b54 <GPIO_DeInit+0xd0>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, ENABLE);
    1b3a:	f04f 0040 	mov.w	r0, #64	; 0x40
    1b3e:	f04f 0101 	mov.w	r1, #1
    1b42:	f7ff fe91 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOE, DISABLE);
    1b46:	f04f 0040 	mov.w	r0, #64	; 0x40
    1b4a:	f04f 0100 	mov.w	r1, #0
    1b4e:	f7ff fe8b 	bl	1868 <RCC_APB2PeriphResetCmd>
    1b52:	e026      	b.n	1ba2 <GPIO_DeInit+0x11e>
  } 
  else if (GPIOx == GPIOF)
    1b54:	687a      	ldr	r2, [r7, #4]
    1b56:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    1b5a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1b5e:	429a      	cmp	r2, r3
    1b60:	d10c      	bne.n	1b7c <GPIO_DeInit+0xf8>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, ENABLE);
    1b62:	f04f 0080 	mov.w	r0, #128	; 0x80
    1b66:	f04f 0101 	mov.w	r1, #1
    1b6a:	f7ff fe7d 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOF, DISABLE);
    1b6e:	f04f 0080 	mov.w	r0, #128	; 0x80
    1b72:	f04f 0100 	mov.w	r1, #0
    1b76:	f7ff fe77 	bl	1868 <RCC_APB2PeriphResetCmd>
    1b7a:	e012      	b.n	1ba2 <GPIO_DeInit+0x11e>
  }
  else
  {
    if (GPIOx == GPIOG)
    1b7c:	687a      	ldr	r2, [r7, #4]
    1b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    1b82:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1b86:	429a      	cmp	r2, r3
    1b88:	d10b      	bne.n	1ba2 <GPIO_DeInit+0x11e>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, ENABLE);
    1b8a:	f44f 7080 	mov.w	r0, #256	; 0x100
    1b8e:	f04f 0101 	mov.w	r1, #1
    1b92:	f7ff fe69 	bl	1868 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOG, DISABLE);
    1b96:	f44f 7080 	mov.w	r0, #256	; 0x100
    1b9a:	f04f 0100 	mov.w	r1, #0
    1b9e:	f7ff fe63 	bl	1868 <RCC_APB2PeriphResetCmd>
    }
  }
}
    1ba2:	f107 0708 	add.w	r7, r7, #8
    1ba6:	46bd      	mov	sp, r7
    1ba8:	bd80      	pop	{r7, pc}
    1baa:	bf00      	nop

00001bac <GPIO_AFIODeInit>:
  *   and EXTI configuration) registers to their default reset values.
  * @param  None
  * @retval None
  */
void GPIO_AFIODeInit(void)
{
    1bac:	b580      	push	{r7, lr}
    1bae:	af00      	add	r7, sp, #0
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    1bb0:	f04f 0001 	mov.w	r0, #1
    1bb4:	f04f 0101 	mov.w	r1, #1
    1bb8:	f7ff fe56 	bl	1868 <RCC_APB2PeriphResetCmd>
  RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    1bbc:	f04f 0001 	mov.w	r0, #1
    1bc0:	f04f 0100 	mov.w	r1, #0
    1bc4:	f7ff fe50 	bl	1868 <RCC_APB2PeriphResetCmd>
}
    1bc8:	bd80      	pop	{r7, pc}
    1bca:	bf00      	nop

00001bcc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
    1bcc:	b480      	push	{r7}
    1bce:	b089      	sub	sp, #36	; 0x24
    1bd0:	af00      	add	r7, sp, #0
    1bd2:	6078      	str	r0, [r7, #4]
    1bd4:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    1bd6:	f04f 0300 	mov.w	r3, #0
    1bda:	61fb      	str	r3, [r7, #28]
    1bdc:	f04f 0300 	mov.w	r3, #0
    1be0:	613b      	str	r3, [r7, #16]
    1be2:	f04f 0300 	mov.w	r3, #0
    1be6:	61bb      	str	r3, [r7, #24]
    1be8:	f04f 0300 	mov.w	r3, #0
    1bec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
    1bee:	f04f 0300 	mov.w	r3, #0
    1bf2:	617b      	str	r3, [r7, #20]
    1bf4:	f04f 0300 	mov.w	r3, #0
    1bf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    1bfa:	683b      	ldr	r3, [r7, #0]
    1bfc:	78db      	ldrb	r3, [r3, #3]
    1bfe:	f003 030f 	and.w	r3, r3, #15
    1c02:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    1c04:	683b      	ldr	r3, [r7, #0]
    1c06:	78db      	ldrb	r3, [r3, #3]
    1c08:	f003 0310 	and.w	r3, r3, #16
    1c0c:	2b00      	cmp	r3, #0
    1c0e:	d004      	beq.n	1c1a <GPIO_Init+0x4e>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    1c10:	683b      	ldr	r3, [r7, #0]
    1c12:	789b      	ldrb	r3, [r3, #2]
    1c14:	69fa      	ldr	r2, [r7, #28]
    1c16:	4313      	orrs	r3, r2
    1c18:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
    1c1a:	683b      	ldr	r3, [r7, #0]
    1c1c:	881b      	ldrh	r3, [r3, #0]
    1c1e:	b2db      	uxtb	r3, r3
    1c20:	2b00      	cmp	r3, #0
    1c22:	d04e      	beq.n	1cc2 <GPIO_Init+0xf6>
  {
    tmpreg = GPIOx->CRL;
    1c24:	687b      	ldr	r3, [r7, #4]
    1c26:	681b      	ldr	r3, [r3, #0]
    1c28:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1c2a:	f04f 0300 	mov.w	r3, #0
    1c2e:	61bb      	str	r3, [r7, #24]
    1c30:	e041      	b.n	1cb6 <GPIO_Init+0xea>
    {
      pos = ((uint32_t)0x01) << pinpos;
    1c32:	69bb      	ldr	r3, [r7, #24]
    1c34:	f04f 0201 	mov.w	r2, #1
    1c38:	fa02 f303 	lsl.w	r3, r2, r3
    1c3c:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    1c3e:	683b      	ldr	r3, [r7, #0]
    1c40:	881b      	ldrh	r3, [r3, #0]
    1c42:	461a      	mov	r2, r3
    1c44:	68fb      	ldr	r3, [r7, #12]
    1c46:	4013      	ands	r3, r2
    1c48:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    1c4a:	693a      	ldr	r2, [r7, #16]
    1c4c:	68fb      	ldr	r3, [r7, #12]
    1c4e:	429a      	cmp	r2, r3
    1c50:	d12d      	bne.n	1cae <GPIO_Init+0xe2>
      {
        pos = pinpos << 2;
    1c52:	69bb      	ldr	r3, [r7, #24]
    1c54:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1c58:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1c5a:	68fb      	ldr	r3, [r7, #12]
    1c5c:	f04f 020f 	mov.w	r2, #15
    1c60:	fa02 f303 	lsl.w	r3, r2, r3
    1c64:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1c66:	68bb      	ldr	r3, [r7, #8]
    1c68:	ea6f 0303 	mvn.w	r3, r3
    1c6c:	697a      	ldr	r2, [r7, #20]
    1c6e:	4013      	ands	r3, r2
    1c70:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1c72:	68fb      	ldr	r3, [r7, #12]
    1c74:	69fa      	ldr	r2, [r7, #28]
    1c76:	fa02 f303 	lsl.w	r3, r2, r3
    1c7a:	697a      	ldr	r2, [r7, #20]
    1c7c:	4313      	orrs	r3, r2
    1c7e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1c80:	683b      	ldr	r3, [r7, #0]
    1c82:	78db      	ldrb	r3, [r3, #3]
    1c84:	2b28      	cmp	r3, #40	; 0x28
    1c86:	d107      	bne.n	1c98 <GPIO_Init+0xcc>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
    1c88:	69bb      	ldr	r3, [r7, #24]
    1c8a:	f04f 0201 	mov.w	r2, #1
    1c8e:	fa02 f203 	lsl.w	r2, r2, r3
    1c92:	687b      	ldr	r3, [r7, #4]
    1c94:	615a      	str	r2, [r3, #20]
    1c96:	e00a      	b.n	1cae <GPIO_Init+0xe2>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1c98:	683b      	ldr	r3, [r7, #0]
    1c9a:	78db      	ldrb	r3, [r3, #3]
    1c9c:	2b48      	cmp	r3, #72	; 0x48
    1c9e:	d106      	bne.n	1cae <GPIO_Init+0xe2>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
    1ca0:	69bb      	ldr	r3, [r7, #24]
    1ca2:	f04f 0201 	mov.w	r2, #1
    1ca6:	fa02 f203 	lsl.w	r2, r2, r3
    1caa:	687b      	ldr	r3, [r7, #4]
    1cac:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1cae:	69bb      	ldr	r3, [r7, #24]
    1cb0:	f103 0301 	add.w	r3, r3, #1
    1cb4:	61bb      	str	r3, [r7, #24]
    1cb6:	69bb      	ldr	r3, [r7, #24]
    1cb8:	2b07      	cmp	r3, #7
    1cba:	d9ba      	bls.n	1c32 <GPIO_Init+0x66>
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
    1cbc:	687b      	ldr	r3, [r7, #4]
    1cbe:	697a      	ldr	r2, [r7, #20]
    1cc0:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
    1cc2:	683b      	ldr	r3, [r7, #0]
    1cc4:	881b      	ldrh	r3, [r3, #0]
    1cc6:	2bff      	cmp	r3, #255	; 0xff
    1cc8:	d953      	bls.n	1d72 <GPIO_Init+0x1a6>
  {
    tmpreg = GPIOx->CRH;
    1cca:	687b      	ldr	r3, [r7, #4]
    1ccc:	685b      	ldr	r3, [r3, #4]
    1cce:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1cd0:	f04f 0300 	mov.w	r3, #0
    1cd4:	61bb      	str	r3, [r7, #24]
    1cd6:	e046      	b.n	1d66 <GPIO_Init+0x19a>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
    1cd8:	69bb      	ldr	r3, [r7, #24]
    1cda:	f103 0308 	add.w	r3, r3, #8
    1cde:	f04f 0201 	mov.w	r2, #1
    1ce2:	fa02 f303 	lsl.w	r3, r2, r3
    1ce6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    1ce8:	683b      	ldr	r3, [r7, #0]
    1cea:	881b      	ldrh	r3, [r3, #0]
    1cec:	461a      	mov	r2, r3
    1cee:	68fb      	ldr	r3, [r7, #12]
    1cf0:	4013      	ands	r3, r2
    1cf2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
    1cf4:	693a      	ldr	r2, [r7, #16]
    1cf6:	68fb      	ldr	r3, [r7, #12]
    1cf8:	429a      	cmp	r2, r3
    1cfa:	d130      	bne.n	1d5e <GPIO_Init+0x192>
      {
        pos = pinpos << 2;
    1cfc:	69bb      	ldr	r3, [r7, #24]
    1cfe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    1d02:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
    1d04:	68fb      	ldr	r3, [r7, #12]
    1d06:	f04f 020f 	mov.w	r2, #15
    1d0a:	fa02 f303 	lsl.w	r3, r2, r3
    1d0e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
    1d10:	68bb      	ldr	r3, [r7, #8]
    1d12:	ea6f 0303 	mvn.w	r3, r3
    1d16:	697a      	ldr	r2, [r7, #20]
    1d18:	4013      	ands	r3, r2
    1d1a:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
    1d1c:	68fb      	ldr	r3, [r7, #12]
    1d1e:	69fa      	ldr	r2, [r7, #28]
    1d20:	fa02 f303 	lsl.w	r3, r2, r3
    1d24:	697a      	ldr	r2, [r7, #20]
    1d26:	4313      	orrs	r3, r2
    1d28:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    1d2a:	683b      	ldr	r3, [r7, #0]
    1d2c:	78db      	ldrb	r3, [r3, #3]
    1d2e:	2b28      	cmp	r3, #40	; 0x28
    1d30:	d108      	bne.n	1d44 <GPIO_Init+0x178>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1d32:	69bb      	ldr	r3, [r7, #24]
    1d34:	f103 0308 	add.w	r3, r3, #8
    1d38:	f04f 0201 	mov.w	r2, #1
    1d3c:	fa02 f203 	lsl.w	r2, r2, r3
    1d40:	687b      	ldr	r3, [r7, #4]
    1d42:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    1d44:	683b      	ldr	r3, [r7, #0]
    1d46:	78db      	ldrb	r3, [r3, #3]
    1d48:	2b48      	cmp	r3, #72	; 0x48
    1d4a:	d108      	bne.n	1d5e <GPIO_Init+0x192>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
    1d4c:	69bb      	ldr	r3, [r7, #24]
    1d4e:	f103 0308 	add.w	r3, r3, #8
    1d52:	f04f 0201 	mov.w	r2, #1
    1d56:	fa02 f203 	lsl.w	r2, r2, r3
    1d5a:	687b      	ldr	r3, [r7, #4]
    1d5c:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
    1d5e:	69bb      	ldr	r3, [r7, #24]
    1d60:	f103 0301 	add.w	r3, r3, #1
    1d64:	61bb      	str	r3, [r7, #24]
    1d66:	69bb      	ldr	r3, [r7, #24]
    1d68:	2b07      	cmp	r3, #7
    1d6a:	d9b5      	bls.n	1cd8 <GPIO_Init+0x10c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
    1d6c:	687b      	ldr	r3, [r7, #4]
    1d6e:	697a      	ldr	r2, [r7, #20]
    1d70:	605a      	str	r2, [r3, #4]
  }
}
    1d72:	f107 0724 	add.w	r7, r7, #36	; 0x24
    1d76:	46bd      	mov	sp, r7
    1d78:	bc80      	pop	{r7}
    1d7a:	4770      	bx	lr

00001d7c <GPIO_StructInit>:
  * @param  GPIO_InitStruct : pointer to a GPIO_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
    1d7c:	b480      	push	{r7}
    1d7e:	b083      	sub	sp, #12
    1d80:	af00      	add	r7, sp, #0
    1d82:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
    1d84:	687b      	ldr	r3, [r7, #4]
    1d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1d8a:	801a      	strh	r2, [r3, #0]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
    1d8c:	687b      	ldr	r3, [r7, #4]
    1d8e:	f04f 0202 	mov.w	r2, #2
    1d92:	709a      	strb	r2, [r3, #2]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    1d94:	687b      	ldr	r3, [r7, #4]
    1d96:	f04f 0204 	mov.w	r2, #4
    1d9a:	70da      	strb	r2, [r3, #3]
}
    1d9c:	f107 070c 	add.w	r7, r7, #12
    1da0:	46bd      	mov	sp, r7
    1da2:	bc80      	pop	{r7}
    1da4:	4770      	bx	lr
    1da6:	bf00      	nop

00001da8 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1da8:	b480      	push	{r7}
    1daa:	b085      	sub	sp, #20
    1dac:	af00      	add	r7, sp, #0
    1dae:	6078      	str	r0, [r7, #4]
    1db0:	460b      	mov	r3, r1
    1db2:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1db4:	f04f 0300 	mov.w	r3, #0
    1db8:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1dba:	687b      	ldr	r3, [r7, #4]
    1dbc:	689a      	ldr	r2, [r3, #8]
    1dbe:	887b      	ldrh	r3, [r7, #2]
    1dc0:	4013      	ands	r3, r2
    1dc2:	2b00      	cmp	r3, #0
    1dc4:	d003      	beq.n	1dce <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    1dc6:	f04f 0301 	mov.w	r3, #1
    1dca:	73fb      	strb	r3, [r7, #15]
    1dcc:	e002      	b.n	1dd4 <GPIO_ReadInputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1dce:	f04f 0300 	mov.w	r3, #0
    1dd2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1dd4:	7bfb      	ldrb	r3, [r7, #15]
}
    1dd6:	4618      	mov	r0, r3
    1dd8:	f107 0714 	add.w	r7, r7, #20
    1ddc:	46bd      	mov	sp, r7
    1dde:	bc80      	pop	{r7}
    1de0:	4770      	bx	lr
    1de2:	bf00      	nop

00001de4 <GPIO_ReadInputData>:
  * @brief  Reads the specified GPIO input data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO input data port value.
  */
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
    1de4:	b480      	push	{r7}
    1de6:	b083      	sub	sp, #12
    1de8:	af00      	add	r7, sp, #0
    1dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  return ((uint16_t)GPIOx->IDR);
    1dec:	687b      	ldr	r3, [r7, #4]
    1dee:	689b      	ldr	r3, [r3, #8]
    1df0:	b29b      	uxth	r3, r3
}
    1df2:	4618      	mov	r0, r3
    1df4:	f107 070c 	add.w	r7, r7, #12
    1df8:	46bd      	mov	sp, r7
    1dfa:	bc80      	pop	{r7}
    1dfc:	4770      	bx	lr
    1dfe:	bf00      	nop

00001e00 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1e00:	b480      	push	{r7}
    1e02:	b085      	sub	sp, #20
    1e04:	af00      	add	r7, sp, #0
    1e06:	6078      	str	r0, [r7, #4]
    1e08:	460b      	mov	r3, r1
    1e0a:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
    1e0c:	f04f 0300 	mov.w	r3, #0
    1e10:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
    1e12:	687b      	ldr	r3, [r7, #4]
    1e14:	68da      	ldr	r2, [r3, #12]
    1e16:	887b      	ldrh	r3, [r7, #2]
    1e18:	4013      	ands	r3, r2
    1e1a:	2b00      	cmp	r3, #0
    1e1c:	d003      	beq.n	1e26 <GPIO_ReadOutputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
    1e1e:	f04f 0301 	mov.w	r3, #1
    1e22:	73fb      	strb	r3, [r7, #15]
    1e24:	e002      	b.n	1e2c <GPIO_ReadOutputDataBit+0x2c>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
    1e26:	f04f 0300 	mov.w	r3, #0
    1e2a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    1e2c:	7bfb      	ldrb	r3, [r7, #15]
}
    1e2e:	4618      	mov	r0, r3
    1e30:	f107 0714 	add.w	r7, r7, #20
    1e34:	46bd      	mov	sp, r7
    1e36:	bc80      	pop	{r7}
    1e38:	4770      	bx	lr
    1e3a:	bf00      	nop

00001e3c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
    1e3c:	b480      	push	{r7}
    1e3e:	b083      	sub	sp, #12
    1e40:	af00      	add	r7, sp, #0
    1e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
    1e44:	687b      	ldr	r3, [r7, #4]
    1e46:	68db      	ldr	r3, [r3, #12]
    1e48:	b29b      	uxth	r3, r3
}
    1e4a:	4618      	mov	r0, r3
    1e4c:	f107 070c 	add.w	r7, r7, #12
    1e50:	46bd      	mov	sp, r7
    1e52:	bc80      	pop	{r7}
    1e54:	4770      	bx	lr
    1e56:	bf00      	nop

00001e58 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1e58:	b480      	push	{r7}
    1e5a:	b083      	sub	sp, #12
    1e5c:	af00      	add	r7, sp, #0
    1e5e:	6078      	str	r0, [r7, #4]
    1e60:	460b      	mov	r3, r1
    1e62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
    1e64:	887a      	ldrh	r2, [r7, #2]
    1e66:	687b      	ldr	r3, [r7, #4]
    1e68:	611a      	str	r2, [r3, #16]
}
    1e6a:	f107 070c 	add.w	r7, r7, #12
    1e6e:	46bd      	mov	sp, r7
    1e70:	bc80      	pop	{r7}
    1e72:	4770      	bx	lr

00001e74 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1e74:	b480      	push	{r7}
    1e76:	b083      	sub	sp, #12
    1e78:	af00      	add	r7, sp, #0
    1e7a:	6078      	str	r0, [r7, #4]
    1e7c:	460b      	mov	r3, r1
    1e7e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
    1e80:	887a      	ldrh	r2, [r7, #2]
    1e82:	687b      	ldr	r3, [r7, #4]
    1e84:	615a      	str	r2, [r3, #20]
}
    1e86:	f107 070c 	add.w	r7, r7, #12
    1e8a:	46bd      	mov	sp, r7
    1e8c:	bc80      	pop	{r7}
    1e8e:	4770      	bx	lr

00001e90 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
    1e90:	b480      	push	{r7}
    1e92:	b083      	sub	sp, #12
    1e94:	af00      	add	r7, sp, #0
    1e96:	6078      	str	r0, [r7, #4]
    1e98:	4613      	mov	r3, r2
    1e9a:	460a      	mov	r2, r1
    1e9c:	807a      	strh	r2, [r7, #2]
    1e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
    1ea0:	787b      	ldrb	r3, [r7, #1]
    1ea2:	2b00      	cmp	r3, #0
    1ea4:	d003      	beq.n	1eae <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
    1ea6:	887a      	ldrh	r2, [r7, #2]
    1ea8:	687b      	ldr	r3, [r7, #4]
    1eaa:	611a      	str	r2, [r3, #16]
    1eac:	e002      	b.n	1eb4 <GPIO_WriteBit+0x24>
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
    1eae:	887a      	ldrh	r2, [r7, #2]
    1eb0:	687b      	ldr	r3, [r7, #4]
    1eb2:	615a      	str	r2, [r3, #20]
  }
}
    1eb4:	f107 070c 	add.w	r7, r7, #12
    1eb8:	46bd      	mov	sp, r7
    1eba:	bc80      	pop	{r7}
    1ebc:	4770      	bx	lr
    1ebe:	bf00      	nop

00001ec0 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
    1ec0:	b480      	push	{r7}
    1ec2:	b083      	sub	sp, #12
    1ec4:	af00      	add	r7, sp, #0
    1ec6:	6078      	str	r0, [r7, #4]
    1ec8:	460b      	mov	r3, r1
    1eca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
    1ecc:	887a      	ldrh	r2, [r7, #2]
    1ece:	687b      	ldr	r3, [r7, #4]
    1ed0:	60da      	str	r2, [r3, #12]
}
    1ed2:	f107 070c 	add.w	r7, r7, #12
    1ed6:	46bd      	mov	sp, r7
    1ed8:	bc80      	pop	{r7}
    1eda:	4770      	bx	lr

00001edc <GPIO_PinLockConfig>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
    1edc:	b480      	push	{r7}
    1ede:	b085      	sub	sp, #20
    1ee0:	af00      	add	r7, sp, #0
    1ee2:	6078      	str	r0, [r7, #4]
    1ee4:	460b      	mov	r3, r1
    1ee6:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0x00010000;
    1ee8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1eec:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  tmp |= GPIO_Pin;
    1eee:	887b      	ldrh	r3, [r7, #2]
    1ef0:	68fa      	ldr	r2, [r7, #12]
    1ef2:	4313      	orrs	r3, r2
    1ef4:	60fb      	str	r3, [r7, #12]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1ef6:	687b      	ldr	r3, [r7, #4]
    1ef8:	68fa      	ldr	r2, [r7, #12]
    1efa:	619a      	str	r2, [r3, #24]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
    1efc:	887a      	ldrh	r2, [r7, #2]
    1efe:	687b      	ldr	r3, [r7, #4]
    1f00:	619a      	str	r2, [r3, #24]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
    1f02:	687b      	ldr	r3, [r7, #4]
    1f04:	68fa      	ldr	r2, [r7, #12]
    1f06:	619a      	str	r2, [r3, #24]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1f08:	687b      	ldr	r3, [r7, #4]
    1f0a:	699b      	ldr	r3, [r3, #24]
    1f0c:	60fb      	str	r3, [r7, #12]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
    1f0e:	687b      	ldr	r3, [r7, #4]
    1f10:	699b      	ldr	r3, [r3, #24]
    1f12:	60fb      	str	r3, [r7, #12]
}
    1f14:	f107 0714 	add.w	r7, r7, #20
    1f18:	46bd      	mov	sp, r7
    1f1a:	bc80      	pop	{r7}
    1f1c:	4770      	bx	lr
    1f1e:	bf00      	nop

00001f20 <GPIO_EventOutputConfig>:
  * @param  GPIO_PinSource: specifies the pin for the Event output.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EventOutputConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    1f20:	b480      	push	{r7}
    1f22:	b085      	sub	sp, #20
    1f24:	af00      	add	r7, sp, #0
    1f26:	4602      	mov	r2, r0
    1f28:	460b      	mov	r3, r1
    1f2a:	71fa      	strb	r2, [r7, #7]
    1f2c:	71bb      	strb	r3, [r7, #6]
  uint32_t tmpreg = 0x00;
    1f2e:	f04f 0300 	mov.w	r3, #0
    1f32:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EVENTOUT_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
    
  tmpreg = AFIO->EVCR;
    1f34:	f04f 0300 	mov.w	r3, #0
    1f38:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f3c:	681b      	ldr	r3, [r3, #0]
    1f3e:	60fb      	str	r3, [r7, #12]
  /* Clear the PORT[6:4] and PIN[3:0] bits */
  tmpreg &= EVCR_PORTPINCONFIG_MASK;
    1f40:	68fa      	ldr	r2, [r7, #12]
    1f42:	f64f 7380 	movw	r3, #65408	; 0xff80
    1f46:	4013      	ands	r3, r2
    1f48:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)GPIO_PortSource << 0x04;
    1f4a:	79fb      	ldrb	r3, [r7, #7]
    1f4c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    1f50:	68fa      	ldr	r2, [r7, #12]
    1f52:	4313      	orrs	r3, r2
    1f54:	60fb      	str	r3, [r7, #12]
  tmpreg |= GPIO_PinSource;
    1f56:	79bb      	ldrb	r3, [r7, #6]
    1f58:	68fa      	ldr	r2, [r7, #12]
    1f5a:	4313      	orrs	r3, r2
    1f5c:	60fb      	str	r3, [r7, #12]
  AFIO->EVCR = tmpreg;
    1f5e:	f04f 0300 	mov.w	r3, #0
    1f62:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1f66:	68fa      	ldr	r2, [r7, #12]
    1f68:	601a      	str	r2, [r3, #0]
}
    1f6a:	f107 0714 	add.w	r7, r7, #20
    1f6e:	46bd      	mov	sp, r7
    1f70:	bc80      	pop	{r7}
    1f72:	4770      	bx	lr

00001f74 <GPIO_EventOutputCmd>:
  * @param  NewState: new state of the Event output.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_EventOutputCmd(FunctionalState NewState)
{
    1f74:	b480      	push	{r7}
    1f76:	b083      	sub	sp, #12
    1f78:	af00      	add	r7, sp, #0
    1f7a:	4603      	mov	r3, r0
    1f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) EVCR_EVOE_BB = (uint32_t)NewState;
    1f7e:	f04f 031c 	mov.w	r3, #28
    1f82:	f2c4 2320 	movt	r3, #16928	; 0x4220
    1f86:	79fa      	ldrb	r2, [r7, #7]
    1f88:	601a      	str	r2, [r3, #0]
}
    1f8a:	f107 070c 	add.w	r7, r7, #12
    1f8e:	46bd      	mov	sp, r7
    1f90:	bc80      	pop	{r7}
    1f92:	4770      	bx	lr

00001f94 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    1f94:	b480      	push	{r7}
    1f96:	b087      	sub	sp, #28
    1f98:	af00      	add	r7, sp, #0
    1f9a:	6078      	str	r0, [r7, #4]
    1f9c:	460b      	mov	r3, r1
    1f9e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    1fa0:	f04f 0300 	mov.w	r3, #0
    1fa4:	613b      	str	r3, [r7, #16]
    1fa6:	f04f 0300 	mov.w	r3, #0
    1faa:	60fb      	str	r3, [r7, #12]
    1fac:	f04f 0300 	mov.w	r3, #0
    1fb0:	617b      	str	r3, [r7, #20]
    1fb2:	f04f 0300 	mov.w	r3, #0
    1fb6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
    1fb8:	687b      	ldr	r3, [r7, #4]
    1fba:	2b00      	cmp	r3, #0
    1fbc:	da06      	bge.n	1fcc <GPIO_PinRemapConfig+0x38>
  {
    tmpreg = AFIO->MAPR2;
    1fbe:	f04f 0300 	mov.w	r3, #0
    1fc2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fc6:	69db      	ldr	r3, [r3, #28]
    1fc8:	617b      	str	r3, [r7, #20]
    1fca:	e005      	b.n	1fd8 <GPIO_PinRemapConfig+0x44>
  }
  else
  {
    tmpreg = AFIO->MAPR;
    1fcc:	f04f 0300 	mov.w	r3, #0
    1fd0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    1fd4:	685b      	ldr	r3, [r3, #4]
    1fd6:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    1fd8:	687b      	ldr	r3, [r7, #4]
    1fda:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    1fde:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1fe2:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
    1fe4:	687b      	ldr	r3, [r7, #4]
    1fe6:	ea4f 4303 	mov.w	r3, r3, lsl #16
    1fea:	ea4f 4313 	mov.w	r3, r3, lsr #16
    1fee:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
    1ff0:	687b      	ldr	r3, [r7, #4]
    1ff2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    1ff6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
    1ffa:	d110      	bne.n	201e <GPIO_PinRemapConfig+0x8a>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
    1ffc:	697b      	ldr	r3, [r7, #20]
    1ffe:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
    2002:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
    2004:	f04f 0300 	mov.w	r3, #0
    2008:	f2c4 0301 	movt	r3, #16385	; 0x4001
    200c:	f04f 0200 	mov.w	r2, #0
    2010:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2014:	6852      	ldr	r2, [r2, #4]
    2016:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
    201a:	605a      	str	r2, [r3, #4]
    201c:	e026      	b.n	206c <GPIO_PinRemapConfig+0xd8>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
    201e:	687b      	ldr	r3, [r7, #4]
    2020:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    2024:	2b00      	cmp	r3, #0
    2026:	d010      	beq.n	204a <GPIO_PinRemapConfig+0xb6>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
    2028:	68bb      	ldr	r3, [r7, #8]
    202a:	f04f 0203 	mov.w	r2, #3
    202e:	fa02 f303 	lsl.w	r3, r2, r3
    2032:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
    2034:	68fb      	ldr	r3, [r7, #12]
    2036:	ea6f 0303 	mvn.w	r3, r3
    203a:	697a      	ldr	r2, [r7, #20]
    203c:	4013      	ands	r3, r2
    203e:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    2040:	697b      	ldr	r3, [r7, #20]
    2042:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    2046:	617b      	str	r3, [r7, #20]
    2048:	e010      	b.n	206c <GPIO_PinRemapConfig+0xd8>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
    204a:	687b      	ldr	r3, [r7, #4]
    204c:	ea4f 5353 	mov.w	r3, r3, lsr #21
    2050:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2054:	693a      	ldr	r2, [r7, #16]
    2056:	fa02 f303 	lsl.w	r3, r2, r3
    205a:	ea6f 0303 	mvn.w	r3, r3
    205e:	697a      	ldr	r2, [r7, #20]
    2060:	4013      	ands	r3, r2
    2062:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
    2064:	697b      	ldr	r3, [r7, #20]
    2066:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
    206a:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
    206c:	78fb      	ldrb	r3, [r7, #3]
    206e:	2b00      	cmp	r3, #0
    2070:	d00a      	beq.n	2088 <GPIO_PinRemapConfig+0xf4>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
    2072:	687b      	ldr	r3, [r7, #4]
    2074:	ea4f 5353 	mov.w	r3, r3, lsr #21
    2078:	ea4f 1303 	mov.w	r3, r3, lsl #4
    207c:	693a      	ldr	r2, [r7, #16]
    207e:	fa02 f303 	lsl.w	r3, r2, r3
    2082:	697a      	ldr	r2, [r7, #20]
    2084:	4313      	orrs	r3, r2
    2086:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
    2088:	687b      	ldr	r3, [r7, #4]
    208a:	2b00      	cmp	r3, #0
    208c:	da06      	bge.n	209c <GPIO_PinRemapConfig+0x108>
  {
    AFIO->MAPR2 = tmpreg;
    208e:	f04f 0300 	mov.w	r3, #0
    2092:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2096:	697a      	ldr	r2, [r7, #20]
    2098:	61da      	str	r2, [r3, #28]
    209a:	e005      	b.n	20a8 <GPIO_PinRemapConfig+0x114>
  }
  else
  {
    AFIO->MAPR = tmpreg;
    209c:	f04f 0300 	mov.w	r3, #0
    20a0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20a4:	697a      	ldr	r2, [r7, #20]
    20a6:	605a      	str	r2, [r3, #4]
  }  
}
    20a8:	f107 071c 	add.w	r7, r7, #28
    20ac:	46bd      	mov	sp, r7
    20ae:	bc80      	pop	{r7}
    20b0:	4770      	bx	lr
    20b2:	bf00      	nop

000020b4 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
    20b4:	b490      	push	{r4, r7}
    20b6:	b084      	sub	sp, #16
    20b8:	af00      	add	r7, sp, #0
    20ba:	4602      	mov	r2, r0
    20bc:	460b      	mov	r3, r1
    20be:	71fa      	strb	r2, [r7, #7]
    20c0:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
    20c2:	f04f 0300 	mov.w	r3, #0
    20c6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
    20c8:	79bb      	ldrb	r3, [r7, #6]
    20ca:	f003 0303 	and.w	r3, r3, #3
    20ce:	ea4f 0383 	mov.w	r3, r3, lsl #2
    20d2:	f04f 020f 	mov.w	r2, #15
    20d6:	fa02 f303 	lsl.w	r3, r2, r3
    20da:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
    20dc:	f04f 0300 	mov.w	r3, #0
    20e0:	f2c4 0301 	movt	r3, #16385	; 0x4001
    20e4:	79ba      	ldrb	r2, [r7, #6]
    20e6:	ea4f 0292 	mov.w	r2, r2, lsr #2
    20ea:	b2d2      	uxtb	r2, r2
    20ec:	4610      	mov	r0, r2
    20ee:	f04f 0200 	mov.w	r2, #0
    20f2:	f2c4 0201 	movt	r2, #16385	; 0x4001
    20f6:	79b9      	ldrb	r1, [r7, #6]
    20f8:	ea4f 0191 	mov.w	r1, r1, lsr #2
    20fc:	b2c9      	uxtb	r1, r1
    20fe:	f101 0102 	add.w	r1, r1, #2
    2102:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    2106:	68fa      	ldr	r2, [r7, #12]
    2108:	ea6f 0202 	mvn.w	r2, r2
    210c:	4011      	ands	r1, r2
    210e:	f100 0202 	add.w	r2, r0, #2
    2112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
    2116:	f04f 0300 	mov.w	r3, #0
    211a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    211e:	79ba      	ldrb	r2, [r7, #6]
    2120:	ea4f 0292 	mov.w	r2, r2, lsr #2
    2124:	b2d2      	uxtb	r2, r2
    2126:	4610      	mov	r0, r2
    2128:	f04f 0200 	mov.w	r2, #0
    212c:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2130:	79b9      	ldrb	r1, [r7, #6]
    2132:	ea4f 0191 	mov.w	r1, r1, lsr #2
    2136:	b2c9      	uxtb	r1, r1
    2138:	f101 0102 	add.w	r1, r1, #2
    213c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    2140:	79fc      	ldrb	r4, [r7, #7]
    2142:	79ba      	ldrb	r2, [r7, #6]
    2144:	f002 0203 	and.w	r2, r2, #3
    2148:	ea4f 0282 	mov.w	r2, r2, lsl #2
    214c:	fa04 f202 	lsl.w	r2, r4, r2
    2150:	4311      	orrs	r1, r2
    2152:	f100 0202 	add.w	r2, r0, #2
    2156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
    215a:	f107 0710 	add.w	r7, r7, #16
    215e:	46bd      	mov	sp, r7
    2160:	bc90      	pop	{r4, r7}
    2162:	4770      	bx	lr

00002164 <GPIO_ETH_MediaInterfaceConfig>:
  *     @arg GPIO_ETH_MediaInterface_MII: MII mode
  *     @arg GPIO_ETH_MediaInterface_RMII: RMII mode    
  * @retval None
  */
void GPIO_ETH_MediaInterfaceConfig(uint32_t GPIO_ETH_MediaInterface) 
{ 
    2164:	b480      	push	{r7}
    2166:	b083      	sub	sp, #12
    2168:	af00      	add	r7, sp, #0
    216a:	6078      	str	r0, [r7, #4]
  assert_param(IS_GPIO_ETH_MEDIA_INTERFACE(GPIO_ETH_MediaInterface)); 

  /* Configure MII_RMII selection bit */ 
  *(__IO uint32_t *) MAPR_MII_RMII_SEL_BB = GPIO_ETH_MediaInterface; 
    216c:	f04f 03dc 	mov.w	r3, #220	; 0xdc
    2170:	f2c4 2320 	movt	r3, #16928	; 0x4220
    2174:	687a      	ldr	r2, [r7, #4]
    2176:	601a      	str	r2, [r3, #0]
}
    2178:	f107 070c 	add.w	r7, r7, #12
    217c:	46bd      	mov	sp, r7
    217e:	bc80      	pop	{r7}
    2180:	4770      	bx	lr
    2182:	bf00      	nop

00002184 <USART_DeInit>:
  *   This parameter can be one of the following values: 
  *      USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
    2184:	b580      	push	{r7, lr}
    2186:	b082      	sub	sp, #8
    2188:	af00      	add	r7, sp, #0
    218a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
    218c:	687a      	ldr	r2, [r7, #4]
    218e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    2192:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2196:	429a      	cmp	r2, r3
    2198:	d10c      	bne.n	21b4 <USART_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    219a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    219e:	f04f 0101 	mov.w	r1, #1
    21a2:	f7ff fb61 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    21a6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    21aa:	f04f 0100 	mov.w	r1, #0
    21ae:	f7ff fb5b 	bl	1868 <RCC_APB2PeriphResetCmd>
    21b2:	e04e      	b.n	2252 <USART_DeInit+0xce>
  }
  else if (USARTx == USART2)
    21b4:	687a      	ldr	r2, [r7, #4]
    21b6:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    21ba:	f2c4 0300 	movt	r3, #16384	; 0x4000
    21be:	429a      	cmp	r2, r3
    21c0:	d10c      	bne.n	21dc <USART_DeInit+0x58>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    21c2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    21c6:	f04f 0101 	mov.w	r1, #1
    21ca:	f7ff fb77 	bl	18bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    21ce:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    21d2:	f04f 0100 	mov.w	r1, #0
    21d6:	f7ff fb71 	bl	18bc <RCC_APB1PeriphResetCmd>
    21da:	e03a      	b.n	2252 <USART_DeInit+0xce>
  }
  else if (USARTx == USART3)
    21dc:	687a      	ldr	r2, [r7, #4]
    21de:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    21e2:	f2c4 0300 	movt	r3, #16384	; 0x4000
    21e6:	429a      	cmp	r2, r3
    21e8:	d10c      	bne.n	2204 <USART_DeInit+0x80>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    21ea:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    21ee:	f04f 0101 	mov.w	r1, #1
    21f2:	f7ff fb63 	bl	18bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    21f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    21fa:	f04f 0100 	mov.w	r1, #0
    21fe:	f7ff fb5d 	bl	18bc <RCC_APB1PeriphResetCmd>
    2202:	e026      	b.n	2252 <USART_DeInit+0xce>
  }    
  else if (USARTx == UART4)
    2204:	687a      	ldr	r2, [r7, #4]
    2206:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    220a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    220e:	429a      	cmp	r2, r3
    2210:	d10c      	bne.n	222c <USART_DeInit+0xa8>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, ENABLE);
    2212:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    2216:	f04f 0101 	mov.w	r1, #1
    221a:	f7ff fb4f 	bl	18bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART4, DISABLE);
    221e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    2222:	f04f 0100 	mov.w	r1, #0
    2226:	f7ff fb49 	bl	18bc <RCC_APB1PeriphResetCmd>
    222a:	e012      	b.n	2252 <USART_DeInit+0xce>
  }    
  else
  {
    if (USARTx == UART5)
    222c:	687a      	ldr	r2, [r7, #4]
    222e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    2232:	f2c4 0300 	movt	r3, #16384	; 0x4000
    2236:	429a      	cmp	r2, r3
    2238:	d10b      	bne.n	2252 <USART_DeInit+0xce>
    { 
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, ENABLE);
    223a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    223e:	f04f 0101 	mov.w	r1, #1
    2242:	f7ff fb3b 	bl	18bc <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_UART5, DISABLE);
    2246:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    224a:	f04f 0100 	mov.w	r1, #0
    224e:	f7ff fb35 	bl	18bc <RCC_APB1PeriphResetCmd>
    }
  }
}
    2252:	f107 0708 	add.w	r7, r7, #8
    2256:	46bd      	mov	sp, r7
    2258:	bd80      	pop	{r7, pc}
    225a:	bf00      	nop

0000225c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
    225c:	b580      	push	{r7, lr}
    225e:	b08c      	sub	sp, #48	; 0x30
    2260:	af00      	add	r7, sp, #0
    2262:	6078      	str	r0, [r7, #4]
    2264:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
    2266:	f04f 0300 	mov.w	r3, #0
    226a:	62fb      	str	r3, [r7, #44]	; 0x2c
    226c:	f04f 0300 	mov.w	r3, #0
    2270:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
    2272:	f04f 0300 	mov.w	r3, #0
    2276:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
    2278:	f04f 0300 	mov.w	r3, #0
    227c:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
    227e:	f04f 0300 	mov.w	r3, #0
    2282:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
    2284:	687b      	ldr	r3, [r7, #4]
    2286:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    2288:	687b      	ldr	r3, [r7, #4]
    228a:	8a1b      	ldrh	r3, [r3, #16]
    228c:	b29b      	uxth	r3, r3
    228e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
    2290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    2292:	f64c 73ff 	movw	r3, #53247	; 0xcfff
    2296:	4013      	ands	r3, r2
    2298:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    229a:	683b      	ldr	r3, [r7, #0]
    229c:	88db      	ldrh	r3, [r3, #6]
    229e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    22a0:	4313      	orrs	r3, r2
    22a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    22a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    22a6:	b29a      	uxth	r2, r3
    22a8:	687b      	ldr	r3, [r7, #4]
    22aa:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
    22ac:	687b      	ldr	r3, [r7, #4]
    22ae:	899b      	ldrh	r3, [r3, #12]
    22b0:	b29b      	uxth	r3, r3
    22b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
    22b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    22b6:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
    22ba:	4013      	ands	r3, r2
    22bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    22be:	683b      	ldr	r3, [r7, #0]
    22c0:	889a      	ldrh	r2, [r3, #4]
    22c2:	683b      	ldr	r3, [r7, #0]
    22c4:	891b      	ldrh	r3, [r3, #8]
    22c6:	4313      	orrs	r3, r2
    22c8:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
    22ca:	683b      	ldr	r3, [r7, #0]
    22cc:	895b      	ldrh	r3, [r3, #10]
  tmpreg &= CR1_CLEAR_Mask;
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    22ce:	4313      	orrs	r3, r2
    22d0:	b29b      	uxth	r3, r3
    22d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    22d4:	4313      	orrs	r3, r2
    22d6:	62fb      	str	r3, [r7, #44]	; 0x2c
            USART_InitStruct->USART_Mode;
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
    22d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    22da:	b29a      	uxth	r2, r3
    22dc:	687b      	ldr	r3, [r7, #4]
    22de:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
    22e0:	687b      	ldr	r3, [r7, #4]
    22e2:	8a9b      	ldrh	r3, [r3, #20]
    22e4:	b29b      	uxth	r3, r3
    22e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
    22e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    22ea:	f64f 43ff 	movw	r3, #64767	; 0xfcff
    22ee:	4013      	ands	r3, r2
    22f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    22f2:	683b      	ldr	r3, [r7, #0]
    22f4:	899b      	ldrh	r3, [r3, #12]
    22f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    22f8:	4313      	orrs	r3, r2
    22fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
    22fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    22fe:	b29a      	uxth	r2, r3
    2300:	687b      	ldr	r3, [r7, #4]
    2302:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
    2304:	f107 0308 	add.w	r3, r7, #8
    2308:	4618      	mov	r0, r3
    230a:	f7ff f945 	bl	1598 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
    230e:	69fa      	ldr	r2, [r7, #28]
    2310:	f44f 5360 	mov.w	r3, #14336	; 0x3800
    2314:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2318:	429a      	cmp	r2, r3
    231a:	d102      	bne.n	2322 <USART_Init+0xc6>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    231c:	697b      	ldr	r3, [r7, #20]
    231e:	62bb      	str	r3, [r7, #40]	; 0x28
    2320:	e001      	b.n	2326 <USART_Init+0xca>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    2322:	693b      	ldr	r3, [r7, #16]
    2324:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    2326:	687b      	ldr	r3, [r7, #4]
    2328:	899b      	ldrh	r3, [r3, #12]
    232a:	b29b      	uxth	r3, r3
    232c:	b29b      	uxth	r3, r3
    232e:	b21b      	sxth	r3, r3
    2330:	2b00      	cmp	r3, #0
    2332:	da0f      	bge.n	2354 <USART_Init+0xf8>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
    2334:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2336:	4613      	mov	r3, r2
    2338:	ea4f 0383 	mov.w	r3, r3, lsl #2
    233c:	189b      	adds	r3, r3, r2
    233e:	ea4f 0283 	mov.w	r2, r3, lsl #2
    2342:	189a      	adds	r2, r3, r2
    2344:	683b      	ldr	r3, [r7, #0]
    2346:	681b      	ldr	r3, [r3, #0]
    2348:	ea4f 0343 	mov.w	r3, r3, lsl #1
    234c:	fbb2 f3f3 	udiv	r3, r2, r3
    2350:	627b      	str	r3, [r7, #36]	; 0x24
    2352:	e00e      	b.n	2372 <USART_Init+0x116>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
    2354:	6aba      	ldr	r2, [r7, #40]	; 0x28
    2356:	4613      	mov	r3, r2
    2358:	ea4f 0383 	mov.w	r3, r3, lsl #2
    235c:	189b      	adds	r3, r3, r2
    235e:	ea4f 0283 	mov.w	r2, r3, lsl #2
    2362:	189a      	adds	r2, r3, r2
    2364:	683b      	ldr	r3, [r7, #0]
    2366:	681b      	ldr	r3, [r3, #0]
    2368:	ea4f 0383 	mov.w	r3, r3, lsl #2
    236c:	fbb2 f3f3 	udiv	r3, r2, r3
    2370:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
    2372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    2374:	f248 531f 	movw	r3, #34079	; 0x851f
    2378:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    237c:	fba3 1302 	umull	r1, r3, r3, r2
    2380:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2384:	ea4f 1303 	mov.w	r3, r3, lsl #4
    2388:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    238c:	ea4f 1313 	mov.w	r3, r3, lsr #4
    2390:	f04f 0264 	mov.w	r2, #100	; 0x64
    2394:	fb02 f303 	mul.w	r3, r2, r3
    2398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    239a:	1ad3      	subs	r3, r2, r3
    239c:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
    239e:	687b      	ldr	r3, [r7, #4]
    23a0:	899b      	ldrh	r3, [r3, #12]
    23a2:	b29b      	uxth	r3, r3
    23a4:	b29b      	uxth	r3, r3
    23a6:	b21b      	sxth	r3, r3
    23a8:	2b00      	cmp	r3, #0
    23aa:	da12      	bge.n	23d2 <USART_Init+0x176>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
    23ac:	6a3b      	ldr	r3, [r7, #32]
    23ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    23b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
    23b6:	f248 531f 	movw	r3, #34079	; 0x851f
    23ba:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    23be:	fba3 1302 	umull	r1, r3, r3, r2
    23c2:	ea4f 1353 	mov.w	r3, r3, lsr #5
    23c6:	f003 0307 	and.w	r3, r3, #7
    23ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    23cc:	4313      	orrs	r3, r2
    23ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    23d0:	e011      	b.n	23f6 <USART_Init+0x19a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    23d2:	6a3b      	ldr	r3, [r7, #32]
    23d4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    23d8:	f103 0232 	add.w	r2, r3, #50	; 0x32
    23dc:	f248 531f 	movw	r3, #34079	; 0x851f
    23e0:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
    23e4:	fba3 1302 	umull	r1, r3, r3, r2
    23e8:	ea4f 1353 	mov.w	r3, r3, lsr #5
    23ec:	f003 030f 	and.w	r3, r3, #15
    23f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    23f2:	4313      	orrs	r3, r2
    23f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
    23f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    23f8:	b29a      	uxth	r2, r3
    23fa:	687b      	ldr	r3, [r7, #4]
    23fc:	811a      	strh	r2, [r3, #8]
}
    23fe:	f107 0730 	add.w	r7, r7, #48	; 0x30
    2402:	46bd      	mov	sp, r7
    2404:	bd80      	pop	{r7, pc}
    2406:	bf00      	nop

00002408 <USART_StructInit>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure
  *         which will be initialized.
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
    2408:	b480      	push	{r7}
    240a:	b083      	sub	sp, #12
    240c:	af00      	add	r7, sp, #0
    240e:	6078      	str	r0, [r7, #4]
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
    2410:	687b      	ldr	r3, [r7, #4]
    2412:	f44f 5216 	mov.w	r2, #9600	; 0x2580
    2416:	601a      	str	r2, [r3, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    2418:	687b      	ldr	r3, [r7, #4]
    241a:	f04f 0200 	mov.w	r2, #0
    241e:	809a      	strh	r2, [r3, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
    2420:	687b      	ldr	r3, [r7, #4]
    2422:	f04f 0200 	mov.w	r2, #0
    2426:	80da      	strh	r2, [r3, #6]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
    2428:	687b      	ldr	r3, [r7, #4]
    242a:	f04f 0200 	mov.w	r2, #0
    242e:	811a      	strh	r2, [r3, #8]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    2430:	687b      	ldr	r3, [r7, #4]
    2432:	f04f 020c 	mov.w	r2, #12
    2436:	815a      	strh	r2, [r3, #10]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
    2438:	687b      	ldr	r3, [r7, #4]
    243a:	f04f 0200 	mov.w	r2, #0
    243e:	819a      	strh	r2, [r3, #12]
}
    2440:	f107 070c 	add.w	r7, r7, #12
    2444:	46bd      	mov	sp, r7
    2446:	bc80      	pop	{r7}
    2448:	4770      	bx	lr
    244a:	bf00      	nop

0000244c <USART_ClockInit>:
  *         USART peripheral.  
  * @note The Smart Card and Synchronous modes are not available for UART4 and UART5.
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    244c:	b480      	push	{r7}
    244e:	b085      	sub	sp, #20
    2450:	af00      	add	r7, sp, #0
    2452:	6078      	str	r0, [r7, #4]
    2454:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00;
    2456:	f04f 0300 	mov.w	r3, #0
    245a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
    245c:	687b      	ldr	r3, [r7, #4]
    245e:	8a1b      	ldrh	r3, [r3, #16]
    2460:	b29b      	uxth	r3, r3
    2462:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
    2464:	68fa      	ldr	r2, [r7, #12]
    2466:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
    246a:	4013      	ands	r3, r2
    246c:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    246e:	683b      	ldr	r3, [r7, #0]
    2470:	881a      	ldrh	r2, [r3, #0]
    2472:	683b      	ldr	r3, [r7, #0]
    2474:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    2476:	4313      	orrs	r3, r2
    2478:	b29a      	uxth	r2, r3
    247a:	683b      	ldr	r3, [r7, #0]
    247c:	889b      	ldrh	r3, [r3, #4]
    247e:	4313      	orrs	r3, r2
    2480:	b29a      	uxth	r2, r3
    2482:	683b      	ldr	r3, [r7, #0]
    2484:	88db      	ldrh	r3, [r3, #6]
    2486:	4313      	orrs	r3, r2
    2488:	b29b      	uxth	r3, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
    248a:	68fa      	ldr	r2, [r7, #12]
    248c:	4313      	orrs	r3, r2
    248e:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
    2490:	68fb      	ldr	r3, [r7, #12]
    2492:	b29a      	uxth	r2, r3
    2494:	687b      	ldr	r3, [r7, #4]
    2496:	821a      	strh	r2, [r3, #16]
}
    2498:	f107 0714 	add.w	r7, r7, #20
    249c:	46bd      	mov	sp, r7
    249e:	bc80      	pop	{r7}
    24a0:	4770      	bx	lr
    24a2:	bf00      	nop

000024a4 <USART_ClockStructInit>:
  * @param  USART_ClockInitStruct: pointer to a USART_ClockInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
    24a4:	b480      	push	{r7}
    24a6:	b083      	sub	sp, #12
    24a8:	af00      	add	r7, sp, #0
    24aa:	6078      	str	r0, [r7, #4]
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    24ac:	687b      	ldr	r3, [r7, #4]
    24ae:	f04f 0200 	mov.w	r2, #0
    24b2:	801a      	strh	r2, [r3, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    24b4:	687b      	ldr	r3, [r7, #4]
    24b6:	f04f 0200 	mov.w	r2, #0
    24ba:	805a      	strh	r2, [r3, #2]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    24bc:	687b      	ldr	r3, [r7, #4]
    24be:	f04f 0200 	mov.w	r2, #0
    24c2:	809a      	strh	r2, [r3, #4]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    24c4:	687b      	ldr	r3, [r7, #4]
    24c6:	f04f 0200 	mov.w	r2, #0
    24ca:	80da      	strh	r2, [r3, #6]
}
    24cc:	f107 070c 	add.w	r7, r7, #12
    24d0:	46bd      	mov	sp, r7
    24d2:	bc80      	pop	{r7}
    24d4:	4770      	bx	lr
    24d6:	bf00      	nop

000024d8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    24d8:	b480      	push	{r7}
    24da:	b083      	sub	sp, #12
    24dc:	af00      	add	r7, sp, #0
    24de:	6078      	str	r0, [r7, #4]
    24e0:	460b      	mov	r3, r1
    24e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    24e4:	78fb      	ldrb	r3, [r7, #3]
    24e6:	2b00      	cmp	r3, #0
    24e8:	d008      	beq.n	24fc <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
    24ea:	687b      	ldr	r3, [r7, #4]
    24ec:	899b      	ldrh	r3, [r3, #12]
    24ee:	b29b      	uxth	r3, r3
    24f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    24f4:	b29a      	uxth	r2, r3
    24f6:	687b      	ldr	r3, [r7, #4]
    24f8:	819a      	strh	r2, [r3, #12]
    24fa:	e007      	b.n	250c <USART_Cmd+0x34>
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
    24fc:	687b      	ldr	r3, [r7, #4]
    24fe:	899b      	ldrh	r3, [r3, #12]
    2500:	b29b      	uxth	r3, r3
    2502:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    2506:	b29a      	uxth	r2, r3
    2508:	687b      	ldr	r3, [r7, #4]
    250a:	819a      	strh	r2, [r3, #12]
  }
}
    250c:	f107 070c 	add.w	r7, r7, #12
    2510:	46bd      	mov	sp, r7
    2512:	bc80      	pop	{r7}
    2514:	4770      	bx	lr
    2516:	bf00      	nop

00002518 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    2518:	b480      	push	{r7}
    251a:	b087      	sub	sp, #28
    251c:	af00      	add	r7, sp, #0
    251e:	6078      	str	r0, [r7, #4]
    2520:	4613      	mov	r3, r2
    2522:	460a      	mov	r2, r1
    2524:	807a      	strh	r2, [r7, #2]
    2526:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    2528:	f04f 0300 	mov.w	r3, #0
    252c:	613b      	str	r3, [r7, #16]
    252e:	f04f 0300 	mov.w	r3, #0
    2532:	60fb      	str	r3, [r7, #12]
    2534:	f04f 0300 	mov.w	r3, #0
    2538:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
    253a:	f04f 0300 	mov.w	r3, #0
    253e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
    2540:	687b      	ldr	r3, [r7, #4]
    2542:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    2544:	887b      	ldrh	r3, [r7, #2]
    2546:	b2db      	uxtb	r3, r3
    2548:	ea4f 1353 	mov.w	r3, r3, lsr #5
    254c:	b2db      	uxtb	r3, r3
    254e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
    2550:	887b      	ldrh	r3, [r7, #2]
    2552:	f003 031f 	and.w	r3, r3, #31
    2556:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
    2558:	68fb      	ldr	r3, [r7, #12]
    255a:	f04f 0201 	mov.w	r2, #1
    255e:	fa02 f303 	lsl.w	r3, r2, r3
    2562:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
    2564:	693b      	ldr	r3, [r7, #16]
    2566:	2b01      	cmp	r3, #1
    2568:	d104      	bne.n	2574 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x0C;
    256a:	697b      	ldr	r3, [r7, #20]
    256c:	f103 030c 	add.w	r3, r3, #12
    2570:	617b      	str	r3, [r7, #20]
    2572:	e00b      	b.n	258c <USART_ITConfig+0x74>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
    2574:	693b      	ldr	r3, [r7, #16]
    2576:	2b02      	cmp	r3, #2
    2578:	d104      	bne.n	2584 <USART_ITConfig+0x6c>
  {
    usartxbase += 0x10;
    257a:	697b      	ldr	r3, [r7, #20]
    257c:	f103 0310 	add.w	r3, r3, #16
    2580:	617b      	str	r3, [r7, #20]
    2582:	e003      	b.n	258c <USART_ITConfig+0x74>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
    2584:	697b      	ldr	r3, [r7, #20]
    2586:	f103 0314 	add.w	r3, r3, #20
    258a:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
    258c:	787b      	ldrb	r3, [r7, #1]
    258e:	2b00      	cmp	r3, #0
    2590:	d006      	beq.n	25a0 <USART_ITConfig+0x88>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
    2592:	697b      	ldr	r3, [r7, #20]
    2594:	697a      	ldr	r2, [r7, #20]
    2596:	6811      	ldr	r1, [r2, #0]
    2598:	68ba      	ldr	r2, [r7, #8]
    259a:	430a      	orrs	r2, r1
    259c:	601a      	str	r2, [r3, #0]
    259e:	e007      	b.n	25b0 <USART_ITConfig+0x98>
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
    25a0:	697b      	ldr	r3, [r7, #20]
    25a2:	697a      	ldr	r2, [r7, #20]
    25a4:	6811      	ldr	r1, [r2, #0]
    25a6:	68ba      	ldr	r2, [r7, #8]
    25a8:	ea6f 0202 	mvn.w	r2, r2
    25ac:	400a      	ands	r2, r1
    25ae:	601a      	str	r2, [r3, #0]
  }
}
    25b0:	f107 071c 	add.w	r7, r7, #28
    25b4:	46bd      	mov	sp, r7
    25b6:	bc80      	pop	{r7}
    25b8:	4770      	bx	lr
    25ba:	bf00      	nop

000025bc <USART_DMACmd>:
  * @note The DMA mode is not available for UART5 except in the STM32
  *       High density value line devices(STM32F10X_HD_VL).  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    25bc:	b480      	push	{r7}
    25be:	b083      	sub	sp, #12
    25c0:	af00      	add	r7, sp, #0
    25c2:	6078      	str	r0, [r7, #4]
    25c4:	4613      	mov	r3, r2
    25c6:	460a      	mov	r2, r1
    25c8:	807a      	strh	r2, [r7, #2]
    25ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  if (NewState != DISABLE)
    25cc:	787b      	ldrb	r3, [r7, #1]
    25ce:	2b00      	cmp	r3, #0
    25d0:	d008      	beq.n	25e4 <USART_DMACmd+0x28>
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
    25d2:	687b      	ldr	r3, [r7, #4]
    25d4:	8a9b      	ldrh	r3, [r3, #20]
    25d6:	b29a      	uxth	r2, r3
    25d8:	887b      	ldrh	r3, [r7, #2]
    25da:	4313      	orrs	r3, r2
    25dc:	b29a      	uxth	r2, r3
    25de:	687b      	ldr	r3, [r7, #4]
    25e0:	829a      	strh	r2, [r3, #20]
    25e2:	e00a      	b.n	25fa <USART_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint16_t)~USART_DMAReq;
    25e4:	687b      	ldr	r3, [r7, #4]
    25e6:	8a9b      	ldrh	r3, [r3, #20]
    25e8:	b29a      	uxth	r2, r3
    25ea:	887b      	ldrh	r3, [r7, #2]
    25ec:	ea6f 0303 	mvn.w	r3, r3
    25f0:	b29b      	uxth	r3, r3
    25f2:	4013      	ands	r3, r2
    25f4:	b29a      	uxth	r2, r3
    25f6:	687b      	ldr	r3, [r7, #4]
    25f8:	829a      	strh	r2, [r3, #20]
  }
}
    25fa:	f107 070c 	add.w	r7, r7, #12
    25fe:	46bd      	mov	sp, r7
    2600:	bc80      	pop	{r7}
    2602:	4770      	bx	lr

00002604 <USART_SetAddress>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  USART_Address: Indicates the address of the USART node.
  * @retval None
  */
void USART_SetAddress(USART_TypeDef* USARTx, uint8_t USART_Address)
{
    2604:	b480      	push	{r7}
    2606:	b083      	sub	sp, #12
    2608:	af00      	add	r7, sp, #0
    260a:	6078      	str	r0, [r7, #4]
    260c:	460b      	mov	r3, r1
    260e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS(USART_Address)); 
    
  /* Clear the USART address */
  USARTx->CR2 &= CR2_Address_Mask;
    2610:	687b      	ldr	r3, [r7, #4]
    2612:	8a1b      	ldrh	r3, [r3, #16]
    2614:	b29b      	uxth	r3, r3
    2616:	f023 030f 	bic.w	r3, r3, #15
    261a:	b29a      	uxth	r2, r3
    261c:	687b      	ldr	r3, [r7, #4]
    261e:	821a      	strh	r2, [r3, #16]
  /* Set the USART address node */
  USARTx->CR2 |= USART_Address;
    2620:	687b      	ldr	r3, [r7, #4]
    2622:	8a1b      	ldrh	r3, [r3, #16]
    2624:	b29a      	uxth	r2, r3
    2626:	78fb      	ldrb	r3, [r7, #3]
    2628:	b29b      	uxth	r3, r3
    262a:	4313      	orrs	r3, r2
    262c:	b29a      	uxth	r2, r3
    262e:	687b      	ldr	r3, [r7, #4]
    2630:	821a      	strh	r2, [r3, #16]
}
    2632:	f107 070c 	add.w	r7, r7, #12
    2636:	46bd      	mov	sp, r7
    2638:	bc80      	pop	{r7}
    263a:	4770      	bx	lr

0000263c <USART_WakeUpConfig>:
  *     @arg USART_WakeUp_IdleLine: WakeUp by an idle line detection
  *     @arg USART_WakeUp_AddressMark: WakeUp by an address mark
  * @retval None
  */
void USART_WakeUpConfig(USART_TypeDef* USARTx, uint16_t USART_WakeUp)
{
    263c:	b480      	push	{r7}
    263e:	b083      	sub	sp, #12
    2640:	af00      	add	r7, sp, #0
    2642:	6078      	str	r0, [r7, #4]
    2644:	460b      	mov	r3, r1
    2646:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_WAKEUP(USART_WakeUp));
  
  USARTx->CR1 &= CR1_WAKE_Mask;
    2648:	687b      	ldr	r3, [r7, #4]
    264a:	899b      	ldrh	r3, [r3, #12]
    264c:	b29b      	uxth	r3, r3
    264e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2652:	b29a      	uxth	r2, r3
    2654:	687b      	ldr	r3, [r7, #4]
    2656:	819a      	strh	r2, [r3, #12]
  USARTx->CR1 |= USART_WakeUp;
    2658:	687b      	ldr	r3, [r7, #4]
    265a:	899b      	ldrh	r3, [r3, #12]
    265c:	b29a      	uxth	r2, r3
    265e:	887b      	ldrh	r3, [r7, #2]
    2660:	4313      	orrs	r3, r2
    2662:	b29a      	uxth	r2, r3
    2664:	687b      	ldr	r3, [r7, #4]
    2666:	819a      	strh	r2, [r3, #12]
}
    2668:	f107 070c 	add.w	r7, r7, #12
    266c:	46bd      	mov	sp, r7
    266e:	bc80      	pop	{r7}
    2670:	4770      	bx	lr
    2672:	bf00      	nop

00002674 <USART_ReceiverWakeUpCmd>:
  * @param  NewState: new state of the USART mute mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverWakeUpCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2674:	b480      	push	{r7}
    2676:	b083      	sub	sp, #12
    2678:	af00      	add	r7, sp, #0
    267a:	6078      	str	r0, [r7, #4]
    267c:	460b      	mov	r3, r1
    267e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
    2680:	78fb      	ldrb	r3, [r7, #3]
    2682:	2b00      	cmp	r3, #0
    2684:	d008      	beq.n	2698 <USART_ReceiverWakeUpCmd+0x24>
  {
    /* Enable the USART mute mode  by setting the RWU bit in the CR1 register */
    USARTx->CR1 |= CR1_RWU_Set;
    2686:	687b      	ldr	r3, [r7, #4]
    2688:	899b      	ldrh	r3, [r3, #12]
    268a:	b29b      	uxth	r3, r3
    268c:	f043 0302 	orr.w	r3, r3, #2
    2690:	b29a      	uxth	r2, r3
    2692:	687b      	ldr	r3, [r7, #4]
    2694:	819a      	strh	r2, [r3, #12]
    2696:	e007      	b.n	26a8 <USART_ReceiverWakeUpCmd+0x34>
  }
  else
  {
    /* Disable the USART mute mode by clearing the RWU bit in the CR1 register */
    USARTx->CR1 &= CR1_RWU_Reset;
    2698:	687b      	ldr	r3, [r7, #4]
    269a:	899b      	ldrh	r3, [r3, #12]
    269c:	b29b      	uxth	r3, r3
    269e:	f023 0302 	bic.w	r3, r3, #2
    26a2:	b29a      	uxth	r2, r3
    26a4:	687b      	ldr	r3, [r7, #4]
    26a6:	819a      	strh	r2, [r3, #12]
  }
}
    26a8:	f107 070c 	add.w	r7, r7, #12
    26ac:	46bd      	mov	sp, r7
    26ae:	bc80      	pop	{r7}
    26b0:	4770      	bx	lr
    26b2:	bf00      	nop

000026b4 <USART_LINBreakDetectLengthConfig>:
  *     @arg USART_LINBreakDetectLength_10b: 10-bit break detection
  *     @arg USART_LINBreakDetectLength_11b: 11-bit break detection
  * @retval None
  */
void USART_LINBreakDetectLengthConfig(USART_TypeDef* USARTx, uint16_t USART_LINBreakDetectLength)
{
    26b4:	b480      	push	{r7}
    26b6:	b083      	sub	sp, #12
    26b8:	af00      	add	r7, sp, #0
    26ba:	6078      	str	r0, [r7, #4]
    26bc:	460b      	mov	r3, r1
    26be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));
  
  USARTx->CR2 &= CR2_LBDL_Mask;
    26c0:	687b      	ldr	r3, [r7, #4]
    26c2:	8a1b      	ldrh	r3, [r3, #16]
    26c4:	b29b      	uxth	r3, r3
    26c6:	f023 0320 	bic.w	r3, r3, #32
    26ca:	b29a      	uxth	r2, r3
    26cc:	687b      	ldr	r3, [r7, #4]
    26ce:	821a      	strh	r2, [r3, #16]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
    26d0:	687b      	ldr	r3, [r7, #4]
    26d2:	8a1b      	ldrh	r3, [r3, #16]
    26d4:	b29a      	uxth	r2, r3
    26d6:	887b      	ldrh	r3, [r7, #2]
    26d8:	4313      	orrs	r3, r2
    26da:	b29a      	uxth	r2, r3
    26dc:	687b      	ldr	r3, [r7, #4]
    26de:	821a      	strh	r2, [r3, #16]
}
    26e0:	f107 070c 	add.w	r7, r7, #12
    26e4:	46bd      	mov	sp, r7
    26e6:	bc80      	pop	{r7}
    26e8:	4770      	bx	lr
    26ea:	bf00      	nop

000026ec <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    26ec:	b480      	push	{r7}
    26ee:	b083      	sub	sp, #12
    26f0:	af00      	add	r7, sp, #0
    26f2:	6078      	str	r0, [r7, #4]
    26f4:	460b      	mov	r3, r1
    26f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    26f8:	78fb      	ldrb	r3, [r7, #3]
    26fa:	2b00      	cmp	r3, #0
    26fc:	d008      	beq.n	2710 <USART_LINCmd+0x24>
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= CR2_LINEN_Set;
    26fe:	687b      	ldr	r3, [r7, #4]
    2700:	8a1b      	ldrh	r3, [r3, #16]
    2702:	b29b      	uxth	r3, r3
    2704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    2708:	b29a      	uxth	r2, r3
    270a:	687b      	ldr	r3, [r7, #4]
    270c:	821a      	strh	r2, [r3, #16]
    270e:	e007      	b.n	2720 <USART_LINCmd+0x34>
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= CR2_LINEN_Reset;
    2710:	687b      	ldr	r3, [r7, #4]
    2712:	8a1b      	ldrh	r3, [r3, #16]
    2714:	b29b      	uxth	r3, r3
    2716:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    271a:	b29a      	uxth	r2, r3
    271c:	687b      	ldr	r3, [r7, #4]
    271e:	821a      	strh	r2, [r3, #16]
  }
}
    2720:	f107 070c 	add.w	r7, r7, #12
    2724:	46bd      	mov	sp, r7
    2726:	bc80      	pop	{r7}
    2728:	4770      	bx	lr
    272a:	bf00      	nop

0000272c <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
    272c:	b480      	push	{r7}
    272e:	b083      	sub	sp, #12
    2730:	af00      	add	r7, sp, #0
    2732:	6078      	str	r0, [r7, #4]
    2734:	460b      	mov	r3, r1
    2736:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
    2738:	887b      	ldrh	r3, [r7, #2]
    273a:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    273e:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    2742:	b29a      	uxth	r2, r3
    2744:	687b      	ldr	r3, [r7, #4]
    2746:	809a      	strh	r2, [r3, #4]
}
    2748:	f107 070c 	add.w	r7, r7, #12
    274c:	46bd      	mov	sp, r7
    274e:	bc80      	pop	{r7}
    2750:	4770      	bx	lr
    2752:	bf00      	nop

00002754 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
    2754:	b480      	push	{r7}
    2756:	b083      	sub	sp, #12
    2758:	af00      	add	r7, sp, #0
    275a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
    275c:	687b      	ldr	r3, [r7, #4]
    275e:	889b      	ldrh	r3, [r3, #4]
    2760:	b29b      	uxth	r3, r3
    2762:	ea4f 53c3 	mov.w	r3, r3, lsl #23
    2766:	ea4f 53d3 	mov.w	r3, r3, lsr #23
    276a:	b29b      	uxth	r3, r3
}
    276c:	4618      	mov	r0, r3
    276e:	f107 070c 	add.w	r7, r7, #12
    2772:	46bd      	mov	sp, r7
    2774:	bc80      	pop	{r7}
    2776:	4770      	bx	lr

00002778 <USART_SendBreak>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void USART_SendBreak(USART_TypeDef* USARTx)
{
    2778:	b480      	push	{r7}
    277a:	b083      	sub	sp, #12
    277c:	af00      	add	r7, sp, #0
    277e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Send break characters */
  USARTx->CR1 |= CR1_SBK_Set;
    2780:	687b      	ldr	r3, [r7, #4]
    2782:	899b      	ldrh	r3, [r3, #12]
    2784:	b29b      	uxth	r3, r3
    2786:	f043 0301 	orr.w	r3, r3, #1
    278a:	b29a      	uxth	r2, r3
    278c:	687b      	ldr	r3, [r7, #4]
    278e:	819a      	strh	r2, [r3, #12]
}
    2790:	f107 070c 	add.w	r7, r7, #12
    2794:	46bd      	mov	sp, r7
    2796:	bc80      	pop	{r7}
    2798:	4770      	bx	lr
    279a:	bf00      	nop

0000279c <USART_SetGuardTime>:
  * @param  USART_GuardTime: specifies the guard time.
  * @note The guard time bits are not available for UART4 and UART5.   
  * @retval None
  */
void USART_SetGuardTime(USART_TypeDef* USARTx, uint8_t USART_GuardTime)
{    
    279c:	b480      	push	{r7}
    279e:	b083      	sub	sp, #12
    27a0:	af00      	add	r7, sp, #0
    27a2:	6078      	str	r0, [r7, #4]
    27a4:	460b      	mov	r3, r1
    27a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  
  /* Clear the USART Guard time */
  USARTx->GTPR &= GTPR_LSB_Mask;
    27a8:	687b      	ldr	r3, [r7, #4]
    27aa:	8b1b      	ldrh	r3, [r3, #24]
    27ac:	b29b      	uxth	r3, r3
    27ae:	b2db      	uxtb	r3, r3
    27b0:	b29a      	uxth	r2, r3
    27b2:	687b      	ldr	r3, [r7, #4]
    27b4:	831a      	strh	r2, [r3, #24]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    27b6:	687b      	ldr	r3, [r7, #4]
    27b8:	8b1b      	ldrh	r3, [r3, #24]
    27ba:	b29a      	uxth	r2, r3
    27bc:	78fb      	ldrb	r3, [r7, #3]
    27be:	b29b      	uxth	r3, r3
    27c0:	ea4f 2303 	mov.w	r3, r3, lsl #8
    27c4:	b29b      	uxth	r3, r3
    27c6:	4313      	orrs	r3, r2
    27c8:	b29a      	uxth	r2, r3
    27ca:	687b      	ldr	r3, [r7, #4]
    27cc:	831a      	strh	r2, [r3, #24]
}
    27ce:	f107 070c 	add.w	r7, r7, #12
    27d2:	46bd      	mov	sp, r7
    27d4:	bc80      	pop	{r7}
    27d6:	4770      	bx	lr

000027d8 <USART_SetPrescaler>:
  * @param  USART_Prescaler: specifies the prescaler clock.  
  * @note   The function is used for IrDA mode with UART4 and UART5.
  * @retval None
  */
void USART_SetPrescaler(USART_TypeDef* USARTx, uint8_t USART_Prescaler)
{ 
    27d8:	b480      	push	{r7}
    27da:	b083      	sub	sp, #12
    27dc:	af00      	add	r7, sp, #0
    27de:	6078      	str	r0, [r7, #4]
    27e0:	460b      	mov	r3, r1
    27e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= GTPR_MSB_Mask;
    27e4:	687b      	ldr	r3, [r7, #4]
    27e6:	8b1b      	ldrh	r3, [r3, #24]
    27e8:	b29b      	uxth	r3, r3
    27ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    27ee:	b29a      	uxth	r2, r3
    27f0:	687b      	ldr	r3, [r7, #4]
    27f2:	831a      	strh	r2, [r3, #24]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
    27f4:	687b      	ldr	r3, [r7, #4]
    27f6:	8b1b      	ldrh	r3, [r3, #24]
    27f8:	b29a      	uxth	r2, r3
    27fa:	78fb      	ldrb	r3, [r7, #3]
    27fc:	b29b      	uxth	r3, r3
    27fe:	4313      	orrs	r3, r2
    2800:	b29a      	uxth	r2, r3
    2802:	687b      	ldr	r3, [r7, #4]
    2804:	831a      	strh	r2, [r3, #24]
}
    2806:	f107 070c 	add.w	r7, r7, #12
    280a:	46bd      	mov	sp, r7
    280c:	bc80      	pop	{r7}
    280e:	4770      	bx	lr

00002810 <USART_SmartCardCmd>:
  *   This parameter can be: ENABLE or DISABLE.     
  * @note The Smart Card mode is not available for UART4 and UART5. 
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2810:	b480      	push	{r7}
    2812:	b083      	sub	sp, #12
    2814:	af00      	add	r7, sp, #0
    2816:	6078      	str	r0, [r7, #4]
    2818:	460b      	mov	r3, r1
    281a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    281c:	78fb      	ldrb	r3, [r7, #3]
    281e:	2b00      	cmp	r3, #0
    2820:	d008      	beq.n	2834 <USART_SmartCardCmd+0x24>
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= CR3_SCEN_Set;
    2822:	687b      	ldr	r3, [r7, #4]
    2824:	8a9b      	ldrh	r3, [r3, #20]
    2826:	b29b      	uxth	r3, r3
    2828:	f043 0320 	orr.w	r3, r3, #32
    282c:	b29a      	uxth	r2, r3
    282e:	687b      	ldr	r3, [r7, #4]
    2830:	829a      	strh	r2, [r3, #20]
    2832:	e007      	b.n	2844 <USART_SmartCardCmd+0x34>
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= CR3_SCEN_Reset;
    2834:	687b      	ldr	r3, [r7, #4]
    2836:	8a9b      	ldrh	r3, [r3, #20]
    2838:	b29b      	uxth	r3, r3
    283a:	f023 0320 	bic.w	r3, r3, #32
    283e:	b29a      	uxth	r2, r3
    2840:	687b      	ldr	r3, [r7, #4]
    2842:	829a      	strh	r2, [r3, #20]
  }
}
    2844:	f107 070c 	add.w	r7, r7, #12
    2848:	46bd      	mov	sp, r7
    284a:	bc80      	pop	{r7}
    284c:	4770      	bx	lr
    284e:	bf00      	nop

00002850 <USART_SmartCardNACKCmd>:
  *   This parameter can be: ENABLE or DISABLE.  
  * @note The Smart Card mode is not available for UART4 and UART5.
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2850:	b480      	push	{r7}
    2852:	b083      	sub	sp, #12
    2854:	af00      	add	r7, sp, #0
    2856:	6078      	str	r0, [r7, #4]
    2858:	460b      	mov	r3, r1
    285a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_123_PERIPH(USARTx));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    285c:	78fb      	ldrb	r3, [r7, #3]
    285e:	2b00      	cmp	r3, #0
    2860:	d008      	beq.n	2874 <USART_SmartCardNACKCmd+0x24>
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= CR3_NACK_Set;
    2862:	687b      	ldr	r3, [r7, #4]
    2864:	8a9b      	ldrh	r3, [r3, #20]
    2866:	b29b      	uxth	r3, r3
    2868:	f043 0310 	orr.w	r3, r3, #16
    286c:	b29a      	uxth	r2, r3
    286e:	687b      	ldr	r3, [r7, #4]
    2870:	829a      	strh	r2, [r3, #20]
    2872:	e007      	b.n	2884 <USART_SmartCardNACKCmd+0x34>
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= CR3_NACK_Reset;
    2874:	687b      	ldr	r3, [r7, #4]
    2876:	8a9b      	ldrh	r3, [r3, #20]
    2878:	b29b      	uxth	r3, r3
    287a:	f023 0310 	bic.w	r3, r3, #16
    287e:	b29a      	uxth	r2, r3
    2880:	687b      	ldr	r3, [r7, #4]
    2882:	829a      	strh	r2, [r3, #20]
  }
}
    2884:	f107 070c 	add.w	r7, r7, #12
    2888:	46bd      	mov	sp, r7
    288a:	bc80      	pop	{r7}
    288c:	4770      	bx	lr
    288e:	bf00      	nop

00002890 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2890:	b480      	push	{r7}
    2892:	b083      	sub	sp, #12
    2894:	af00      	add	r7, sp, #0
    2896:	6078      	str	r0, [r7, #4]
    2898:	460b      	mov	r3, r1
    289a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    289c:	78fb      	ldrb	r3, [r7, #3]
    289e:	2b00      	cmp	r3, #0
    28a0:	d008      	beq.n	28b4 <USART_HalfDuplexCmd+0x24>
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= CR3_HDSEL_Set;
    28a2:	687b      	ldr	r3, [r7, #4]
    28a4:	8a9b      	ldrh	r3, [r3, #20]
    28a6:	b29b      	uxth	r3, r3
    28a8:	f043 0308 	orr.w	r3, r3, #8
    28ac:	b29a      	uxth	r2, r3
    28ae:	687b      	ldr	r3, [r7, #4]
    28b0:	829a      	strh	r2, [r3, #20]
    28b2:	e007      	b.n	28c4 <USART_HalfDuplexCmd+0x34>
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= CR3_HDSEL_Reset;
    28b4:	687b      	ldr	r3, [r7, #4]
    28b6:	8a9b      	ldrh	r3, [r3, #20]
    28b8:	b29b      	uxth	r3, r3
    28ba:	f023 0308 	bic.w	r3, r3, #8
    28be:	b29a      	uxth	r2, r3
    28c0:	687b      	ldr	r3, [r7, #4]
    28c2:	829a      	strh	r2, [r3, #20]
  }
}
    28c4:	f107 070c 	add.w	r7, r7, #12
    28c8:	46bd      	mov	sp, r7
    28ca:	bc80      	pop	{r7}
    28cc:	4770      	bx	lr
    28ce:	bf00      	nop

000028d0 <USART_OverSampling8Cmd>:
  *     This function has to be called before calling USART_Init()
  *     function in order to have correct baudrate Divider value.   
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    28d0:	b480      	push	{r7}
    28d2:	b083      	sub	sp, #12
    28d4:	af00      	add	r7, sp, #0
    28d6:	6078      	str	r0, [r7, #4]
    28d8:	460b      	mov	r3, r1
    28da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    28dc:	78fb      	ldrb	r3, [r7, #3]
    28de:	2b00      	cmp	r3, #0
    28e0:	d00a      	beq.n	28f8 <USART_OverSampling8Cmd+0x28>
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= CR1_OVER8_Set;
    28e2:	687b      	ldr	r3, [r7, #4]
    28e4:	899b      	ldrh	r3, [r3, #12]
    28e6:	b29b      	uxth	r3, r3
    28e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    28ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    28f0:	b29a      	uxth	r2, r3
    28f2:	687b      	ldr	r3, [r7, #4]
    28f4:	819a      	strh	r2, [r3, #12]
    28f6:	e009      	b.n	290c <USART_OverSampling8Cmd+0x3c>
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= CR1_OVER8_Reset;
    28f8:	687b      	ldr	r3, [r7, #4]
    28fa:	899b      	ldrh	r3, [r3, #12]
    28fc:	b29b      	uxth	r3, r3
    28fe:	ea4f 4343 	mov.w	r3, r3, lsl #17
    2902:	ea4f 4353 	mov.w	r3, r3, lsr #17
    2906:	b29a      	uxth	r2, r3
    2908:	687b      	ldr	r3, [r7, #4]
    290a:	819a      	strh	r2, [r3, #12]
  }
}
    290c:	f107 070c 	add.w	r7, r7, #12
    2910:	46bd      	mov	sp, r7
    2912:	bc80      	pop	{r7}
    2914:	4770      	bx	lr
    2916:	bf00      	nop

00002918 <USART_OneBitMethodCmd>:
  * @param  NewState: new state of the USART one bit sampling method.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2918:	b480      	push	{r7}
    291a:	b083      	sub	sp, #12
    291c:	af00      	add	r7, sp, #0
    291e:	6078      	str	r0, [r7, #4]
    2920:	460b      	mov	r3, r1
    2922:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    2924:	78fb      	ldrb	r3, [r7, #3]
    2926:	2b00      	cmp	r3, #0
    2928:	d008      	beq.n	293c <USART_OneBitMethodCmd+0x24>
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= CR3_ONEBITE_Set;
    292a:	687b      	ldr	r3, [r7, #4]
    292c:	8a9b      	ldrh	r3, [r3, #20]
    292e:	b29b      	uxth	r3, r3
    2930:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    2934:	b29a      	uxth	r2, r3
    2936:	687b      	ldr	r3, [r7, #4]
    2938:	829a      	strh	r2, [r3, #20]
    293a:	e007      	b.n	294c <USART_OneBitMethodCmd+0x34>
  }
  else
  {
    /* Disable tthe one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= CR3_ONEBITE_Reset;
    293c:	687b      	ldr	r3, [r7, #4]
    293e:	8a9b      	ldrh	r3, [r3, #20]
    2940:	b29b      	uxth	r3, r3
    2942:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    2946:	b29a      	uxth	r2, r3
    2948:	687b      	ldr	r3, [r7, #4]
    294a:	829a      	strh	r2, [r3, #20]
  }
}
    294c:	f107 070c 	add.w	r7, r7, #12
    2950:	46bd      	mov	sp, r7
    2952:	bc80      	pop	{r7}
    2954:	4770      	bx	lr
    2956:	bf00      	nop

00002958 <USART_IrDAConfig>:
  *     @arg USART_IrDAMode_LowPower
  *     @arg USART_IrDAMode_Normal
  * @retval None
  */
void USART_IrDAConfig(USART_TypeDef* USARTx, uint16_t USART_IrDAMode)
{
    2958:	b480      	push	{r7}
    295a:	b083      	sub	sp, #12
    295c:	af00      	add	r7, sp, #0
    295e:	6078      	str	r0, [r7, #4]
    2960:	460b      	mov	r3, r1
    2962:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));
    
  USARTx->CR3 &= CR3_IRLP_Mask;
    2964:	687b      	ldr	r3, [r7, #4]
    2966:	8a9b      	ldrh	r3, [r3, #20]
    2968:	b29b      	uxth	r3, r3
    296a:	f023 0304 	bic.w	r3, r3, #4
    296e:	b29a      	uxth	r2, r3
    2970:	687b      	ldr	r3, [r7, #4]
    2972:	829a      	strh	r2, [r3, #20]
  USARTx->CR3 |= USART_IrDAMode;
    2974:	687b      	ldr	r3, [r7, #4]
    2976:	8a9b      	ldrh	r3, [r3, #20]
    2978:	b29a      	uxth	r2, r3
    297a:	887b      	ldrh	r3, [r7, #2]
    297c:	4313      	orrs	r3, r2
    297e:	b29a      	uxth	r2, r3
    2980:	687b      	ldr	r3, [r7, #4]
    2982:	829a      	strh	r2, [r3, #20]
}
    2984:	f107 070c 	add.w	r7, r7, #12
    2988:	46bd      	mov	sp, r7
    298a:	bc80      	pop	{r7}
    298c:	4770      	bx	lr
    298e:	bf00      	nop

00002990 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
    2990:	b480      	push	{r7}
    2992:	b083      	sub	sp, #12
    2994:	af00      	add	r7, sp, #0
    2996:	6078      	str	r0, [r7, #4]
    2998:	460b      	mov	r3, r1
    299a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
    
  if (NewState != DISABLE)
    299c:	78fb      	ldrb	r3, [r7, #3]
    299e:	2b00      	cmp	r3, #0
    29a0:	d008      	beq.n	29b4 <USART_IrDACmd+0x24>
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= CR3_IREN_Set;
    29a2:	687b      	ldr	r3, [r7, #4]
    29a4:	8a9b      	ldrh	r3, [r3, #20]
    29a6:	b29b      	uxth	r3, r3
    29a8:	f043 0302 	orr.w	r3, r3, #2
    29ac:	b29a      	uxth	r2, r3
    29ae:	687b      	ldr	r3, [r7, #4]
    29b0:	829a      	strh	r2, [r3, #20]
    29b2:	e007      	b.n	29c4 <USART_IrDACmd+0x34>
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= CR3_IREN_Reset;
    29b4:	687b      	ldr	r3, [r7, #4]
    29b6:	8a9b      	ldrh	r3, [r3, #20]
    29b8:	b29b      	uxth	r3, r3
    29ba:	f023 0302 	bic.w	r3, r3, #2
    29be:	b29a      	uxth	r2, r3
    29c0:	687b      	ldr	r3, [r7, #4]
    29c2:	829a      	strh	r2, [r3, #20]
  }
}
    29c4:	f107 070c 	add.w	r7, r7, #12
    29c8:	46bd      	mov	sp, r7
    29ca:	bc80      	pop	{r7}
    29cc:	4770      	bx	lr
    29ce:	bf00      	nop

000029d0 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    29d0:	b480      	push	{r7}
    29d2:	b085      	sub	sp, #20
    29d4:	af00      	add	r7, sp, #0
    29d6:	6078      	str	r0, [r7, #4]
    29d8:	460b      	mov	r3, r1
    29da:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
    29dc:	f04f 0300 	mov.w	r3, #0
    29e0:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
    29e2:	687b      	ldr	r3, [r7, #4]
    29e4:	881b      	ldrh	r3, [r3, #0]
    29e6:	b29a      	uxth	r2, r3
    29e8:	887b      	ldrh	r3, [r7, #2]
    29ea:	4013      	ands	r3, r2
    29ec:	b29b      	uxth	r3, r3
    29ee:	2b00      	cmp	r3, #0
    29f0:	d003      	beq.n	29fa <USART_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
    29f2:	f04f 0301 	mov.w	r3, #1
    29f6:	73fb      	strb	r3, [r7, #15]
    29f8:	e002      	b.n	2a00 <USART_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    29fa:	f04f 0300 	mov.w	r3, #0
    29fe:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2a00:	7bfb      	ldrb	r3, [r7, #15]
}
    2a02:	4618      	mov	r0, r3
    2a04:	f107 0714 	add.w	r7, r7, #20
    2a08:	46bd      	mov	sp, r7
    2a0a:	bc80      	pop	{r7}
    2a0c:	4770      	bx	lr
    2a0e:	bf00      	nop

00002a10 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
    2a10:	b480      	push	{r7}
    2a12:	b083      	sub	sp, #12
    2a14:	af00      	add	r7, sp, #0
    2a16:	6078      	str	r0, [r7, #4]
    2a18:	460b      	mov	r3, r1
    2a1a:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
    2a1c:	887b      	ldrh	r3, [r7, #2]
    2a1e:	ea6f 0303 	mvn.w	r3, r3
    2a22:	b29a      	uxth	r2, r3
    2a24:	687b      	ldr	r3, [r7, #4]
    2a26:	801a      	strh	r2, [r3, #0]
}
    2a28:	f107 070c 	add.w	r7, r7, #12
    2a2c:	46bd      	mov	sp, r7
    2a2e:	bc80      	pop	{r7}
    2a30:	4770      	bx	lr
    2a32:	bf00      	nop

00002a34 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    2a34:	b480      	push	{r7}
    2a36:	b087      	sub	sp, #28
    2a38:	af00      	add	r7, sp, #0
    2a3a:	6078      	str	r0, [r7, #4]
    2a3c:	460b      	mov	r3, r1
    2a3e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    2a40:	f04f 0300 	mov.w	r3, #0
    2a44:	60fb      	str	r3, [r7, #12]
    2a46:	f04f 0300 	mov.w	r3, #0
    2a4a:	617b      	str	r3, [r7, #20]
    2a4c:	f04f 0300 	mov.w	r3, #0
    2a50:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
    2a52:	f04f 0300 	mov.w	r3, #0
    2a56:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
    2a58:	887b      	ldrh	r3, [r7, #2]
    2a5a:	b2db      	uxtb	r3, r3
    2a5c:	ea4f 1353 	mov.w	r3, r3, lsr #5
    2a60:	b2db      	uxtb	r3, r3
    2a62:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
    2a64:	887b      	ldrh	r3, [r7, #2]
    2a66:	f003 031f 	and.w	r3, r3, #31
    2a6a:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
    2a6c:	697b      	ldr	r3, [r7, #20]
    2a6e:	f04f 0201 	mov.w	r2, #1
    2a72:	fa02 f303 	lsl.w	r3, r2, r3
    2a76:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
    2a78:	68bb      	ldr	r3, [r7, #8]
    2a7a:	2b01      	cmp	r3, #1
    2a7c:	d106      	bne.n	2a8c <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR1;
    2a7e:	687b      	ldr	r3, [r7, #4]
    2a80:	899b      	ldrh	r3, [r3, #12]
    2a82:	b29b      	uxth	r3, r3
    2a84:	697a      	ldr	r2, [r7, #20]
    2a86:	4013      	ands	r3, r2
    2a88:	617b      	str	r3, [r7, #20]
    2a8a:	e00f      	b.n	2aac <USART_GetITStatus+0x78>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
    2a8c:	68bb      	ldr	r3, [r7, #8]
    2a8e:	2b02      	cmp	r3, #2
    2a90:	d106      	bne.n	2aa0 <USART_GetITStatus+0x6c>
  {
    itmask &= USARTx->CR2;
    2a92:	687b      	ldr	r3, [r7, #4]
    2a94:	8a1b      	ldrh	r3, [r3, #16]
    2a96:	b29b      	uxth	r3, r3
    2a98:	697a      	ldr	r2, [r7, #20]
    2a9a:	4013      	ands	r3, r2
    2a9c:	617b      	str	r3, [r7, #20]
    2a9e:	e005      	b.n	2aac <USART_GetITStatus+0x78>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
    2aa0:	687b      	ldr	r3, [r7, #4]
    2aa2:	8a9b      	ldrh	r3, [r3, #20]
    2aa4:	b29b      	uxth	r3, r3
    2aa6:	697a      	ldr	r2, [r7, #20]
    2aa8:	4013      	ands	r3, r2
    2aaa:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
    2aac:	887b      	ldrh	r3, [r7, #2]
    2aae:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2ab2:	b29b      	uxth	r3, r3
    2ab4:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
    2ab6:	68fb      	ldr	r3, [r7, #12]
    2ab8:	f04f 0201 	mov.w	r2, #1
    2abc:	fa02 f303 	lsl.w	r3, r2, r3
    2ac0:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
    2ac2:	687b      	ldr	r3, [r7, #4]
    2ac4:	881b      	ldrh	r3, [r3, #0]
    2ac6:	b29b      	uxth	r3, r3
    2ac8:	68fa      	ldr	r2, [r7, #12]
    2aca:	4013      	ands	r3, r2
    2acc:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
    2ace:	697b      	ldr	r3, [r7, #20]
    2ad0:	2b00      	cmp	r3, #0
    2ad2:	d006      	beq.n	2ae2 <USART_GetITStatus+0xae>
    2ad4:	68fb      	ldr	r3, [r7, #12]
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	d003      	beq.n	2ae2 <USART_GetITStatus+0xae>
  {
    bitstatus = SET;
    2ada:	f04f 0301 	mov.w	r3, #1
    2ade:	74fb      	strb	r3, [r7, #19]
    2ae0:	e002      	b.n	2ae8 <USART_GetITStatus+0xb4>
  }
  else
  {
    bitstatus = RESET;
    2ae2:	f04f 0300 	mov.w	r3, #0
    2ae6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
    2ae8:	7cfb      	ldrb	r3, [r7, #19]
}
    2aea:	4618      	mov	r0, r3
    2aec:	f107 071c 	add.w	r7, r7, #28
    2af0:	46bd      	mov	sp, r7
    2af2:	bc80      	pop	{r7}
    2af4:	4770      	bx	lr
    2af6:	bf00      	nop

00002af8 <USART_ClearITPendingBit>:
  *   - TXE pending bit is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
    2af8:	b480      	push	{r7}
    2afa:	b085      	sub	sp, #20
    2afc:	af00      	add	r7, sp, #0
    2afe:	6078      	str	r0, [r7, #4]
    2b00:	460b      	mov	r3, r1
    2b02:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
    2b04:	f04f 0300 	mov.w	r3, #0
    2b08:	81fb      	strh	r3, [r7, #14]
    2b0a:	f04f 0300 	mov.w	r3, #0
    2b0e:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  bitpos = USART_IT >> 0x08;
    2b10:	887b      	ldrh	r3, [r7, #2]
    2b12:	ea4f 2313 	mov.w	r3, r3, lsr #8
    2b16:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    2b18:	89fb      	ldrh	r3, [r7, #14]
    2b1a:	f04f 0201 	mov.w	r2, #1
    2b1e:	fa02 f303 	lsl.w	r3, r2, r3
    2b22:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
    2b24:	89bb      	ldrh	r3, [r7, #12]
    2b26:	ea6f 0303 	mvn.w	r3, r3
    2b2a:	b29a      	uxth	r2, r3
    2b2c:	687b      	ldr	r3, [r7, #4]
    2b2e:	801a      	strh	r2, [r3, #0]
}
    2b30:	f107 0714 	add.w	r7, r7, #20
    2b34:	46bd      	mov	sp, r7
    2b36:	bc80      	pop	{r7}
    2b38:	4770      	bx	lr
    2b3a:	bf00      	nop

00002b3c <EXTI_DeInit>:
  * @brief  Deinitializes the EXTI peripheral registers to their default reset values.
  * @param  None
  * @retval None
  */
void EXTI_DeInit(void)
{
    2b3c:	b480      	push	{r7}
    2b3e:	af00      	add	r7, sp, #0
  EXTI->IMR = 0x00000000;
    2b40:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2b44:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2b48:	f04f 0200 	mov.w	r2, #0
    2b4c:	601a      	str	r2, [r3, #0]
  EXTI->EMR = 0x00000000;
    2b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2b52:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2b56:	f04f 0200 	mov.w	r2, #0
    2b5a:	605a      	str	r2, [r3, #4]
  EXTI->RTSR = 0x00000000; 
    2b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2b60:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2b64:	f04f 0200 	mov.w	r2, #0
    2b68:	609a      	str	r2, [r3, #8]
  EXTI->FTSR = 0x00000000; 
    2b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2b6e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2b72:	f04f 0200 	mov.w	r2, #0
    2b76:	60da      	str	r2, [r3, #12]
  EXTI->PR = 0x000FFFFF;
    2b78:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2b7c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
    2b84:	f2c0 020f 	movt	r2, #15
    2b88:	615a      	str	r2, [r3, #20]
}
    2b8a:	46bd      	mov	sp, r7
    2b8c:	bc80      	pop	{r7}
    2b8e:	4770      	bx	lr

00002b90 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2b90:	b480      	push	{r7}
    2b92:	b085      	sub	sp, #20
    2b94:	af00      	add	r7, sp, #0
    2b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
    2b98:	f04f 0300 	mov.w	r3, #0
    2b9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
    2b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2ba2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2ba6:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    2ba8:	687b      	ldr	r3, [r7, #4]
    2baa:	799b      	ldrb	r3, [r3, #6]
    2bac:	2b00      	cmp	r3, #0
    2bae:	d078      	beq.n	2ca2 <EXTI_Init+0x112>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
    2bb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2bb4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2bb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2bbc:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2bc0:	6811      	ldr	r1, [r2, #0]
    2bc2:	687a      	ldr	r2, [r7, #4]
    2bc4:	6812      	ldr	r2, [r2, #0]
    2bc6:	ea6f 0202 	mvn.w	r2, r2
    2bca:	400a      	ands	r2, r1
    2bcc:	601a      	str	r2, [r3, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
    2bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2bd2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2bda:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2bde:	6851      	ldr	r1, [r2, #4]
    2be0:	687a      	ldr	r2, [r7, #4]
    2be2:	6812      	ldr	r2, [r2, #0]
    2be4:	ea6f 0202 	mvn.w	r2, r2
    2be8:	400a      	ands	r2, r1
    2bea:	605a      	str	r2, [r3, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
    2bec:	687b      	ldr	r3, [r7, #4]
    2bee:	791b      	ldrb	r3, [r3, #4]
    2bf0:	68fa      	ldr	r2, [r7, #12]
    2bf2:	18d3      	adds	r3, r2, r3
    2bf4:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    2bf6:	68fb      	ldr	r3, [r7, #12]
    2bf8:	68fa      	ldr	r2, [r7, #12]
    2bfa:	6811      	ldr	r1, [r2, #0]
    2bfc:	687a      	ldr	r2, [r7, #4]
    2bfe:	6812      	ldr	r2, [r2, #0]
    2c00:	430a      	orrs	r2, r1
    2c02:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
    2c04:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2c08:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2c10:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2c14:	6891      	ldr	r1, [r2, #8]
    2c16:	687a      	ldr	r2, [r7, #4]
    2c18:	6812      	ldr	r2, [r2, #0]
    2c1a:	ea6f 0202 	mvn.w	r2, r2
    2c1e:	400a      	ands	r2, r1
    2c20:	609a      	str	r2, [r3, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
    2c22:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2c26:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2c2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2c2e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2c32:	68d1      	ldr	r1, [r2, #12]
    2c34:	687a      	ldr	r2, [r7, #4]
    2c36:	6812      	ldr	r2, [r2, #0]
    2c38:	ea6f 0202 	mvn.w	r2, r2
    2c3c:	400a      	ands	r2, r1
    2c3e:	60da      	str	r2, [r3, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    2c40:	687b      	ldr	r3, [r7, #4]
    2c42:	795b      	ldrb	r3, [r3, #5]
    2c44:	2b10      	cmp	r3, #16
    2c46:	d11a      	bne.n	2c7e <EXTI_Init+0xee>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
    2c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2c4c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2c50:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2c54:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2c58:	6891      	ldr	r1, [r2, #8]
    2c5a:	687a      	ldr	r2, [r7, #4]
    2c5c:	6812      	ldr	r2, [r2, #0]
    2c5e:	430a      	orrs	r2, r1
    2c60:	609a      	str	r2, [r3, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    2c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2c66:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2c6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2c6e:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2c72:	68d1      	ldr	r1, [r2, #12]
    2c74:	687a      	ldr	r2, [r7, #4]
    2c76:	6812      	ldr	r2, [r2, #0]
    2c78:	430a      	orrs	r2, r1
    2c7a:	60da      	str	r2, [r3, #12]
    2c7c:	e01f      	b.n	2cbe <EXTI_Init+0x12e>
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
    2c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2c82:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2c86:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
    2c88:	687b      	ldr	r3, [r7, #4]
    2c8a:	795b      	ldrb	r3, [r3, #5]
    2c8c:	68fa      	ldr	r2, [r7, #12]
    2c8e:	18d3      	adds	r3, r2, r3
    2c90:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    2c92:	68fb      	ldr	r3, [r7, #12]
    2c94:	68fa      	ldr	r2, [r7, #12]
    2c96:	6811      	ldr	r1, [r2, #0]
    2c98:	687a      	ldr	r2, [r7, #4]
    2c9a:	6812      	ldr	r2, [r2, #0]
    2c9c:	430a      	orrs	r2, r1
    2c9e:	601a      	str	r2, [r3, #0]
    2ca0:	e00d      	b.n	2cbe <EXTI_Init+0x12e>
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
    2ca2:	687b      	ldr	r3, [r7, #4]
    2ca4:	791b      	ldrb	r3, [r3, #4]
    2ca6:	68fa      	ldr	r2, [r7, #12]
    2ca8:	18d3      	adds	r3, r2, r3
    2caa:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
    2cac:	68fb      	ldr	r3, [r7, #12]
    2cae:	68fa      	ldr	r2, [r7, #12]
    2cb0:	6811      	ldr	r1, [r2, #0]
    2cb2:	687a      	ldr	r2, [r7, #4]
    2cb4:	6812      	ldr	r2, [r2, #0]
    2cb6:	ea6f 0202 	mvn.w	r2, r2
    2cba:	400a      	ands	r2, r1
    2cbc:	601a      	str	r2, [r3, #0]
  }
}
    2cbe:	f107 0714 	add.w	r7, r7, #20
    2cc2:	46bd      	mov	sp, r7
    2cc4:	bc80      	pop	{r7}
    2cc6:	4770      	bx	lr

00002cc8 <EXTI_StructInit>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void EXTI_StructInit(EXTI_InitTypeDef* EXTI_InitStruct)
{
    2cc8:	b480      	push	{r7}
    2cca:	b083      	sub	sp, #12
    2ccc:	af00      	add	r7, sp, #0
    2cce:	6078      	str	r0, [r7, #4]
  EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    2cd0:	687b      	ldr	r3, [r7, #4]
    2cd2:	f04f 0200 	mov.w	r2, #0
    2cd6:	601a      	str	r2, [r3, #0]
  EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    2cd8:	687b      	ldr	r3, [r7, #4]
    2cda:	f04f 0200 	mov.w	r2, #0
    2cde:	711a      	strb	r2, [r3, #4]
  EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    2ce0:	687b      	ldr	r3, [r7, #4]
    2ce2:	f04f 020c 	mov.w	r2, #12
    2ce6:	715a      	strb	r2, [r3, #5]
  EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    2ce8:	687b      	ldr	r3, [r7, #4]
    2cea:	f04f 0200 	mov.w	r2, #0
    2cee:	719a      	strb	r2, [r3, #6]
}
    2cf0:	f107 070c 	add.w	r7, r7, #12
    2cf4:	46bd      	mov	sp, r7
    2cf6:	bc80      	pop	{r7}
    2cf8:	4770      	bx	lr
    2cfa:	bf00      	nop

00002cfc <EXTI_GenerateSWInterrupt>:
  * @param  EXTI_Line: specifies the EXTI lines to be enabled or disabled.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    2cfc:	b480      	push	{r7}
    2cfe:	b083      	sub	sp, #12
    2d00:	af00      	add	r7, sp, #0
    2d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->SWIER |= EXTI_Line;
    2d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2d08:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    2d10:	f2c4 0201 	movt	r2, #16385	; 0x4001
    2d14:	6911      	ldr	r1, [r2, #16]
    2d16:	687a      	ldr	r2, [r7, #4]
    2d18:	430a      	orrs	r2, r1
    2d1a:	611a      	str	r2, [r3, #16]
}
    2d1c:	f107 070c 	add.w	r7, r7, #12
    2d20:	46bd      	mov	sp, r7
    2d22:	bc80      	pop	{r7}
    2d24:	4770      	bx	lr
    2d26:	bf00      	nop

00002d28 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    2d28:	b480      	push	{r7}
    2d2a:	b085      	sub	sp, #20
    2d2c:	af00      	add	r7, sp, #0
    2d2e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    2d30:	f04f 0300 	mov.w	r3, #0
    2d34:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
    2d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2d3a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2d3e:	695a      	ldr	r2, [r3, #20]
    2d40:	687b      	ldr	r3, [r7, #4]
    2d42:	4013      	ands	r3, r2
    2d44:	2b00      	cmp	r3, #0
    2d46:	d003      	beq.n	2d50 <EXTI_GetFlagStatus+0x28>
  {
    bitstatus = SET;
    2d48:	f04f 0301 	mov.w	r3, #1
    2d4c:	73fb      	strb	r3, [r7, #15]
    2d4e:	e002      	b.n	2d56 <EXTI_GetFlagStatus+0x2e>
  }
  else
  {
    bitstatus = RESET;
    2d50:	f04f 0300 	mov.w	r3, #0
    2d54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2d56:	7bfb      	ldrb	r3, [r7, #15]
}
    2d58:	4618      	mov	r0, r3
    2d5a:	f107 0714 	add.w	r7, r7, #20
    2d5e:	46bd      	mov	sp, r7
    2d60:	bc80      	pop	{r7}
    2d62:	4770      	bx	lr

00002d64 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    2d64:	b480      	push	{r7}
    2d66:	b083      	sub	sp, #12
    2d68:	af00      	add	r7, sp, #0
    2d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    2d6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2d70:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2d74:	687a      	ldr	r2, [r7, #4]
    2d76:	615a      	str	r2, [r3, #20]
}
    2d78:	f107 070c 	add.w	r7, r7, #12
    2d7c:	46bd      	mov	sp, r7
    2d7e:	bc80      	pop	{r7}
    2d80:	4770      	bx	lr
    2d82:	bf00      	nop

00002d84 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    2d84:	b480      	push	{r7}
    2d86:	b085      	sub	sp, #20
    2d88:	af00      	add	r7, sp, #0
    2d8a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
    2d8c:	f04f 0300 	mov.w	r3, #0
    2d90:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
    2d92:	f04f 0300 	mov.w	r3, #0
    2d96:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
    2d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2d9c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2da0:	681a      	ldr	r2, [r3, #0]
    2da2:	687b      	ldr	r3, [r7, #4]
    2da4:	4013      	ands	r3, r2
    2da6:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    2da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2dac:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2db0:	695a      	ldr	r2, [r3, #20]
    2db2:	687b      	ldr	r3, [r7, #4]
    2db4:	4013      	ands	r3, r2
    2db6:	2b00      	cmp	r3, #0
    2db8:	d006      	beq.n	2dc8 <EXTI_GetITStatus+0x44>
    2dba:	68bb      	ldr	r3, [r7, #8]
    2dbc:	2b00      	cmp	r3, #0
    2dbe:	d003      	beq.n	2dc8 <EXTI_GetITStatus+0x44>
  {
    bitstatus = SET;
    2dc0:	f04f 0301 	mov.w	r3, #1
    2dc4:	73fb      	strb	r3, [r7, #15]
    2dc6:	e002      	b.n	2dce <EXTI_GetITStatus+0x4a>
  }
  else
  {
    bitstatus = RESET;
    2dc8:	f04f 0300 	mov.w	r3, #0
    2dcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    2dce:	7bfb      	ldrb	r3, [r7, #15]
}
    2dd0:	4618      	mov	r0, r3
    2dd2:	f107 0714 	add.w	r7, r7, #20
    2dd6:	46bd      	mov	sp, r7
    2dd8:	bc80      	pop	{r7}
    2dda:	4770      	bx	lr

00002ddc <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    2ddc:	b480      	push	{r7}
    2dde:	b083      	sub	sp, #12
    2de0:	af00      	add	r7, sp, #0
    2de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
    2de4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    2de8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2dec:	687a      	ldr	r2, [r7, #4]
    2dee:	615a      	str	r2, [r3, #20]
}
    2df0:	f107 070c 	add.w	r7, r7, #12
    2df4:	46bd      	mov	sp, r7
    2df6:	bc80      	pop	{r7}
    2df8:	4770      	bx	lr
    2dfa:	bf00      	nop

00002dfc <ADC_DeInit>:
  * @brief  Deinitializes the ADCx peripheral registers to their default reset values.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_DeInit(ADC_TypeDef* ADCx)
{
    2dfc:	b580      	push	{r7, lr}
    2dfe:	b082      	sub	sp, #8
    2e00:	af00      	add	r7, sp, #0
    2e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  if (ADCx == ADC1)
    2e04:	687a      	ldr	r2, [r7, #4]
    2e06:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    2e0a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2e0e:	429a      	cmp	r2, r3
    2e10:	d10c      	bne.n	2e2c <ADC_DeInit+0x30>
  {
    /* Enable ADC1 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
    2e12:	f44f 7000 	mov.w	r0, #512	; 0x200
    2e16:	f04f 0101 	mov.w	r1, #1
    2e1a:	f7fe fd25 	bl	1868 <RCC_APB2PeriphResetCmd>
    /* Release ADC1 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
    2e1e:	f44f 7000 	mov.w	r0, #512	; 0x200
    2e22:	f04f 0100 	mov.w	r1, #0
    2e26:	f7fe fd1f 	bl	1868 <RCC_APB2PeriphResetCmd>
    2e2a:	e026      	b.n	2e7a <ADC_DeInit+0x7e>
  }
  else if (ADCx == ADC2)
    2e2c:	687a      	ldr	r2, [r7, #4]
    2e2e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    2e32:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2e36:	429a      	cmp	r2, r3
    2e38:	d10c      	bne.n	2e54 <ADC_DeInit+0x58>
  {
    /* Enable ADC2 reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, ENABLE);
    2e3a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2e3e:	f04f 0101 	mov.w	r1, #1
    2e42:	f7fe fd11 	bl	1868 <RCC_APB2PeriphResetCmd>
    /* Release ADC2 from reset state */
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC2, DISABLE);
    2e46:	f44f 6080 	mov.w	r0, #1024	; 0x400
    2e4a:	f04f 0100 	mov.w	r1, #0
    2e4e:	f7fe fd0b 	bl	1868 <RCC_APB2PeriphResetCmd>
    2e52:	e012      	b.n	2e7a <ADC_DeInit+0x7e>
  }
  else
  {
    if (ADCx == ADC3)
    2e54:	687a      	ldr	r2, [r7, #4]
    2e56:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
    2e5a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    2e5e:	429a      	cmp	r2, r3
    2e60:	d10b      	bne.n	2e7a <ADC_DeInit+0x7e>
    {
      /* Enable ADC3 reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, ENABLE);
    2e62:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2e66:	f04f 0101 	mov.w	r1, #1
    2e6a:	f7fe fcfd 	bl	1868 <RCC_APB2PeriphResetCmd>
      /* Release ADC3 from reset state */
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC3, DISABLE);
    2e6e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2e72:	f04f 0100 	mov.w	r1, #0
    2e76:	f7fe fcf7 	bl	1868 <RCC_APB2PeriphResetCmd>
    }
  }
}
    2e7a:	f107 0708 	add.w	r7, r7, #8
    2e7e:	46bd      	mov	sp, r7
    2e80:	bd80      	pop	{r7, pc}
    2e82:	bf00      	nop

00002e84 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
    2e84:	b480      	push	{r7}
    2e86:	b085      	sub	sp, #20
    2e88:	af00      	add	r7, sp, #0
    2e8a:	6078      	str	r0, [r7, #4]
    2e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
    2e8e:	f04f 0300 	mov.w	r3, #0
    2e92:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
    2e94:	f04f 0300 	mov.w	r3, #0
    2e98:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
    2e9a:	687b      	ldr	r3, [r7, #4]
    2e9c:	685b      	ldr	r3, [r3, #4]
    2e9e:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
    2ea0:	68fb      	ldr	r3, [r7, #12]
    2ea2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    2ea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    2eaa:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
    2eac:	683b      	ldr	r3, [r7, #0]
    2eae:	681a      	ldr	r2, [r3, #0]
    2eb0:	683b      	ldr	r3, [r7, #0]
    2eb2:	791b      	ldrb	r3, [r3, #4]
    2eb4:	ea4f 2303 	mov.w	r3, r3, lsl #8
    2eb8:	4313      	orrs	r3, r2
    2eba:	68fa      	ldr	r2, [r7, #12]
    2ebc:	4313      	orrs	r3, r2
    2ebe:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
    2ec0:	687b      	ldr	r3, [r7, #4]
    2ec2:	68fa      	ldr	r2, [r7, #12]
    2ec4:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
    2ec6:	687b      	ldr	r3, [r7, #4]
    2ec8:	689b      	ldr	r3, [r3, #8]
    2eca:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
    2ecc:	68fa      	ldr	r2, [r7, #12]
    2ece:	f24f 73fd 	movw	r3, #63485	; 0xf7fd
    2ed2:	f6cf 73f1 	movt	r3, #65521	; 0xfff1
    2ed6:	4013      	ands	r3, r2
    2ed8:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    2eda:	683b      	ldr	r3, [r7, #0]
    2edc:	68da      	ldr	r2, [r3, #12]
    2ede:	683b      	ldr	r3, [r7, #0]
    2ee0:	689b      	ldr	r3, [r3, #8]
    2ee2:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
    2ee4:	683b      	ldr	r3, [r7, #0]
    2ee6:	795b      	ldrb	r3, [r3, #5]
    2ee8:	ea4f 0343 	mov.w	r3, r3, lsl #1
  tmpreg1 &= CR2_CLEAR_Mask;
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
    2eec:	4313      	orrs	r3, r2
    2eee:	68fa      	ldr	r2, [r7, #12]
    2ef0:	4313      	orrs	r3, r2
    2ef2:	60fb      	str	r3, [r7, #12]
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
    2ef4:	687b      	ldr	r3, [r7, #4]
    2ef6:	68fa      	ldr	r2, [r7, #12]
    2ef8:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
    2efa:	687b      	ldr	r3, [r7, #4]
    2efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2efe:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
    2f00:	68fb      	ldr	r3, [r7, #12]
    2f02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    2f06:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
    2f08:	683b      	ldr	r3, [r7, #0]
    2f0a:	7c1b      	ldrb	r3, [r3, #16]
    2f0c:	f103 33ff 	add.w	r3, r3, #4294967295
    2f10:	b2da      	uxtb	r2, r3
    2f12:	7afb      	ldrb	r3, [r7, #11]
    2f14:	4313      	orrs	r3, r2
    2f16:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
    2f18:	7afb      	ldrb	r3, [r7, #11]
    2f1a:	ea4f 5303 	mov.w	r3, r3, lsl #20
    2f1e:	68fa      	ldr	r2, [r7, #12]
    2f20:	4313      	orrs	r3, r2
    2f22:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
    2f24:	687b      	ldr	r3, [r7, #4]
    2f26:	68fa      	ldr	r2, [r7, #12]
    2f28:	62da      	str	r2, [r3, #44]	; 0x2c
}
    2f2a:	f107 0714 	add.w	r7, r7, #20
    2f2e:	46bd      	mov	sp, r7
    2f30:	bc80      	pop	{r7}
    2f32:	4770      	bx	lr

00002f34 <ADC_StructInit>:
  * @brief  Fills each ADC_InitStruct member with its default value.
  * @param  ADC_InitStruct : pointer to an ADC_InitTypeDef structure which will be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
    2f34:	b480      	push	{r7}
    2f36:	b083      	sub	sp, #12
    2f38:	af00      	add	r7, sp, #0
    2f3a:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
    2f3c:	687b      	ldr	r3, [r7, #4]
    2f3e:	f04f 0200 	mov.w	r2, #0
    2f42:	601a      	str	r2, [r3, #0]
  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
    2f44:	687b      	ldr	r3, [r7, #4]
    2f46:	f04f 0200 	mov.w	r2, #0
    2f4a:	711a      	strb	r2, [r3, #4]
  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
    2f4c:	687b      	ldr	r3, [r7, #4]
    2f4e:	f04f 0200 	mov.w	r2, #0
    2f52:	715a      	strb	r2, [r3, #5]
  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
    2f54:	687b      	ldr	r3, [r7, #4]
    2f56:	f04f 0200 	mov.w	r2, #0
    2f5a:	609a      	str	r2, [r3, #8]
  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
    2f5c:	687b      	ldr	r3, [r7, #4]
    2f5e:	f04f 0200 	mov.w	r2, #0
    2f62:	60da      	str	r2, [r3, #12]
  /* Initialize the ADC_NbrOfChannel member */
  ADC_InitStruct->ADC_NbrOfChannel = 1;
    2f64:	687b      	ldr	r3, [r7, #4]
    2f66:	f04f 0201 	mov.w	r2, #1
    2f6a:	741a      	strb	r2, [r3, #16]
}
    2f6c:	f107 070c 	add.w	r7, r7, #12
    2f70:	46bd      	mov	sp, r7
    2f72:	bc80      	pop	{r7}
    2f74:	4770      	bx	lr
    2f76:	bf00      	nop

00002f78 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2f78:	b480      	push	{r7}
    2f7a:	b083      	sub	sp, #12
    2f7c:	af00      	add	r7, sp, #0
    2f7e:	6078      	str	r0, [r7, #4]
    2f80:	460b      	mov	r3, r1
    2f82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2f84:	78fb      	ldrb	r3, [r7, #3]
    2f86:	2b00      	cmp	r3, #0
    2f88:	d006      	beq.n	2f98 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
    2f8a:	687b      	ldr	r3, [r7, #4]
    2f8c:	689b      	ldr	r3, [r3, #8]
    2f8e:	f043 0201 	orr.w	r2, r3, #1
    2f92:	687b      	ldr	r3, [r7, #4]
    2f94:	609a      	str	r2, [r3, #8]
    2f96:	e005      	b.n	2fa4 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
    2f98:	687b      	ldr	r3, [r7, #4]
    2f9a:	689b      	ldr	r3, [r3, #8]
    2f9c:	f023 0201 	bic.w	r2, r3, #1
    2fa0:	687b      	ldr	r3, [r7, #4]
    2fa2:	609a      	str	r2, [r3, #8]
  }
}
    2fa4:	f107 070c 	add.w	r7, r7, #12
    2fa8:	46bd      	mov	sp, r7
    2faa:	bc80      	pop	{r7}
    2fac:	4770      	bx	lr
    2fae:	bf00      	nop

00002fb0 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    2fb0:	b480      	push	{r7}
    2fb2:	b083      	sub	sp, #12
    2fb4:	af00      	add	r7, sp, #0
    2fb6:	6078      	str	r0, [r7, #4]
    2fb8:	460b      	mov	r3, r1
    2fba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    2fbc:	78fb      	ldrb	r3, [r7, #3]
    2fbe:	2b00      	cmp	r3, #0
    2fc0:	d006      	beq.n	2fd0 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
    2fc2:	687b      	ldr	r3, [r7, #4]
    2fc4:	689b      	ldr	r3, [r3, #8]
    2fc6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
    2fca:	687b      	ldr	r3, [r7, #4]
    2fcc:	609a      	str	r2, [r3, #8]
    2fce:	e005      	b.n	2fdc <ADC_DMACmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
    2fd0:	687b      	ldr	r3, [r7, #4]
    2fd2:	689b      	ldr	r3, [r3, #8]
    2fd4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
    2fd8:	687b      	ldr	r3, [r7, #4]
    2fda:	609a      	str	r2, [r3, #8]
  }
}
    2fdc:	f107 070c 	add.w	r7, r7, #12
    2fe0:	46bd      	mov	sp, r7
    2fe2:	bc80      	pop	{r7}
    2fe4:	4770      	bx	lr
    2fe6:	bf00      	nop

00002fe8 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
    2fe8:	b480      	push	{r7}
    2fea:	b085      	sub	sp, #20
    2fec:	af00      	add	r7, sp, #0
    2fee:	6078      	str	r0, [r7, #4]
    2ff0:	4613      	mov	r3, r2
    2ff2:	460a      	mov	r2, r1
    2ff4:	807a      	strh	r2, [r7, #2]
    2ff6:	707b      	strb	r3, [r7, #1]
  uint8_t itmask = 0;
    2ff8:	f04f 0300 	mov.w	r3, #0
    2ffc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
    2ffe:	887b      	ldrh	r3, [r7, #2]
    3000:	73fb      	strb	r3, [r7, #15]
  if (NewState != DISABLE)
    3002:	787b      	ldrb	r3, [r7, #1]
    3004:	2b00      	cmp	r3, #0
    3006:	d006      	beq.n	3016 <ADC_ITConfig+0x2e>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
    3008:	687b      	ldr	r3, [r7, #4]
    300a:	685a      	ldr	r2, [r3, #4]
    300c:	7bfb      	ldrb	r3, [r7, #15]
    300e:	431a      	orrs	r2, r3
    3010:	687b      	ldr	r3, [r7, #4]
    3012:	605a      	str	r2, [r3, #4]
    3014:	e007      	b.n	3026 <ADC_ITConfig+0x3e>
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
    3016:	687b      	ldr	r3, [r7, #4]
    3018:	685a      	ldr	r2, [r3, #4]
    301a:	7bfb      	ldrb	r3, [r7, #15]
    301c:	ea6f 0303 	mvn.w	r3, r3
    3020:	401a      	ands	r2, r3
    3022:	687b      	ldr	r3, [r7, #4]
    3024:	605a      	str	r2, [r3, #4]
  }
}
    3026:	f107 0714 	add.w	r7, r7, #20
    302a:	46bd      	mov	sp, r7
    302c:	bc80      	pop	{r7}
    302e:	4770      	bx	lr

00003030 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
    3030:	b480      	push	{r7}
    3032:	b083      	sub	sp, #12
    3034:	af00      	add	r7, sp, #0
    3036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
    3038:	687b      	ldr	r3, [r7, #4]
    303a:	689b      	ldr	r3, [r3, #8]
    303c:	f043 0208 	orr.w	r2, r3, #8
    3040:	687b      	ldr	r3, [r7, #4]
    3042:	609a      	str	r2, [r3, #8]
}
    3044:	f107 070c 	add.w	r7, r7, #12
    3048:	46bd      	mov	sp, r7
    304a:	bc80      	pop	{r7}
    304c:	4770      	bx	lr
    304e:	bf00      	nop

00003050 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
    3050:	b480      	push	{r7}
    3052:	b085      	sub	sp, #20
    3054:	af00      	add	r7, sp, #0
    3056:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    3058:	f04f 0300 	mov.w	r3, #0
    305c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
    305e:	687b      	ldr	r3, [r7, #4]
    3060:	689b      	ldr	r3, [r3, #8]
    3062:	f003 0308 	and.w	r3, r3, #8
    3066:	2b00      	cmp	r3, #0
    3068:	d003      	beq.n	3072 <ADC_GetResetCalibrationStatus+0x22>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
    306a:	f04f 0301 	mov.w	r3, #1
    306e:	73fb      	strb	r3, [r7, #15]
    3070:	e002      	b.n	3078 <ADC_GetResetCalibrationStatus+0x28>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
    3072:	f04f 0300 	mov.w	r3, #0
    3076:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
    3078:	7bfb      	ldrb	r3, [r7, #15]
}
    307a:	4618      	mov	r0, r3
    307c:	f107 0714 	add.w	r7, r7, #20
    3080:	46bd      	mov	sp, r7
    3082:	bc80      	pop	{r7}
    3084:	4770      	bx	lr
    3086:	bf00      	nop

00003088 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
    3088:	b480      	push	{r7}
    308a:	b083      	sub	sp, #12
    308c:	af00      	add	r7, sp, #0
    308e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
    3090:	687b      	ldr	r3, [r7, #4]
    3092:	689b      	ldr	r3, [r3, #8]
    3094:	f043 0204 	orr.w	r2, r3, #4
    3098:	687b      	ldr	r3, [r7, #4]
    309a:	609a      	str	r2, [r3, #8]
}
    309c:	f107 070c 	add.w	r7, r7, #12
    30a0:	46bd      	mov	sp, r7
    30a2:	bc80      	pop	{r7}
    30a4:	4770      	bx	lr
    30a6:	bf00      	nop

000030a8 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
    30a8:	b480      	push	{r7}
    30aa:	b085      	sub	sp, #20
    30ac:	af00      	add	r7, sp, #0
    30ae:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    30b0:	f04f 0300 	mov.w	r3, #0
    30b4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
    30b6:	687b      	ldr	r3, [r7, #4]
    30b8:	689b      	ldr	r3, [r3, #8]
    30ba:	f003 0304 	and.w	r3, r3, #4
    30be:	2b00      	cmp	r3, #0
    30c0:	d003      	beq.n	30ca <ADC_GetCalibrationStatus+0x22>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
    30c2:	f04f 0301 	mov.w	r3, #1
    30c6:	73fb      	strb	r3, [r7, #15]
    30c8:	e002      	b.n	30d0 <ADC_GetCalibrationStatus+0x28>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
    30ca:	f04f 0300 	mov.w	r3, #0
    30ce:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
    30d0:	7bfb      	ldrb	r3, [r7, #15]
}
    30d2:	4618      	mov	r0, r3
    30d4:	f107 0714 	add.w	r7, r7, #20
    30d8:	46bd      	mov	sp, r7
    30da:	bc80      	pop	{r7}
    30dc:	4770      	bx	lr
    30de:	bf00      	nop

000030e0 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    30e0:	b480      	push	{r7}
    30e2:	b083      	sub	sp, #12
    30e4:	af00      	add	r7, sp, #0
    30e6:	6078      	str	r0, [r7, #4]
    30e8:	460b      	mov	r3, r1
    30ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    30ec:	78fb      	ldrb	r3, [r7, #3]
    30ee:	2b00      	cmp	r3, #0
    30f0:	d006      	beq.n	3100 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
    30f2:	687b      	ldr	r3, [r7, #4]
    30f4:	689b      	ldr	r3, [r3, #8]
    30f6:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
    30fa:	687b      	ldr	r3, [r7, #4]
    30fc:	609a      	str	r2, [r3, #8]
    30fe:	e005      	b.n	310c <ADC_SoftwareStartConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
    3100:	687b      	ldr	r3, [r7, #4]
    3102:	689b      	ldr	r3, [r3, #8]
    3104:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
    3108:	687b      	ldr	r3, [r7, #4]
    310a:	609a      	str	r2, [r3, #8]
  }
}
    310c:	f107 070c 	add.w	r7, r7, #12
    3110:	46bd      	mov	sp, r7
    3112:	bc80      	pop	{r7}
    3114:	4770      	bx	lr
    3116:	bf00      	nop

00003118 <ADC_GetSoftwareStartConvStatus>:
  * @brief  Gets the selected ADC Software start conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx)
{
    3118:	b480      	push	{r7}
    311a:	b085      	sub	sp, #20
    311c:	af00      	add	r7, sp, #0
    311e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    3120:	f04f 0300 	mov.w	r3, #0
    3124:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of SWSTART bit */
  if ((ADCx->CR2 & CR2_SWSTART_Set) != (uint32_t)RESET)
    3126:	687b      	ldr	r3, [r7, #4]
    3128:	689b      	ldr	r3, [r3, #8]
    312a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
    312e:	2b00      	cmp	r3, #0
    3130:	d003      	beq.n	313a <ADC_GetSoftwareStartConvStatus+0x22>
  {
    /* SWSTART bit is set */
    bitstatus = SET;
    3132:	f04f 0301 	mov.w	r3, #1
    3136:	73fb      	strb	r3, [r7, #15]
    3138:	e002      	b.n	3140 <ADC_GetSoftwareStartConvStatus+0x28>
  }
  else
  {
    /* SWSTART bit is reset */
    bitstatus = RESET;
    313a:	f04f 0300 	mov.w	r3, #0
    313e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SWSTART bit status */
  return  bitstatus;
    3140:	7bfb      	ldrb	r3, [r7, #15]
}
    3142:	4618      	mov	r0, r3
    3144:	f107 0714 	add.w	r7, r7, #20
    3148:	46bd      	mov	sp, r7
    314a:	bc80      	pop	{r7}
    314c:	4770      	bx	lr
    314e:	bf00      	nop

00003150 <ADC_DiscModeChannelCountConfig>:
  * @param  Number: specifies the discontinuous mode regular channel
  *         count value. This number must be between 1 and 8.
  * @retval None
  */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number)
{
    3150:	b480      	push	{r7}
    3152:	b085      	sub	sp, #20
    3154:	af00      	add	r7, sp, #0
    3156:	6078      	str	r0, [r7, #4]
    3158:	460b      	mov	r3, r1
    315a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    315c:	f04f 0300 	mov.w	r3, #0
    3160:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    3162:	f04f 0300 	mov.w	r3, #0
    3166:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_REGULAR_DISC_NUMBER(Number));
  /* Get the old register value */
  tmpreg1 = ADCx->CR1;
    3168:	687b      	ldr	r3, [r7, #4]
    316a:	685b      	ldr	r3, [r3, #4]
    316c:	60fb      	str	r3, [r7, #12]
  /* Clear the old discontinuous mode channel count */
  tmpreg1 &= CR1_DISCNUM_Reset;
    316e:	68fb      	ldr	r3, [r7, #12]
    3170:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
    3174:	60fb      	str	r3, [r7, #12]
  /* Set the discontinuous mode channel count */
  tmpreg2 = Number - 1;
    3176:	78fb      	ldrb	r3, [r7, #3]
    3178:	f103 33ff 	add.w	r3, r3, #4294967295
    317c:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 13;
    317e:	68bb      	ldr	r3, [r7, #8]
    3180:	ea4f 3343 	mov.w	r3, r3, lsl #13
    3184:	68fa      	ldr	r2, [r7, #12]
    3186:	4313      	orrs	r3, r2
    3188:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg1;
    318a:	687b      	ldr	r3, [r7, #4]
    318c:	68fa      	ldr	r2, [r7, #12]
    318e:	605a      	str	r2, [r3, #4]
}
    3190:	f107 0714 	add.w	r7, r7, #20
    3194:	46bd      	mov	sp, r7
    3196:	bc80      	pop	{r7}
    3198:	4770      	bx	lr
    319a:	bf00      	nop

0000319c <ADC_DiscModeCmd>:
  *         on regular group channel.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    319c:	b480      	push	{r7}
    319e:	b083      	sub	sp, #12
    31a0:	af00      	add	r7, sp, #0
    31a2:	6078      	str	r0, [r7, #4]
    31a4:	460b      	mov	r3, r1
    31a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    31a8:	78fb      	ldrb	r3, [r7, #3]
    31aa:	2b00      	cmp	r3, #0
    31ac:	d006      	beq.n	31bc <ADC_DiscModeCmd+0x20>
  {
    /* Enable the selected ADC regular discontinuous mode */
    ADCx->CR1 |= CR1_DISCEN_Set;
    31ae:	687b      	ldr	r3, [r7, #4]
    31b0:	685b      	ldr	r3, [r3, #4]
    31b2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
    31b6:	687b      	ldr	r3, [r7, #4]
    31b8:	605a      	str	r2, [r3, #4]
    31ba:	e005      	b.n	31c8 <ADC_DiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    ADCx->CR1 &= CR1_DISCEN_Reset;
    31bc:	687b      	ldr	r3, [r7, #4]
    31be:	685b      	ldr	r3, [r3, #4]
    31c0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
    31c4:	687b      	ldr	r3, [r7, #4]
    31c6:	605a      	str	r2, [r3, #4]
  }
}
    31c8:	f107 070c 	add.w	r7, r7, #12
    31cc:	46bd      	mov	sp, r7
    31ce:	bc80      	pop	{r7}
    31d0:	4770      	bx	lr
    31d2:	bf00      	nop

000031d4 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    31d4:	b480      	push	{r7}
    31d6:	b085      	sub	sp, #20
    31d8:	af00      	add	r7, sp, #0
    31da:	6078      	str	r0, [r7, #4]
    31dc:	70f9      	strb	r1, [r7, #3]
    31de:	70ba      	strb	r2, [r7, #2]
    31e0:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
    31e2:	f04f 0300 	mov.w	r3, #0
    31e6:	60fb      	str	r3, [r7, #12]
    31e8:	f04f 0300 	mov.w	r3, #0
    31ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    31ee:	78fb      	ldrb	r3, [r7, #3]
    31f0:	2b09      	cmp	r3, #9
    31f2:	d927      	bls.n	3244 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    31f4:	687b      	ldr	r3, [r7, #4]
    31f6:	68db      	ldr	r3, [r3, #12]
    31f8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
    31fa:	78fa      	ldrb	r2, [r7, #3]
    31fc:	4613      	mov	r3, r2
    31fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3202:	189b      	adds	r3, r3, r2
    3204:	f1a3 031e 	sub.w	r3, r3, #30
    3208:	f04f 0207 	mov.w	r2, #7
    320c:	fa02 f303 	lsl.w	r3, r2, r3
    3210:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    3212:	68bb      	ldr	r3, [r7, #8]
    3214:	ea6f 0303 	mvn.w	r3, r3
    3218:	68fa      	ldr	r2, [r7, #12]
    321a:	4013      	ands	r3, r2
    321c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
    321e:	7879      	ldrb	r1, [r7, #1]
    3220:	78fa      	ldrb	r2, [r7, #3]
    3222:	4613      	mov	r3, r2
    3224:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3228:	189b      	adds	r3, r3, r2
    322a:	f1a3 031e 	sub.w	r3, r3, #30
    322e:	fa01 f303 	lsl.w	r3, r1, r3
    3232:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    3234:	68fa      	ldr	r2, [r7, #12]
    3236:	68bb      	ldr	r3, [r7, #8]
    3238:	4313      	orrs	r3, r2
    323a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    323c:	687b      	ldr	r3, [r7, #4]
    323e:	68fa      	ldr	r2, [r7, #12]
    3240:	60da      	str	r2, [r3, #12]
    3242:	e022      	b.n	328a <ADC_RegularChannelConfig+0xb6>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    3244:	687b      	ldr	r3, [r7, #4]
    3246:	691b      	ldr	r3, [r3, #16]
    3248:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    324a:	78fa      	ldrb	r2, [r7, #3]
    324c:	4613      	mov	r3, r2
    324e:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3252:	189b      	adds	r3, r3, r2
    3254:	f04f 0207 	mov.w	r2, #7
    3258:	fa02 f303 	lsl.w	r3, r2, r3
    325c:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    325e:	68bb      	ldr	r3, [r7, #8]
    3260:	ea6f 0303 	mvn.w	r3, r3
    3264:	68fa      	ldr	r2, [r7, #12]
    3266:	4013      	ands	r3, r2
    3268:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    326a:	7879      	ldrb	r1, [r7, #1]
    326c:	78fa      	ldrb	r2, [r7, #3]
    326e:	4613      	mov	r3, r2
    3270:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3274:	189b      	adds	r3, r3, r2
    3276:	fa01 f303 	lsl.w	r3, r1, r3
    327a:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    327c:	68fa      	ldr	r2, [r7, #12]
    327e:	68bb      	ldr	r3, [r7, #8]
    3280:	4313      	orrs	r3, r2
    3282:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    3284:	687b      	ldr	r3, [r7, #4]
    3286:	68fa      	ldr	r2, [r7, #12]
    3288:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
    328a:	78bb      	ldrb	r3, [r7, #2]
    328c:	2b06      	cmp	r3, #6
    328e:	d827      	bhi.n	32e0 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3294:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
    3296:	78bb      	ldrb	r3, [r7, #2]
    3298:	f103 32ff 	add.w	r2, r3, #4294967295
    329c:	4613      	mov	r3, r2
    329e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    32a2:	189b      	adds	r3, r3, r2
    32a4:	f04f 021f 	mov.w	r2, #31
    32a8:	fa02 f303 	lsl.w	r3, r2, r3
    32ac:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    32ae:	68bb      	ldr	r3, [r7, #8]
    32b0:	ea6f 0303 	mvn.w	r3, r3
    32b4:	68fa      	ldr	r2, [r7, #12]
    32b6:	4013      	ands	r3, r2
    32b8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
    32ba:	78f9      	ldrb	r1, [r7, #3]
    32bc:	78bb      	ldrb	r3, [r7, #2]
    32be:	f103 32ff 	add.w	r2, r3, #4294967295
    32c2:	4613      	mov	r3, r2
    32c4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    32c8:	189b      	adds	r3, r3, r2
    32ca:	fa01 f303 	lsl.w	r3, r1, r3
    32ce:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    32d0:	68fa      	ldr	r2, [r7, #12]
    32d2:	68bb      	ldr	r3, [r7, #8]
    32d4:	4313      	orrs	r3, r2
    32d6:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
    32d8:	687b      	ldr	r3, [r7, #4]
    32da:	68fa      	ldr	r2, [r7, #12]
    32dc:	635a      	str	r2, [r3, #52]	; 0x34
    32de:	e051      	b.n	3384 <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
    32e0:	78bb      	ldrb	r3, [r7, #2]
    32e2:	2b0c      	cmp	r3, #12
    32e4:	d827      	bhi.n	3336 <ADC_RegularChannelConfig+0x162>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
    32e6:	687b      	ldr	r3, [r7, #4]
    32e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    32ea:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
    32ec:	78ba      	ldrb	r2, [r7, #2]
    32ee:	4613      	mov	r3, r2
    32f0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    32f4:	189b      	adds	r3, r3, r2
    32f6:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
    32fa:	f04f 021f 	mov.w	r2, #31
    32fe:	fa02 f303 	lsl.w	r3, r2, r3
    3302:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    3304:	68bb      	ldr	r3, [r7, #8]
    3306:	ea6f 0303 	mvn.w	r3, r3
    330a:	68fa      	ldr	r2, [r7, #12]
    330c:	4013      	ands	r3, r2
    330e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
    3310:	78f9      	ldrb	r1, [r7, #3]
    3312:	78ba      	ldrb	r2, [r7, #2]
    3314:	4613      	mov	r3, r2
    3316:	ea4f 0383 	mov.w	r3, r3, lsl #2
    331a:	189b      	adds	r3, r3, r2
    331c:	f1a3 0323 	sub.w	r3, r3, #35	; 0x23
    3320:	fa01 f303 	lsl.w	r3, r1, r3
    3324:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    3326:	68fa      	ldr	r2, [r7, #12]
    3328:	68bb      	ldr	r3, [r7, #8]
    332a:	4313      	orrs	r3, r2
    332c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
    332e:	687b      	ldr	r3, [r7, #4]
    3330:	68fa      	ldr	r2, [r7, #12]
    3332:	631a      	str	r2, [r3, #48]	; 0x30
    3334:	e026      	b.n	3384 <ADC_RegularChannelConfig+0x1b0>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
    3336:	687b      	ldr	r3, [r7, #4]
    3338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    333a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
    333c:	78ba      	ldrb	r2, [r7, #2]
    333e:	4613      	mov	r3, r2
    3340:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3344:	189b      	adds	r3, r3, r2
    3346:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
    334a:	f04f 021f 	mov.w	r2, #31
    334e:	fa02 f303 	lsl.w	r3, r2, r3
    3352:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
    3354:	68bb      	ldr	r3, [r7, #8]
    3356:	ea6f 0303 	mvn.w	r3, r3
    335a:	68fa      	ldr	r2, [r7, #12]
    335c:	4013      	ands	r3, r2
    335e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
    3360:	78f9      	ldrb	r1, [r7, #3]
    3362:	78ba      	ldrb	r2, [r7, #2]
    3364:	4613      	mov	r3, r2
    3366:	ea4f 0383 	mov.w	r3, r3, lsl #2
    336a:	189b      	adds	r3, r3, r2
    336c:	f1a3 0341 	sub.w	r3, r3, #65	; 0x41
    3370:	fa01 f303 	lsl.w	r3, r1, r3
    3374:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    3376:	68fa      	ldr	r2, [r7, #12]
    3378:	68bb      	ldr	r3, [r7, #8]
    337a:	4313      	orrs	r3, r2
    337c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
    337e:	687b      	ldr	r3, [r7, #4]
    3380:	68fa      	ldr	r2, [r7, #12]
    3382:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
    3384:	f107 0714 	add.w	r7, r7, #20
    3388:	46bd      	mov	sp, r7
    338a:	bc80      	pop	{r7}
    338c:	4770      	bx	lr
    338e:	bf00      	nop

00003390 <ADC_ExternalTrigConvCmd>:
  * @param  NewState: new state of the selected ADC external trigger start of conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    3390:	b480      	push	{r7}
    3392:	b083      	sub	sp, #12
    3394:	af00      	add	r7, sp, #0
    3396:	6078      	str	r0, [r7, #4]
    3398:	460b      	mov	r3, r1
    339a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    339c:	78fb      	ldrb	r3, [r7, #3]
    339e:	2b00      	cmp	r3, #0
    33a0:	d006      	beq.n	33b0 <ADC_ExternalTrigConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event */
    ADCx->CR2 |= CR2_EXTTRIG_Set;
    33a2:	687b      	ldr	r3, [r7, #4]
    33a4:	689b      	ldr	r3, [r3, #8]
    33a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
    33aa:	687b      	ldr	r3, [r7, #4]
    33ac:	609a      	str	r2, [r3, #8]
    33ae:	e005      	b.n	33bc <ADC_ExternalTrigConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event */
    ADCx->CR2 &= CR2_EXTTRIG_Reset;
    33b0:	687b      	ldr	r3, [r7, #4]
    33b2:	689b      	ldr	r3, [r3, #8]
    33b4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
    33b8:	687b      	ldr	r3, [r7, #4]
    33ba:	609a      	str	r2, [r3, #8]
  }
}
    33bc:	f107 070c 	add.w	r7, r7, #12
    33c0:	46bd      	mov	sp, r7
    33c2:	bc80      	pop	{r7}
    33c4:	4770      	bx	lr
    33c6:	bf00      	nop

000033c8 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
    33c8:	b480      	push	{r7}
    33ca:	b083      	sub	sp, #12
    33cc:	af00      	add	r7, sp, #0
    33ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
    33d0:	687b      	ldr	r3, [r7, #4]
    33d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    33d4:	b29b      	uxth	r3, r3
}
    33d6:	4618      	mov	r0, r3
    33d8:	f107 070c 	add.w	r7, r7, #12
    33dc:	46bd      	mov	sp, r7
    33de:	bc80      	pop	{r7}
    33e0:	4770      	bx	lr
    33e2:	bf00      	nop

000033e4 <ADC_GetDualModeConversionValue>:
/**
  * @brief  Returns the last ADC1 and ADC2 conversion result data in dual mode.
  * @retval The Data conversion value.
  */
uint32_t ADC_GetDualModeConversionValue(void)
{
    33e4:	b480      	push	{r7}
    33e6:	af00      	add	r7, sp, #0
  /* Return the dual mode conversion value */
  return (*(__IO uint32_t *) DR_ADDRESS);
    33e8:	f242 434c 	movw	r3, #9292	; 0x244c
    33ec:	f2c4 0301 	movt	r3, #16385	; 0x4001
    33f0:	681b      	ldr	r3, [r3, #0]
}
    33f2:	4618      	mov	r0, r3
    33f4:	46bd      	mov	sp, r7
    33f6:	bc80      	pop	{r7}
    33f8:	4770      	bx	lr
    33fa:	bf00      	nop

000033fc <ADC_AutoInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC auto injected conversion
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    33fc:	b480      	push	{r7}
    33fe:	b083      	sub	sp, #12
    3400:	af00      	add	r7, sp, #0
    3402:	6078      	str	r0, [r7, #4]
    3404:	460b      	mov	r3, r1
    3406:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3408:	78fb      	ldrb	r3, [r7, #3]
    340a:	2b00      	cmp	r3, #0
    340c:	d006      	beq.n	341c <ADC_AutoInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC automatic injected group conversion */
    ADCx->CR1 |= CR1_JAUTO_Set;
    340e:	687b      	ldr	r3, [r7, #4]
    3410:	685b      	ldr	r3, [r3, #4]
    3412:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
    3416:	687b      	ldr	r3, [r7, #4]
    3418:	605a      	str	r2, [r3, #4]
    341a:	e005      	b.n	3428 <ADC_AutoInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    ADCx->CR1 &= CR1_JAUTO_Reset;
    341c:	687b      	ldr	r3, [r7, #4]
    341e:	685b      	ldr	r3, [r3, #4]
    3420:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
    3424:	687b      	ldr	r3, [r7, #4]
    3426:	605a      	str	r2, [r3, #4]
  }
}
    3428:	f107 070c 	add.w	r7, r7, #12
    342c:	46bd      	mov	sp, r7
    342e:	bc80      	pop	{r7}
    3430:	4770      	bx	lr
    3432:	bf00      	nop

00003434 <ADC_InjectedDiscModeCmd>:
  *         on injected group channel.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    3434:	b480      	push	{r7}
    3436:	b083      	sub	sp, #12
    3438:	af00      	add	r7, sp, #0
    343a:	6078      	str	r0, [r7, #4]
    343c:	460b      	mov	r3, r1
    343e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    3440:	78fb      	ldrb	r3, [r7, #3]
    3442:	2b00      	cmp	r3, #0
    3444:	d006      	beq.n	3454 <ADC_InjectedDiscModeCmd+0x20>
  {
    /* Enable the selected ADC injected discontinuous mode */
    ADCx->CR1 |= CR1_JDISCEN_Set;
    3446:	687b      	ldr	r3, [r7, #4]
    3448:	685b      	ldr	r3, [r3, #4]
    344a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
    344e:	687b      	ldr	r3, [r7, #4]
    3450:	605a      	str	r2, [r3, #4]
    3452:	e005      	b.n	3460 <ADC_InjectedDiscModeCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    ADCx->CR1 &= CR1_JDISCEN_Reset;
    3454:	687b      	ldr	r3, [r7, #4]
    3456:	685b      	ldr	r3, [r3, #4]
    3458:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
    345c:	687b      	ldr	r3, [r7, #4]
    345e:	605a      	str	r2, [r3, #4]
  }
}
    3460:	f107 070c 	add.w	r7, r7, #12
    3464:	46bd      	mov	sp, r7
    3466:	bc80      	pop	{r7}
    3468:	4770      	bx	lr
    346a:	bf00      	nop

0000346c <ADC_ExternalTrigInjectedConvConfig>:
  *     @arg ADC_ExternalTrigInjecConv_None: Injected conversion started by software and not
  *                                          by external trigger (for ADC1, ADC2 and ADC3)
  * @retval None
  */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
    346c:	b480      	push	{r7}
    346e:	b085      	sub	sp, #20
    3470:	af00      	add	r7, sp, #0
    3472:	6078      	str	r0, [r7, #4]
    3474:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    3476:	f04f 0300 	mov.w	r3, #0
    347a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_EXT_INJEC_TRIG(ADC_ExternalTrigInjecConv));
  /* Get the old register value */
  tmpreg = ADCx->CR2;
    347c:	687b      	ldr	r3, [r7, #4]
    347e:	689b      	ldr	r3, [r3, #8]
    3480:	60fb      	str	r3, [r7, #12]
  /* Clear the old external event selection for injected group */
  tmpreg &= CR2_JEXTSEL_Reset;
    3482:	68fb      	ldr	r3, [r7, #12]
    3484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3488:	60fb      	str	r3, [r7, #12]
  /* Set the external event selection for injected group */
  tmpreg |= ADC_ExternalTrigInjecConv;
    348a:	68fa      	ldr	r2, [r7, #12]
    348c:	683b      	ldr	r3, [r7, #0]
    348e:	4313      	orrs	r3, r2
    3490:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR2 = tmpreg;
    3492:	687b      	ldr	r3, [r7, #4]
    3494:	68fa      	ldr	r2, [r7, #12]
    3496:	609a      	str	r2, [r3, #8]
}
    3498:	f107 0714 	add.w	r7, r7, #20
    349c:	46bd      	mov	sp, r7
    349e:	bc80      	pop	{r7}
    34a0:	4770      	bx	lr
    34a2:	bf00      	nop

000034a4 <ADC_ExternalTrigInjectedConvCmd>:
  *         injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    34a4:	b480      	push	{r7}
    34a6:	b083      	sub	sp, #12
    34a8:	af00      	add	r7, sp, #0
    34aa:	6078      	str	r0, [r7, #4]
    34ac:	460b      	mov	r3, r1
    34ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    34b0:	78fb      	ldrb	r3, [r7, #3]
    34b2:	2b00      	cmp	r3, #0
    34b4:	d006      	beq.n	34c4 <ADC_ExternalTrigInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC external event selection for injected group */
    ADCx->CR2 |= CR2_JEXTTRIG_Set;
    34b6:	687b      	ldr	r3, [r7, #4]
    34b8:	689b      	ldr	r3, [r3, #8]
    34ba:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
    34be:	687b      	ldr	r3, [r7, #4]
    34c0:	609a      	str	r2, [r3, #8]
    34c2:	e005      	b.n	34d0 <ADC_ExternalTrigInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC external event selection for injected group */
    ADCx->CR2 &= CR2_JEXTTRIG_Reset;
    34c4:	687b      	ldr	r3, [r7, #4]
    34c6:	689b      	ldr	r3, [r3, #8]
    34c8:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
    34cc:	687b      	ldr	r3, [r7, #4]
    34ce:	609a      	str	r2, [r3, #8]
  }
}
    34d0:	f107 070c 	add.w	r7, r7, #12
    34d4:	46bd      	mov	sp, r7
    34d6:	bc80      	pop	{r7}
    34d8:	4770      	bx	lr
    34da:	bf00      	nop

000034dc <ADC_SoftwareStartInjectedConvCmd>:
  * @param  NewState: new state of the selected ADC software start injected conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
    34dc:	b480      	push	{r7}
    34de:	b083      	sub	sp, #12
    34e0:	af00      	add	r7, sp, #0
    34e2:	6078      	str	r0, [r7, #4]
    34e4:	460b      	mov	r3, r1
    34e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    34e8:	78fb      	ldrb	r3, [r7, #3]
    34ea:	2b00      	cmp	r3, #0
    34ec:	d006      	beq.n	34fc <ADC_SoftwareStartInjectedConvCmd+0x20>
  {
    /* Enable the selected ADC conversion for injected group on external event and start the selected
       ADC injected conversion */
    ADCx->CR2 |= CR2_JEXTTRIG_JSWSTART_Set;
    34ee:	687b      	ldr	r3, [r7, #4]
    34f0:	689b      	ldr	r3, [r3, #8]
    34f2:	f443 1202 	orr.w	r2, r3, #2129920	; 0x208000
    34f6:	687b      	ldr	r3, [r7, #4]
    34f8:	609a      	str	r2, [r3, #8]
    34fa:	e005      	b.n	3508 <ADC_SoftwareStartInjectedConvCmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC conversion on external event for injected group and stop the selected
       ADC injected conversion */
    ADCx->CR2 &= CR2_JEXTTRIG_JSWSTART_Reset;
    34fc:	687b      	ldr	r3, [r7, #4]
    34fe:	689b      	ldr	r3, [r3, #8]
    3500:	f423 1202 	bic.w	r2, r3, #2129920	; 0x208000
    3504:	687b      	ldr	r3, [r7, #4]
    3506:	609a      	str	r2, [r3, #8]
  }
}
    3508:	f107 070c 	add.w	r7, r7, #12
    350c:	46bd      	mov	sp, r7
    350e:	bc80      	pop	{r7}
    3510:	4770      	bx	lr
    3512:	bf00      	nop

00003514 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
  * @brief  Gets the selected ADC Software start injected conversion Status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC software start injected conversion (SET or RESET).
  */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx)
{
    3514:	b480      	push	{r7}
    3516:	b085      	sub	sp, #20
    3518:	af00      	add	r7, sp, #0
    351a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
    351c:	f04f 0300 	mov.w	r3, #0
    3520:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of JSWSTART bit */
  if ((ADCx->CR2 & CR2_JSWSTART_Set) != (uint32_t)RESET)
    3522:	687b      	ldr	r3, [r7, #4]
    3524:	689b      	ldr	r3, [r3, #8]
    3526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
    352a:	2b00      	cmp	r3, #0
    352c:	d003      	beq.n	3536 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x22>
  {
    /* JSWSTART bit is set */
    bitstatus = SET;
    352e:	f04f 0301 	mov.w	r3, #1
    3532:	73fb      	strb	r3, [r7, #15]
    3534:	e002      	b.n	353c <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
  }
  else
  {
    /* JSWSTART bit is reset */
    bitstatus = RESET;
    3536:	f04f 0300 	mov.w	r3, #0
    353a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the JSWSTART bit status */
  return  bitstatus;
    353c:	7bfb      	ldrb	r3, [r7, #15]
}
    353e:	4618      	mov	r0, r3
    3540:	f107 0714 	add.w	r7, r7, #20
    3544:	46bd      	mov	sp, r7
    3546:	bc80      	pop	{r7}
    3548:	4770      	bx	lr
    354a:	bf00      	nop

0000354c <ADC_InjectedChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
    354c:	b480      	push	{r7}
    354e:	b087      	sub	sp, #28
    3550:	af00      	add	r7, sp, #0
    3552:	6078      	str	r0, [r7, #4]
    3554:	70f9      	strb	r1, [r7, #3]
    3556:	70ba      	strb	r2, [r7, #2]
    3558:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
    355a:	f04f 0300 	mov.w	r3, #0
    355e:	617b      	str	r3, [r7, #20]
    3560:	f04f 0300 	mov.w	r3, #0
    3564:	613b      	str	r3, [r7, #16]
    3566:	f04f 0300 	mov.w	r3, #0
    356a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_INJECTED_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
    356c:	78fb      	ldrb	r3, [r7, #3]
    356e:	2b09      	cmp	r3, #9
    3570:	d927      	bls.n	35c2 <ADC_InjectedChannelConfig+0x76>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
    3572:	687b      	ldr	r3, [r7, #4]
    3574:	68db      	ldr	r3, [r3, #12]
    3576:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3*(ADC_Channel - 10));
    3578:	78fa      	ldrb	r2, [r7, #3]
    357a:	4613      	mov	r3, r2
    357c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    3580:	189b      	adds	r3, r3, r2
    3582:	f1a3 031e 	sub.w	r3, r3, #30
    3586:	f04f 0207 	mov.w	r2, #7
    358a:	fa02 f303 	lsl.w	r3, r2, r3
    358e:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    3590:	693b      	ldr	r3, [r7, #16]
    3592:	ea6f 0303 	mvn.w	r3, r3
    3596:	697a      	ldr	r2, [r7, #20]
    3598:	4013      	ands	r3, r2
    359a:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3*(ADC_Channel - 10));
    359c:	7879      	ldrb	r1, [r7, #1]
    359e:	78fa      	ldrb	r2, [r7, #3]
    35a0:	4613      	mov	r3, r2
    35a2:	ea4f 0343 	mov.w	r3, r3, lsl #1
    35a6:	189b      	adds	r3, r3, r2
    35a8:	f1a3 031e 	sub.w	r3, r3, #30
    35ac:	fa01 f303 	lsl.w	r3, r1, r3
    35b0:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    35b2:	697a      	ldr	r2, [r7, #20]
    35b4:	693b      	ldr	r3, [r7, #16]
    35b6:	4313      	orrs	r3, r2
    35b8:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
    35ba:	687b      	ldr	r3, [r7, #4]
    35bc:	697a      	ldr	r2, [r7, #20]
    35be:	60da      	str	r2, [r3, #12]
    35c0:	e022      	b.n	3608 <ADC_InjectedChannelConfig+0xbc>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
    35c2:	687b      	ldr	r3, [r7, #4]
    35c4:	691b      	ldr	r3, [r3, #16]
    35c6:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
    35c8:	78fa      	ldrb	r2, [r7, #3]
    35ca:	4613      	mov	r3, r2
    35cc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    35d0:	189b      	adds	r3, r3, r2
    35d2:	f04f 0207 	mov.w	r2, #7
    35d6:	fa02 f303 	lsl.w	r3, r2, r3
    35da:	613b      	str	r3, [r7, #16]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
    35dc:	693b      	ldr	r3, [r7, #16]
    35de:	ea6f 0303 	mvn.w	r3, r3
    35e2:	697a      	ldr	r2, [r7, #20]
    35e4:	4013      	ands	r3, r2
    35e6:	617b      	str	r3, [r7, #20]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
    35e8:	7879      	ldrb	r1, [r7, #1]
    35ea:	78fa      	ldrb	r2, [r7, #3]
    35ec:	4613      	mov	r3, r2
    35ee:	ea4f 0343 	mov.w	r3, r3, lsl #1
    35f2:	189b      	adds	r3, r3, r2
    35f4:	fa01 f303 	lsl.w	r3, r1, r3
    35f8:	613b      	str	r3, [r7, #16]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
    35fa:	697a      	ldr	r2, [r7, #20]
    35fc:	693b      	ldr	r3, [r7, #16]
    35fe:	4313      	orrs	r3, r2
    3600:	617b      	str	r3, [r7, #20]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
    3602:	687b      	ldr	r3, [r7, #4]
    3604:	697a      	ldr	r2, [r7, #20]
    3606:	611a      	str	r2, [r3, #16]
  }
  /* Rank configuration */
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    3608:	687b      	ldr	r3, [r7, #4]
    360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    360c:	617b      	str	r3, [r7, #20]
  /* Get JL value: Number = JL+1 */
  tmpreg3 =  (tmpreg1 & JSQR_JL_Set)>> 20;
    360e:	697b      	ldr	r3, [r7, #20]
    3610:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    3614:	ea4f 5313 	mov.w	r3, r3, lsr #20
    3618:	60fb      	str	r3, [r7, #12]
  /* Calculate the mask to clear: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = JSQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    361a:	68fb      	ldr	r3, [r7, #12]
    361c:	b2db      	uxtb	r3, r3
    361e:	ea6f 0303 	mvn.w	r3, r3
    3622:	b2da      	uxtb	r2, r3
    3624:	78bb      	ldrb	r3, [r7, #2]
    3626:	18d3      	adds	r3, r2, r3
    3628:	b2db      	uxtb	r3, r3
    362a:	f103 0303 	add.w	r3, r3, #3
    362e:	b2db      	uxtb	r3, r3
    3630:	461a      	mov	r2, r3
    3632:	4613      	mov	r3, r2
    3634:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3638:	189b      	adds	r3, r3, r2
    363a:	f04f 021f 	mov.w	r2, #31
    363e:	fa02 f303 	lsl.w	r3, r2, r3
    3642:	613b      	str	r3, [r7, #16]
  /* Clear the old JSQx bits for the selected rank */
  tmpreg1 &= ~tmpreg2;
    3644:	693b      	ldr	r3, [r7, #16]
    3646:	ea6f 0303 	mvn.w	r3, r3
    364a:	697a      	ldr	r2, [r7, #20]
    364c:	4013      	ands	r3, r2
    364e:	617b      	str	r3, [r7, #20]
  /* Calculate the mask to set: ((Rank-1)+(4-JL-1)) */
  tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
    3650:	78f9      	ldrb	r1, [r7, #3]
    3652:	68fb      	ldr	r3, [r7, #12]
    3654:	b2db      	uxtb	r3, r3
    3656:	ea6f 0303 	mvn.w	r3, r3
    365a:	b2da      	uxtb	r2, r3
    365c:	78bb      	ldrb	r3, [r7, #2]
    365e:	18d3      	adds	r3, r2, r3
    3660:	b2db      	uxtb	r3, r3
    3662:	f103 0303 	add.w	r3, r3, #3
    3666:	b2db      	uxtb	r3, r3
    3668:	461a      	mov	r2, r3
    366a:	4613      	mov	r3, r2
    366c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3670:	189b      	adds	r3, r3, r2
    3672:	fa01 f303 	lsl.w	r3, r1, r3
    3676:	613b      	str	r3, [r7, #16]
  /* Set the JSQx bits for the selected rank */
  tmpreg1 |= tmpreg2;
    3678:	697a      	ldr	r2, [r7, #20]
    367a:	693b      	ldr	r3, [r7, #16]
    367c:	4313      	orrs	r3, r2
    367e:	617b      	str	r3, [r7, #20]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    3680:	687b      	ldr	r3, [r7, #4]
    3682:	697a      	ldr	r2, [r7, #20]
    3684:	639a      	str	r2, [r3, #56]	; 0x38
}
    3686:	f107 071c 	add.w	r7, r7, #28
    368a:	46bd      	mov	sp, r7
    368c:	bc80      	pop	{r7}
    368e:	4770      	bx	lr

00003690 <ADC_InjectedSequencerLengthConfig>:
  * @param  Length: The sequencer length. 
  *   This parameter must be a number between 1 to 4.
  * @retval None
  */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length)
{
    3690:	b480      	push	{r7}
    3692:	b085      	sub	sp, #20
    3694:	af00      	add	r7, sp, #0
    3696:	6078      	str	r0, [r7, #4]
    3698:	460b      	mov	r3, r1
    369a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg1 = 0;
    369c:	f04f 0300 	mov.w	r3, #0
    36a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg2 = 0;
    36a2:	f04f 0300 	mov.w	r3, #0
    36a6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_LENGTH(Length));
  
  /* Get the old register value */
  tmpreg1 = ADCx->JSQR;
    36a8:	687b      	ldr	r3, [r7, #4]
    36aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    36ac:	60fb      	str	r3, [r7, #12]
  /* Clear the old injected sequnence lenght JL bits */
  tmpreg1 &= JSQR_JL_Reset;
    36ae:	68fb      	ldr	r3, [r7, #12]
    36b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    36b4:	60fb      	str	r3, [r7, #12]
  /* Set the injected sequnence lenght JL bits */
  tmpreg2 = Length - 1; 
    36b6:	78fb      	ldrb	r3, [r7, #3]
    36b8:	f103 33ff 	add.w	r3, r3, #4294967295
    36bc:	60bb      	str	r3, [r7, #8]
  tmpreg1 |= tmpreg2 << 20;
    36be:	68bb      	ldr	r3, [r7, #8]
    36c0:	ea4f 5303 	mov.w	r3, r3, lsl #20
    36c4:	68fa      	ldr	r2, [r7, #12]
    36c6:	4313      	orrs	r3, r2
    36c8:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->JSQR = tmpreg1;
    36ca:	687b      	ldr	r3, [r7, #4]
    36cc:	68fa      	ldr	r2, [r7, #12]
    36ce:	639a      	str	r2, [r3, #56]	; 0x38
}
    36d0:	f107 0714 	add.w	r7, r7, #20
    36d4:	46bd      	mov	sp, r7
    36d6:	bc80      	pop	{r7}
    36d8:	4770      	bx	lr
    36da:	bf00      	nop

000036dc <ADC_SetInjectedOffset>:
  * @param  Offset: the offset value for the selected ADC injected channel
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
    36dc:	b480      	push	{r7}
    36de:	b085      	sub	sp, #20
    36e0:	af00      	add	r7, sp, #0
    36e2:	6078      	str	r0, [r7, #4]
    36e4:	4613      	mov	r3, r2
    36e6:	460a      	mov	r2, r1
    36e8:	70fa      	strb	r2, [r7, #3]
    36ea:	803b      	strh	r3, [r7, #0]
  __IO uint32_t tmp = 0;
    36ec:	f04f 0300 	mov.w	r3, #0
    36f0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));
  assert_param(IS_ADC_OFFSET(Offset));  
  
  tmp = (uint32_t)ADCx;
    36f2:	687b      	ldr	r3, [r7, #4]
    36f4:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel;
    36f6:	78fa      	ldrb	r2, [r7, #3]
    36f8:	68fb      	ldr	r3, [r7, #12]
    36fa:	18d3      	adds	r3, r2, r3
    36fc:	60fb      	str	r3, [r7, #12]
  
  /* Set the selected injected channel data offset */
  *(__IO uint32_t *) tmp = (uint32_t)Offset;
    36fe:	68fb      	ldr	r3, [r7, #12]
    3700:	883a      	ldrh	r2, [r7, #0]
    3702:	601a      	str	r2, [r3, #0]
}
    3704:	f107 0714 	add.w	r7, r7, #20
    3708:	46bd      	mov	sp, r7
    370a:	bc80      	pop	{r7}
    370c:	4770      	bx	lr
    370e:	bf00      	nop

00003710 <ADC_GetInjectedConversionValue>:
  *     @arg ADC_InjectedChannel_3: Injected Channel3 selected
  *     @arg ADC_InjectedChannel_4: Injected Channel4 selected
  * @retval The Data conversion value.
  */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel)
{
    3710:	b480      	push	{r7}
    3712:	b085      	sub	sp, #20
    3714:	af00      	add	r7, sp, #0
    3716:	6078      	str	r0, [r7, #4]
    3718:	460b      	mov	r3, r1
    371a:	70fb      	strb	r3, [r7, #3]
  __IO uint32_t tmp = 0;
    371c:	f04f 0300 	mov.w	r3, #0
    3720:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_INJECTED_CHANNEL(ADC_InjectedChannel));

  tmp = (uint32_t)ADCx;
    3722:	687b      	ldr	r3, [r7, #4]
    3724:	60fb      	str	r3, [r7, #12]
  tmp += ADC_InjectedChannel + JDR_Offset;
    3726:	78fa      	ldrb	r2, [r7, #3]
    3728:	68fb      	ldr	r3, [r7, #12]
    372a:	18d3      	adds	r3, r2, r3
    372c:	f103 0328 	add.w	r3, r3, #40	; 0x28
    3730:	60fb      	str	r3, [r7, #12]
  
  /* Returns the selected injected channel conversion data value */
  return (uint16_t) (*(__IO uint32_t*)  tmp);   
    3732:	68fb      	ldr	r3, [r7, #12]
    3734:	681b      	ldr	r3, [r3, #0]
    3736:	b29b      	uxth	r3, r3
}
    3738:	4618      	mov	r0, r3
    373a:	f107 0714 	add.w	r7, r7, #20
    373e:	46bd      	mov	sp, r7
    3740:	bc80      	pop	{r7}
    3742:	4770      	bx	lr

00003744 <ADC_AnalogWatchdogCmd>:
  *     @arg ADC_AnalogWatchdog_AllRegAllInjecEnable: Analog watchdog on all regular and injected channels
  *     @arg ADC_AnalogWatchdog_None: No channel guarded by the analog watchdog
  * @retval None	  
  */
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog)
{
    3744:	b480      	push	{r7}
    3746:	b085      	sub	sp, #20
    3748:	af00      	add	r7, sp, #0
    374a:	6078      	str	r0, [r7, #4]
    374c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
    374e:	f04f 0300 	mov.w	r3, #0
    3752:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_ANALOG_WATCHDOG(ADC_AnalogWatchdog));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    3754:	687b      	ldr	r3, [r7, #4]
    3756:	685b      	ldr	r3, [r3, #4]
    3758:	60fb      	str	r3, [r7, #12]
  /* Clear AWDEN, AWDENJ and AWDSGL bits */
  tmpreg &= CR1_AWDMode_Reset;
    375a:	68fb      	ldr	r3, [r7, #12]
    375c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
    3760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3764:	60fb      	str	r3, [r7, #12]
  /* Set the analog watchdog enable mode */
  tmpreg |= ADC_AnalogWatchdog;
    3766:	68fa      	ldr	r2, [r7, #12]
    3768:	683b      	ldr	r3, [r7, #0]
    376a:	4313      	orrs	r3, r2
    376c:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    376e:	687b      	ldr	r3, [r7, #4]
    3770:	68fa      	ldr	r2, [r7, #12]
    3772:	605a      	str	r2, [r3, #4]
}
    3774:	f107 0714 	add.w	r7, r7, #20
    3778:	46bd      	mov	sp, r7
    377a:	bc80      	pop	{r7}
    377c:	4770      	bx	lr
    377e:	bf00      	nop

00003780 <ADC_AnalogWatchdogThresholdsConfig>:
  *   This parameter must be a 12bit value.
  * @retval None
  */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
    3780:	b480      	push	{r7}
    3782:	b083      	sub	sp, #12
    3784:	af00      	add	r7, sp, #0
    3786:	6078      	str	r0, [r7, #4]
    3788:	4613      	mov	r3, r2
    378a:	460a      	mov	r2, r1
    378c:	807a      	strh	r2, [r7, #2]
    378e:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_THRESHOLD(HighThreshold));
  assert_param(IS_ADC_THRESHOLD(LowThreshold));
  /* Set the ADCx high threshold */
  ADCx->HTR = HighThreshold;
    3790:	887a      	ldrh	r2, [r7, #2]
    3792:	687b      	ldr	r3, [r7, #4]
    3794:	625a      	str	r2, [r3, #36]	; 0x24
  /* Set the ADCx low threshold */
  ADCx->LTR = LowThreshold;
    3796:	883a      	ldrh	r2, [r7, #0]
    3798:	687b      	ldr	r3, [r7, #4]
    379a:	629a      	str	r2, [r3, #40]	; 0x28
}
    379c:	f107 070c 	add.w	r7, r7, #12
    37a0:	46bd      	mov	sp, r7
    37a2:	bc80      	pop	{r7}
    37a4:	4770      	bx	lr
    37a6:	bf00      	nop

000037a8 <ADC_AnalogWatchdogSingleChannelConfig>:
  *     @arg ADC_Channel_16: ADC Channel16 selected
  *     @arg ADC_Channel_17: ADC Channel17 selected
  * @retval None
  */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel)
{
    37a8:	b480      	push	{r7}
    37aa:	b085      	sub	sp, #20
    37ac:	af00      	add	r7, sp, #0
    37ae:	6078      	str	r0, [r7, #4]
    37b0:	460b      	mov	r3, r1
    37b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpreg = 0;
    37b4:	f04f 0300 	mov.w	r3, #0
    37b8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  /* Get the old register value */
  tmpreg = ADCx->CR1;
    37ba:	687b      	ldr	r3, [r7, #4]
    37bc:	685b      	ldr	r3, [r3, #4]
    37be:	60fb      	str	r3, [r7, #12]
  /* Clear the Analog watchdog channel select bits */
  tmpreg &= CR1_AWDCH_Reset;
    37c0:	68fb      	ldr	r3, [r7, #12]
    37c2:	f023 031f 	bic.w	r3, r3, #31
    37c6:	60fb      	str	r3, [r7, #12]
  /* Set the Analog watchdog channel */
  tmpreg |= ADC_Channel;
    37c8:	78fb      	ldrb	r3, [r7, #3]
    37ca:	68fa      	ldr	r2, [r7, #12]
    37cc:	4313      	orrs	r3, r2
    37ce:	60fb      	str	r3, [r7, #12]
  /* Store the new register value */
  ADCx->CR1 = tmpreg;
    37d0:	687b      	ldr	r3, [r7, #4]
    37d2:	68fa      	ldr	r2, [r7, #12]
    37d4:	605a      	str	r2, [r3, #4]
}
    37d6:	f107 0714 	add.w	r7, r7, #20
    37da:	46bd      	mov	sp, r7
    37dc:	bc80      	pop	{r7}
    37de:	4770      	bx	lr

000037e0 <ADC_TempSensorVrefintCmd>:
  * @param  NewState: new state of the temperature sensor.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_TempSensorVrefintCmd(FunctionalState NewState)
{
    37e0:	b480      	push	{r7}
    37e2:	b083      	sub	sp, #12
    37e4:	af00      	add	r7, sp, #0
    37e6:	4603      	mov	r3, r0
    37e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    37ea:	79fb      	ldrb	r3, [r7, #7]
    37ec:	2b00      	cmp	r3, #0
    37ee:	d00c      	beq.n	380a <ADC_TempSensorVrefintCmd+0x2a>
  {
    /* Enable the temperature sensor and Vrefint channel*/
    ADC1->CR2 |= CR2_TSVREFE_Set;
    37f0:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    37f4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    37f8:	f44f 5210 	mov.w	r2, #9216	; 0x2400
    37fc:	f2c4 0201 	movt	r2, #16385	; 0x4001
    3800:	6892      	ldr	r2, [r2, #8]
    3802:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
    3806:	609a      	str	r2, [r3, #8]
    3808:	e00b      	b.n	3822 <ADC_TempSensorVrefintCmd+0x42>
  }
  else
  {
    /* Disable the temperature sensor and Vrefint channel*/
    ADC1->CR2 &= CR2_TSVREFE_Reset;
    380a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    380e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3812:	f44f 5210 	mov.w	r2, #9216	; 0x2400
    3816:	f2c4 0201 	movt	r2, #16385	; 0x4001
    381a:	6892      	ldr	r2, [r2, #8]
    381c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    3820:	609a      	str	r2, [r3, #8]
  }
}
    3822:	f107 070c 	add.w	r7, r7, #12
    3826:	46bd      	mov	sp, r7
    3828:	bc80      	pop	{r7}
    382a:	4770      	bx	lr

0000382c <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    382c:	b480      	push	{r7}
    382e:	b085      	sub	sp, #20
    3830:	af00      	add	r7, sp, #0
    3832:	6078      	str	r0, [r7, #4]
    3834:	460b      	mov	r3, r1
    3836:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
    3838:	f04f 0300 	mov.w	r3, #0
    383c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
    383e:	687b      	ldr	r3, [r7, #4]
    3840:	681a      	ldr	r2, [r3, #0]
    3842:	78fb      	ldrb	r3, [r7, #3]
    3844:	4013      	ands	r3, r2
    3846:	2b00      	cmp	r3, #0
    3848:	d003      	beq.n	3852 <ADC_GetFlagStatus+0x26>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
    384a:	f04f 0301 	mov.w	r3, #1
    384e:	73fb      	strb	r3, [r7, #15]
    3850:	e002      	b.n	3858 <ADC_GetFlagStatus+0x2c>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
    3852:	f04f 0300 	mov.w	r3, #0
    3856:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
    3858:	7bfb      	ldrb	r3, [r7, #15]
}
    385a:	4618      	mov	r0, r3
    385c:	f107 0714 	add.w	r7, r7, #20
    3860:	46bd      	mov	sp, r7
    3862:	bc80      	pop	{r7}
    3864:	4770      	bx	lr
    3866:	bf00      	nop

00003868 <ADC_ClearFlag>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval None
  */
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
    3868:	b480      	push	{r7}
    386a:	b083      	sub	sp, #12
    386c:	af00      	add	r7, sp, #0
    386e:	6078      	str	r0, [r7, #4]
    3870:	460b      	mov	r3, r1
    3872:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CLEAR_FLAG(ADC_FLAG));
  /* Clear the selected ADC flags */
  ADCx->SR = ~(uint32_t)ADC_FLAG;
    3874:	78fb      	ldrb	r3, [r7, #3]
    3876:	ea6f 0203 	mvn.w	r2, r3
    387a:	687b      	ldr	r3, [r7, #4]
    387c:	601a      	str	r2, [r3, #0]
}
    387e:	f107 070c 	add.w	r7, r7, #12
    3882:	46bd      	mov	sp, r7
    3884:	bc80      	pop	{r7}
    3886:	4770      	bx	lr

00003888 <ADC_GetITStatus>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval The new state of ADC_IT (SET or RESET).
  */
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    3888:	b480      	push	{r7}
    388a:	b087      	sub	sp, #28
    388c:	af00      	add	r7, sp, #0
    388e:	6078      	str	r0, [r7, #4]
    3890:	460b      	mov	r3, r1
    3892:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;
    3894:	f04f 0300 	mov.w	r3, #0
    3898:	75fb      	strb	r3, [r7, #23]
  uint32_t itmask = 0, enablestatus = 0;
    389a:	f04f 0300 	mov.w	r3, #0
    389e:	613b      	str	r3, [r7, #16]
    38a0:	f04f 0300 	mov.w	r3, #0
    38a4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = ADC_IT >> 8;
    38a6:	887b      	ldrh	r3, [r7, #2]
    38a8:	ea4f 2313 	mov.w	r3, r3, lsr #8
    38ac:	b29b      	uxth	r3, r3
    38ae:	613b      	str	r3, [r7, #16]
  /* Get the ADC_IT enable bit status */
  enablestatus = (ADCx->CR1 & (uint8_t)ADC_IT) ;
    38b0:	687b      	ldr	r3, [r7, #4]
    38b2:	685a      	ldr	r2, [r3, #4]
    38b4:	887b      	ldrh	r3, [r7, #2]
    38b6:	b2db      	uxtb	r3, r3
    38b8:	4013      	ands	r3, r2
    38ba:	60fb      	str	r3, [r7, #12]
  /* Check the status of the specified ADC interrupt */
  if (((ADCx->SR & itmask) != (uint32_t)RESET) && enablestatus)
    38bc:	687b      	ldr	r3, [r7, #4]
    38be:	681a      	ldr	r2, [r3, #0]
    38c0:	693b      	ldr	r3, [r7, #16]
    38c2:	4013      	ands	r3, r2
    38c4:	2b00      	cmp	r3, #0
    38c6:	d006      	beq.n	38d6 <ADC_GetITStatus+0x4e>
    38c8:	68fb      	ldr	r3, [r7, #12]
    38ca:	2b00      	cmp	r3, #0
    38cc:	d003      	beq.n	38d6 <ADC_GetITStatus+0x4e>
  {
    /* ADC_IT is set */
    bitstatus = SET;
    38ce:	f04f 0301 	mov.w	r3, #1
    38d2:	75fb      	strb	r3, [r7, #23]
    38d4:	e002      	b.n	38dc <ADC_GetITStatus+0x54>
  }
  else
  {
    /* ADC_IT is reset */
    bitstatus = RESET;
    38d6:	f04f 0300 	mov.w	r3, #0
    38da:	75fb      	strb	r3, [r7, #23]
  }
  /* Return the ADC_IT status */
  return  bitstatus;
    38dc:	7dfb      	ldrb	r3, [r7, #23]
}
    38de:	4618      	mov	r0, r3
    38e0:	f107 071c 	add.w	r7, r7, #28
    38e4:	46bd      	mov	sp, r7
    38e6:	bc80      	pop	{r7}
    38e8:	4770      	bx	lr
    38ea:	bf00      	nop

000038ec <ADC_ClearITPendingBit>:
  *     @arg ADC_IT_AWD: Analog watchdog interrupt mask
  *     @arg ADC_IT_JEOC: End of injected conversion interrupt mask
  * @retval None
  */
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT)
{
    38ec:	b480      	push	{r7}
    38ee:	b085      	sub	sp, #20
    38f0:	af00      	add	r7, sp, #0
    38f2:	6078      	str	r0, [r7, #4]
    38f4:	460b      	mov	r3, r1
    38f6:	807b      	strh	r3, [r7, #2]
  uint8_t itmask = 0;
    38f8:	f04f 0300 	mov.w	r3, #0
    38fc:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_IT(ADC_IT));
  /* Get the ADC IT index */
  itmask = (uint8_t)(ADC_IT >> 8);
    38fe:	887b      	ldrh	r3, [r7, #2]
    3900:	ea4f 2313 	mov.w	r3, r3, lsr #8
    3904:	b29b      	uxth	r3, r3
    3906:	73fb      	strb	r3, [r7, #15]
  /* Clear the selected ADC interrupt pending bits */
  ADCx->SR = ~(uint32_t)itmask;
    3908:	7bfb      	ldrb	r3, [r7, #15]
    390a:	ea6f 0203 	mvn.w	r2, r3
    390e:	687b      	ldr	r3, [r7, #4]
    3910:	601a      	str	r2, [r3, #0]
}
    3912:	f107 0714 	add.w	r7, r7, #20
    3916:	46bd      	mov	sp, r7
    3918:	bc80      	pop	{r7}
    391a:	4770      	bx	lr

0000391c <TIM_DeInit>:
  * @brief  Deinitializes the TIMx peripheral registers to their default reset values.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval None
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
    391c:	b580      	push	{r7, lr}
    391e:	b082      	sub	sp, #8
    3920:	af00      	add	r7, sp, #0
    3922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
 
  if (TIMx == TIM1)
    3924:	687a      	ldr	r2, [r7, #4]
    3926:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    392a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    392e:	429a      	cmp	r2, r3
    3930:	d10c      	bne.n	394c <TIM_DeInit+0x30>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    3932:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3936:	f04f 0101 	mov.w	r1, #1
    393a:	f7fd ff95 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
    393e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    3942:	f04f 0100 	mov.w	r1, #0
    3946:	f7fd ff8f 	bl	1868 <RCC_APB2PeriphResetCmd>
    394a:	e13b      	b.n	3bc4 <TIM_DeInit+0x2a8>
  }     
  else if (TIMx == TIM2)
    394c:	687b      	ldr	r3, [r7, #4]
    394e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    3952:	d10c      	bne.n	396e <TIM_DeInit+0x52>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    3954:	f04f 0001 	mov.w	r0, #1
    3958:	f04f 0101 	mov.w	r1, #1
    395c:	f7fd ffae 	bl	18bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    3960:	f04f 0001 	mov.w	r0, #1
    3964:	f04f 0100 	mov.w	r1, #0
    3968:	f7fd ffa8 	bl	18bc <RCC_APB1PeriphResetCmd>
    396c:	e12a      	b.n	3bc4 <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM3)
    396e:	687a      	ldr	r2, [r7, #4]
    3970:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3974:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3978:	429a      	cmp	r2, r3
    397a:	d10c      	bne.n	3996 <TIM_DeInit+0x7a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    397c:	f04f 0002 	mov.w	r0, #2
    3980:	f04f 0101 	mov.w	r1, #1
    3984:	f7fd ff9a 	bl	18bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    3988:	f04f 0002 	mov.w	r0, #2
    398c:	f04f 0100 	mov.w	r1, #0
    3990:	f7fd ff94 	bl	18bc <RCC_APB1PeriphResetCmd>
    3994:	e116      	b.n	3bc4 <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM4)
    3996:	687a      	ldr	r2, [r7, #4]
    3998:	f44f 6300 	mov.w	r3, #2048	; 0x800
    399c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    39a0:	429a      	cmp	r2, r3
    39a2:	d10c      	bne.n	39be <TIM_DeInit+0xa2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, ENABLE);
    39a4:	f04f 0004 	mov.w	r0, #4
    39a8:	f04f 0101 	mov.w	r1, #1
    39ac:	f7fd ff86 	bl	18bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM4, DISABLE);
    39b0:	f04f 0004 	mov.w	r0, #4
    39b4:	f04f 0100 	mov.w	r1, #0
    39b8:	f7fd ff80 	bl	18bc <RCC_APB1PeriphResetCmd>
    39bc:	e102      	b.n	3bc4 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM5)
    39be:	687a      	ldr	r2, [r7, #4]
    39c0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    39c4:	f2c4 0300 	movt	r3, #16384	; 0x4000
    39c8:	429a      	cmp	r2, r3
    39ca:	d10c      	bne.n	39e6 <TIM_DeInit+0xca>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, ENABLE);
    39cc:	f04f 0008 	mov.w	r0, #8
    39d0:	f04f 0101 	mov.w	r1, #1
    39d4:	f7fd ff72 	bl	18bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM5, DISABLE);
    39d8:	f04f 0008 	mov.w	r0, #8
    39dc:	f04f 0100 	mov.w	r1, #0
    39e0:	f7fd ff6c 	bl	18bc <RCC_APB1PeriphResetCmd>
    39e4:	e0ee      	b.n	3bc4 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM6)
    39e6:	687a      	ldr	r2, [r7, #4]
    39e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    39ec:	f2c4 0300 	movt	r3, #16384	; 0x4000
    39f0:	429a      	cmp	r2, r3
    39f2:	d10c      	bne.n	3a0e <TIM_DeInit+0xf2>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    39f4:	f04f 0010 	mov.w	r0, #16
    39f8:	f04f 0101 	mov.w	r1, #1
    39fc:	f7fd ff5e 	bl	18bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
    3a00:	f04f 0010 	mov.w	r0, #16
    3a04:	f04f 0100 	mov.w	r1, #0
    3a08:	f7fd ff58 	bl	18bc <RCC_APB1PeriphResetCmd>
    3a0c:	e0da      	b.n	3bc4 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM7)
    3a0e:	687a      	ldr	r2, [r7, #4]
    3a10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    3a14:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3a18:	429a      	cmp	r2, r3
    3a1a:	d10c      	bne.n	3a36 <TIM_DeInit+0x11a>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, ENABLE);
    3a1c:	f04f 0020 	mov.w	r0, #32
    3a20:	f04f 0101 	mov.w	r1, #1
    3a24:	f7fd ff4a 	bl	18bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM7, DISABLE);
    3a28:	f04f 0020 	mov.w	r0, #32
    3a2c:	f04f 0100 	mov.w	r1, #0
    3a30:	f7fd ff44 	bl	18bc <RCC_APB1PeriphResetCmd>
    3a34:	e0c6      	b.n	3bc4 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM8)
    3a36:	687a      	ldr	r2, [r7, #4]
    3a38:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    3a3c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3a40:	429a      	cmp	r2, r3
    3a42:	d10c      	bne.n	3a5e <TIM_DeInit+0x142>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, ENABLE);
    3a44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    3a48:	f04f 0101 	mov.w	r1, #1
    3a4c:	f7fd ff0c 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM8, DISABLE);
    3a50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    3a54:	f04f 0100 	mov.w	r1, #0
    3a58:	f7fd ff06 	bl	1868 <RCC_APB2PeriphResetCmd>
    3a5c:	e0b2      	b.n	3bc4 <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM9)
    3a5e:	687a      	ldr	r2, [r7, #4]
    3a60:	f44f 4398 	mov.w	r3, #19456	; 0x4c00
    3a64:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3a68:	429a      	cmp	r2, r3
    3a6a:	d10c      	bne.n	3a86 <TIM_DeInit+0x16a>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, ENABLE);
    3a6c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    3a70:	f04f 0101 	mov.w	r1, #1
    3a74:	f7fd fef8 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM9, DISABLE);  
    3a78:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    3a7c:	f04f 0100 	mov.w	r1, #0
    3a80:	f7fd fef2 	bl	1868 <RCC_APB2PeriphResetCmd>
    3a84:	e09e      	b.n	3bc4 <TIM_DeInit+0x2a8>
   }  
  else if (TIMx == TIM10)
    3a86:	687a      	ldr	r2, [r7, #4]
    3a88:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
    3a8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3a90:	429a      	cmp	r2, r3
    3a92:	d10c      	bne.n	3aae <TIM_DeInit+0x192>
  {      
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, ENABLE);
    3a94:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3a98:	f04f 0101 	mov.w	r1, #1
    3a9c:	f7fd fee4 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM10, DISABLE);  
    3aa0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    3aa4:	f04f 0100 	mov.w	r1, #0
    3aa8:	f7fd fede 	bl	1868 <RCC_APB2PeriphResetCmd>
    3aac:	e08a      	b.n	3bc4 <TIM_DeInit+0x2a8>
  }  
  else if (TIMx == TIM11) 
    3aae:	687a      	ldr	r2, [r7, #4]
    3ab0:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
    3ab4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3ab8:	429a      	cmp	r2, r3
    3aba:	d10c      	bne.n	3ad6 <TIM_DeInit+0x1ba>
  {     
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, ENABLE);
    3abc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    3ac0:	f04f 0101 	mov.w	r1, #1
    3ac4:	f7fd fed0 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM11, DISABLE);  
    3ac8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    3acc:	f04f 0100 	mov.w	r1, #0
    3ad0:	f7fd feca 	bl	1868 <RCC_APB2PeriphResetCmd>
    3ad4:	e076      	b.n	3bc4 <TIM_DeInit+0x2a8>
  }  
  else if (TIMx == TIM12)
    3ad6:	687a      	ldr	r2, [r7, #4]
    3ad8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    3adc:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3ae0:	429a      	cmp	r2, r3
    3ae2:	d10c      	bne.n	3afe <TIM_DeInit+0x1e2>
  {      
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, ENABLE);
    3ae4:	f04f 0040 	mov.w	r0, #64	; 0x40
    3ae8:	f04f 0101 	mov.w	r1, #1
    3aec:	f7fd fee6 	bl	18bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM12, DISABLE);  
    3af0:	f04f 0040 	mov.w	r0, #64	; 0x40
    3af4:	f04f 0100 	mov.w	r1, #0
    3af8:	f7fd fee0 	bl	18bc <RCC_APB1PeriphResetCmd>
    3afc:	e062      	b.n	3bc4 <TIM_DeInit+0x2a8>
  }  
  else if (TIMx == TIM13) 
    3afe:	687a      	ldr	r2, [r7, #4]
    3b00:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
    3b04:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3b08:	429a      	cmp	r2, r3
    3b0a:	d10c      	bne.n	3b26 <TIM_DeInit+0x20a>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, ENABLE);
    3b0c:	f04f 0080 	mov.w	r0, #128	; 0x80
    3b10:	f04f 0101 	mov.w	r1, #1
    3b14:	f7fd fed2 	bl	18bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM13, DISABLE);  
    3b18:	f04f 0080 	mov.w	r0, #128	; 0x80
    3b1c:	f04f 0100 	mov.w	r1, #0
    3b20:	f7fd fecc 	bl	18bc <RCC_APB1PeriphResetCmd>
    3b24:	e04e      	b.n	3bc4 <TIM_DeInit+0x2a8>
  }
  else if (TIMx == TIM14) 
    3b26:	687a      	ldr	r2, [r7, #4]
    3b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    3b2c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3b30:	429a      	cmp	r2, r3
    3b32:	d10c      	bne.n	3b4e <TIM_DeInit+0x232>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
    3b34:	f44f 7080 	mov.w	r0, #256	; 0x100
    3b38:	f04f 0101 	mov.w	r1, #1
    3b3c:	f7fd febe 	bl	18bc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
    3b40:	f44f 7080 	mov.w	r0, #256	; 0x100
    3b44:	f04f 0100 	mov.w	r1, #0
    3b48:	f7fd feb8 	bl	18bc <RCC_APB1PeriphResetCmd>
    3b4c:	e03a      	b.n	3bc4 <TIM_DeInit+0x2a8>
  }        
  else if (TIMx == TIM15)
    3b4e:	687a      	ldr	r2, [r7, #4]
    3b50:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3b54:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3b58:	429a      	cmp	r2, r3
    3b5a:	d10c      	bne.n	3b76 <TIM_DeInit+0x25a>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    3b5c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3b60:	f04f 0101 	mov.w	r1, #1
    3b64:	f7fd fe80 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
    3b68:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3b6c:	f04f 0100 	mov.w	r1, #0
    3b70:	f7fd fe7a 	bl	1868 <RCC_APB2PeriphResetCmd>
    3b74:	e026      	b.n	3bc4 <TIM_DeInit+0x2a8>
  } 
  else if (TIMx == TIM16)
    3b76:	687a      	ldr	r2, [r7, #4]
    3b78:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    3b7c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3b80:	429a      	cmp	r2, r3
    3b82:	d10c      	bne.n	3b9e <TIM_DeInit+0x282>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    3b84:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3b88:	f04f 0101 	mov.w	r1, #1
    3b8c:	f7fd fe6c 	bl	1868 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
    3b90:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3b94:	f04f 0100 	mov.w	r1, #0
    3b98:	f7fd fe66 	bl	1868 <RCC_APB2PeriphResetCmd>
    3b9c:	e012      	b.n	3bc4 <TIM_DeInit+0x2a8>
  } 
  else
  {
    if (TIMx == TIM17)
    3b9e:	687a      	ldr	r2, [r7, #4]
    3ba0:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    3ba4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3ba8:	429a      	cmp	r2, r3
    3baa:	d10b      	bne.n	3bc4 <TIM_DeInit+0x2a8>
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
    3bac:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3bb0:	f04f 0101 	mov.w	r1, #1
    3bb4:	f7fd fe58 	bl	1868 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    3bb8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    3bbc:	f04f 0100 	mov.w	r1, #0
    3bc0:	f7fd fe52 	bl	1868 <RCC_APB2PeriphResetCmd>
    }  
  }
}
    3bc4:	f107 0708 	add.w	r7, r7, #8
    3bc8:	46bd      	mov	sp, r7
    3bca:	bd80      	pop	{r7, pc}

00003bcc <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    3bcc:	b480      	push	{r7}
    3bce:	b085      	sub	sp, #20
    3bd0:	af00      	add	r7, sp, #0
    3bd2:	6078      	str	r0, [r7, #4]
    3bd4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
    3bd6:	f04f 0300 	mov.w	r3, #0
    3bda:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
    3bdc:	687b      	ldr	r3, [r7, #4]
    3bde:	881b      	ldrh	r3, [r3, #0]
    3be0:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
    3be2:	687a      	ldr	r2, [r7, #4]
    3be4:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    3be8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3bec:	429a      	cmp	r2, r3
    3bee:	d01f      	beq.n	3c30 <TIM_TimeBaseInit+0x64>
    3bf0:	687a      	ldr	r2, [r7, #4]
    3bf2:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    3bf6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3bfa:	429a      	cmp	r2, r3
    3bfc:	d018      	beq.n	3c30 <TIM_TimeBaseInit+0x64>
    3bfe:	687b      	ldr	r3, [r7, #4]
    3c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    3c04:	d014      	beq.n	3c30 <TIM_TimeBaseInit+0x64>
    3c06:	687a      	ldr	r2, [r7, #4]
    3c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3c0c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3c10:	429a      	cmp	r2, r3
    3c12:	d00d      	beq.n	3c30 <TIM_TimeBaseInit+0x64>
    3c14:	687a      	ldr	r2, [r7, #4]
    3c16:	f44f 6300 	mov.w	r3, #2048	; 0x800
    3c1a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3c1e:	429a      	cmp	r2, r3
    3c20:	d006      	beq.n	3c30 <TIM_TimeBaseInit+0x64>
     (TIMx == TIM4) || (TIMx == TIM5)) 
    3c22:	687a      	ldr	r2, [r7, #4]
    3c24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    3c28:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3c2c:	429a      	cmp	r2, r3
    3c2e:	d108      	bne.n	3c42 <TIM_TimeBaseInit+0x76>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    3c30:	89fb      	ldrh	r3, [r7, #14]
    3c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3c36:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
    3c38:	683b      	ldr	r3, [r7, #0]
    3c3a:	885a      	ldrh	r2, [r3, #2]
    3c3c:	89fb      	ldrh	r3, [r7, #14]
    3c3e:	4313      	orrs	r3, r2
    3c40:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
    3c42:	687a      	ldr	r2, [r7, #4]
    3c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    3c48:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3c4c:	429a      	cmp	r2, r3
    3c4e:	d00f      	beq.n	3c70 <TIM_TimeBaseInit+0xa4>
    3c50:	687a      	ldr	r2, [r7, #4]
    3c52:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    3c56:	f2c4 0300 	movt	r3, #16384	; 0x4000
    3c5a:	429a      	cmp	r2, r3
    3c5c:	d008      	beq.n	3c70 <TIM_TimeBaseInit+0xa4>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    3c5e:	89fb      	ldrh	r3, [r7, #14]
    3c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3c64:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
    3c66:	683b      	ldr	r3, [r7, #0]
    3c68:	88da      	ldrh	r2, [r3, #6]
    3c6a:	89fb      	ldrh	r3, [r7, #14]
    3c6c:	4313      	orrs	r3, r2
    3c6e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
    3c70:	687b      	ldr	r3, [r7, #4]
    3c72:	89fa      	ldrh	r2, [r7, #14]
    3c74:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
    3c76:	683b      	ldr	r3, [r7, #0]
    3c78:	889a      	ldrh	r2, [r3, #4]
    3c7a:	687b      	ldr	r3, [r7, #4]
    3c7c:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    3c7e:	683b      	ldr	r3, [r7, #0]
    3c80:	881a      	ldrh	r2, [r3, #0]
    3c82:	687b      	ldr	r3, [r7, #4]
    3c84:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
    3c86:	687a      	ldr	r2, [r7, #4]
    3c88:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    3c8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3c90:	429a      	cmp	r2, r3
    3c92:	d01b      	beq.n	3ccc <TIM_TimeBaseInit+0x100>
    3c94:	687a      	ldr	r2, [r7, #4]
    3c96:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    3c9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3c9e:	429a      	cmp	r2, r3
    3ca0:	d014      	beq.n	3ccc <TIM_TimeBaseInit+0x100>
    3ca2:	687a      	ldr	r2, [r7, #4]
    3ca4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3ca8:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3cac:	429a      	cmp	r2, r3
    3cae:	d00d      	beq.n	3ccc <TIM_TimeBaseInit+0x100>
    3cb0:	687a      	ldr	r2, [r7, #4]
    3cb2:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    3cb6:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3cba:	429a      	cmp	r2, r3
    3cbc:	d006      	beq.n	3ccc <TIM_TimeBaseInit+0x100>
    3cbe:	687a      	ldr	r2, [r7, #4]
    3cc0:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    3cc4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3cc8:	429a      	cmp	r2, r3
    3cca:	d104      	bne.n	3cd6 <TIM_TimeBaseInit+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    3ccc:	683b      	ldr	r3, [r7, #0]
    3cce:	7a1b      	ldrb	r3, [r3, #8]
    3cd0:	461a      	mov	r2, r3
    3cd2:	687b      	ldr	r3, [r7, #4]
    3cd4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
    3cd6:	687b      	ldr	r3, [r7, #4]
    3cd8:	f04f 0201 	mov.w	r2, #1
    3cdc:	829a      	strh	r2, [r3, #20]
}
    3cde:	f107 0714 	add.w	r7, r7, #20
    3ce2:	46bd      	mov	sp, r7
    3ce4:	bc80      	pop	{r7}
    3ce6:	4770      	bx	lr

00003ce8 <TIM_OC1Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3ce8:	b480      	push	{r7}
    3cea:	b085      	sub	sp, #20
    3cec:	af00      	add	r7, sp, #0
    3cee:	6078      	str	r0, [r7, #4]
    3cf0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    3cf2:	f04f 0300 	mov.w	r3, #0
    3cf6:	817b      	strh	r3, [r7, #10]
    3cf8:	f04f 0300 	mov.w	r3, #0
    3cfc:	81fb      	strh	r3, [r7, #14]
    3cfe:	f04f 0300 	mov.w	r3, #0
    3d02:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
    3d04:	687b      	ldr	r3, [r7, #4]
    3d06:	8c1b      	ldrh	r3, [r3, #32]
    3d08:	b29b      	uxth	r3, r3
    3d0a:	f023 0301 	bic.w	r3, r3, #1
    3d0e:	b29a      	uxth	r2, r3
    3d10:	687b      	ldr	r3, [r7, #4]
    3d12:	841a      	strh	r2, [r3, #32]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3d14:	687b      	ldr	r3, [r7, #4]
    3d16:	8c1b      	ldrh	r3, [r3, #32]
    3d18:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	889b      	ldrh	r3, [r3, #4]
    3d1e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    3d20:	687b      	ldr	r3, [r7, #4]
    3d22:	8b1b      	ldrh	r3, [r3, #24]
    3d24:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
    3d26:	897b      	ldrh	r3, [r7, #10]
    3d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3d2c:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
    3d2e:	897b      	ldrh	r3, [r7, #10]
    3d30:	f023 0303 	bic.w	r3, r3, #3
    3d34:	817b      	strh	r3, [r7, #10]

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    3d36:	683b      	ldr	r3, [r7, #0]
    3d38:	881a      	ldrh	r2, [r3, #0]
    3d3a:	897b      	ldrh	r3, [r7, #10]
    3d3c:	4313      	orrs	r3, r2
    3d3e:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
    3d40:	89fb      	ldrh	r3, [r7, #14]
    3d42:	f023 0302 	bic.w	r3, r3, #2
    3d46:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    3d48:	683b      	ldr	r3, [r7, #0]
    3d4a:	891a      	ldrh	r2, [r3, #8]
    3d4c:	89fb      	ldrh	r3, [r7, #14]
    3d4e:	4313      	orrs	r3, r2
    3d50:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    3d52:	683b      	ldr	r3, [r7, #0]
    3d54:	885a      	ldrh	r2, [r3, #2]
    3d56:	89fb      	ldrh	r3, [r7, #14]
    3d58:	4313      	orrs	r3, r2
    3d5a:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)||
    3d5c:	687a      	ldr	r2, [r7, #4]
    3d5e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    3d62:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3d66:	429a      	cmp	r2, r3
    3d68:	d01b      	beq.n	3da2 <TIM_OC1Init+0xba>
    3d6a:	687a      	ldr	r2, [r7, #4]
    3d6c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    3d70:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3d74:	429a      	cmp	r2, r3
    3d76:	d014      	beq.n	3da2 <TIM_OC1Init+0xba>
    3d78:	687a      	ldr	r2, [r7, #4]
    3d7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    3d7e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3d82:	429a      	cmp	r2, r3
    3d84:	d00d      	beq.n	3da2 <TIM_OC1Init+0xba>
    3d86:	687a      	ldr	r2, [r7, #4]
    3d88:	f44f 4388 	mov.w	r3, #17408	; 0x4400
    3d8c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3d90:	429a      	cmp	r2, r3
    3d92:	d006      	beq.n	3da2 <TIM_OC1Init+0xba>
     (TIMx == TIM16)|| (TIMx == TIM17))
    3d94:	687a      	ldr	r2, [r7, #4]
    3d96:	f44f 4390 	mov.w	r3, #18432	; 0x4800
    3d9a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3d9e:	429a      	cmp	r2, r3
    3da0:	d123      	bne.n	3dea <TIM_OC1Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    3da2:	89fb      	ldrh	r3, [r7, #14]
    3da4:	f023 0308 	bic.w	r3, r3, #8
    3da8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    3daa:	683b      	ldr	r3, [r7, #0]
    3dac:	895a      	ldrh	r2, [r3, #10]
    3dae:	89fb      	ldrh	r3, [r7, #14]
    3db0:	4313      	orrs	r3, r2
    3db2:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
    3db4:	89fb      	ldrh	r3, [r7, #14]
    3db6:	f023 0304 	bic.w	r3, r3, #4
    3dba:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    3dbc:	683b      	ldr	r3, [r7, #0]
    3dbe:	889a      	ldrh	r2, [r3, #4]
    3dc0:	89fb      	ldrh	r3, [r7, #14]
    3dc2:	4313      	orrs	r3, r2
    3dc4:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    3dc6:	89bb      	ldrh	r3, [r7, #12]
    3dc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3dcc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    3dce:	89bb      	ldrh	r3, [r7, #12]
    3dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3dd4:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    3dd6:	683b      	ldr	r3, [r7, #0]
    3dd8:	899a      	ldrh	r2, [r3, #12]
    3dda:	89bb      	ldrh	r3, [r7, #12]
    3ddc:	4313      	orrs	r3, r2
    3dde:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    3de0:	683b      	ldr	r3, [r7, #0]
    3de2:	89da      	ldrh	r2, [r3, #14]
    3de4:	89bb      	ldrh	r3, [r7, #12]
    3de6:	4313      	orrs	r3, r2
    3de8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3dea:	687b      	ldr	r3, [r7, #4]
    3dec:	89ba      	ldrh	r2, [r7, #12]
    3dee:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    3df0:	687b      	ldr	r3, [r7, #4]
    3df2:	897a      	ldrh	r2, [r7, #10]
    3df4:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
    3df6:	683b      	ldr	r3, [r7, #0]
    3df8:	88da      	ldrh	r2, [r3, #6]
    3dfa:	687b      	ldr	r3, [r7, #4]
    3dfc:	869a      	strh	r2, [r3, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3dfe:	687b      	ldr	r3, [r7, #4]
    3e00:	89fa      	ldrh	r2, [r7, #14]
    3e02:	841a      	strh	r2, [r3, #32]
}
    3e04:	f107 0714 	add.w	r7, r7, #20
    3e08:	46bd      	mov	sp, r7
    3e0a:	bc80      	pop	{r7}
    3e0c:	4770      	bx	lr
    3e0e:	bf00      	nop

00003e10 <TIM_OC2Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3e10:	b480      	push	{r7}
    3e12:	b085      	sub	sp, #20
    3e14:	af00      	add	r7, sp, #0
    3e16:	6078      	str	r0, [r7, #4]
    3e18:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    3e1a:	f04f 0300 	mov.w	r3, #0
    3e1e:	817b      	strh	r3, [r7, #10]
    3e20:	f04f 0300 	mov.w	r3, #0
    3e24:	81fb      	strh	r3, [r7, #14]
    3e26:	f04f 0300 	mov.w	r3, #0
    3e2a:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
    3e2c:	687b      	ldr	r3, [r7, #4]
    3e2e:	8c1b      	ldrh	r3, [r3, #32]
    3e30:	b29b      	uxth	r3, r3
    3e32:	f023 0310 	bic.w	r3, r3, #16
    3e36:	b29a      	uxth	r2, r3
    3e38:	687b      	ldr	r3, [r7, #4]
    3e3a:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
    3e3c:	687b      	ldr	r3, [r7, #4]
    3e3e:	8c1b      	ldrh	r3, [r3, #32]
    3e40:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3e42:	687b      	ldr	r3, [r7, #4]
    3e44:	889b      	ldrh	r3, [r3, #4]
    3e46:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    3e48:	687b      	ldr	r3, [r7, #4]
    3e4a:	8b1b      	ldrh	r3, [r3, #24]
    3e4c:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
    3e4e:	897b      	ldrh	r3, [r7, #10]
    3e50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    3e54:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
    3e56:	897b      	ldrh	r3, [r7, #10]
    3e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    3e5c:	817b      	strh	r3, [r7, #10]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    3e5e:	683b      	ldr	r3, [r7, #0]
    3e60:	881b      	ldrh	r3, [r3, #0]
    3e62:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3e66:	b29a      	uxth	r2, r3
    3e68:	897b      	ldrh	r3, [r7, #10]
    3e6a:	4313      	orrs	r3, r2
    3e6c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
    3e6e:	89fb      	ldrh	r3, [r7, #14]
    3e70:	f023 0320 	bic.w	r3, r3, #32
    3e74:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    3e76:	683b      	ldr	r3, [r7, #0]
    3e78:	891b      	ldrh	r3, [r3, #8]
    3e7a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3e7e:	b29a      	uxth	r2, r3
    3e80:	89fb      	ldrh	r3, [r7, #14]
    3e82:	4313      	orrs	r3, r2
    3e84:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    3e86:	683b      	ldr	r3, [r7, #0]
    3e88:	885b      	ldrh	r3, [r3, #2]
    3e8a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3e8e:	b29a      	uxth	r2, r3
    3e90:	89fb      	ldrh	r3, [r7, #14]
    3e92:	4313      	orrs	r3, r2
    3e94:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    3e96:	687a      	ldr	r2, [r7, #4]
    3e98:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    3e9c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3ea0:	429a      	cmp	r2, r3
    3ea2:	d006      	beq.n	3eb2 <TIM_OC2Init+0xa2>
    3ea4:	687a      	ldr	r2, [r7, #4]
    3ea6:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    3eaa:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3eae:	429a      	cmp	r2, r3
    3eb0:	d12f      	bne.n	3f12 <TIM_OC2Init+0x102>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
    3eb2:	89fb      	ldrh	r3, [r7, #14]
    3eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3eb8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    3eba:	683b      	ldr	r3, [r7, #0]
    3ebc:	895b      	ldrh	r3, [r3, #10]
    3ebe:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3ec2:	b29a      	uxth	r2, r3
    3ec4:	89fb      	ldrh	r3, [r7, #14]
    3ec6:	4313      	orrs	r3, r2
    3ec8:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    3eca:	89fb      	ldrh	r3, [r7, #14]
    3ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    3ed0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    3ed2:	683b      	ldr	r3, [r7, #0]
    3ed4:	889b      	ldrh	r3, [r3, #4]
    3ed6:	ea4f 1303 	mov.w	r3, r3, lsl #4
    3eda:	b29a      	uxth	r2, r3
    3edc:	89fb      	ldrh	r3, [r7, #14]
    3ede:	4313      	orrs	r3, r2
    3ee0:	81fb      	strh	r3, [r7, #14]
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    3ee2:	89bb      	ldrh	r3, [r7, #12]
    3ee4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3ee8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    3eea:	89bb      	ldrh	r3, [r7, #12]
    3eec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3ef0:	81bb      	strh	r3, [r7, #12]
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    3ef2:	683b      	ldr	r3, [r7, #0]
    3ef4:	899b      	ldrh	r3, [r3, #12]
    3ef6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3efa:	b29a      	uxth	r2, r3
    3efc:	89bb      	ldrh	r3, [r7, #12]
    3efe:	4313      	orrs	r3, r2
    3f00:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    3f02:	683b      	ldr	r3, [r7, #0]
    3f04:	89db      	ldrh	r3, [r3, #14]
    3f06:	ea4f 0383 	mov.w	r3, r3, lsl #2
    3f0a:	b29a      	uxth	r2, r3
    3f0c:	89bb      	ldrh	r3, [r7, #12]
    3f0e:	4313      	orrs	r3, r2
    3f10:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    3f12:	687b      	ldr	r3, [r7, #4]
    3f14:	89ba      	ldrh	r2, [r7, #12]
    3f16:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
    3f18:	687b      	ldr	r3, [r7, #4]
    3f1a:	897a      	ldrh	r2, [r7, #10]
    3f1c:	831a      	strh	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
    3f1e:	683b      	ldr	r3, [r7, #0]
    3f20:	88da      	ldrh	r2, [r3, #6]
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	871a      	strh	r2, [r3, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	89fa      	ldrh	r2, [r7, #14]
    3f2a:	841a      	strh	r2, [r3, #32]
}
    3f2c:	f107 0714 	add.w	r7, r7, #20
    3f30:	46bd      	mov	sp, r7
    3f32:	bc80      	pop	{r7}
    3f34:	4770      	bx	lr
    3f36:	bf00      	nop

00003f38 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    3f38:	b480      	push	{r7}
    3f3a:	b085      	sub	sp, #20
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	6078      	str	r0, [r7, #4]
    3f40:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    3f42:	f04f 0300 	mov.w	r3, #0
    3f46:	817b      	strh	r3, [r7, #10]
    3f48:	f04f 0300 	mov.w	r3, #0
    3f4c:	81fb      	strh	r3, [r7, #14]
    3f4e:	f04f 0300 	mov.w	r3, #0
    3f52:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
    3f54:	687b      	ldr	r3, [r7, #4]
    3f56:	8c1b      	ldrh	r3, [r3, #32]
    3f58:	b29b      	uxth	r3, r3
    3f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    3f5e:	b29a      	uxth	r2, r3
    3f60:	687b      	ldr	r3, [r7, #4]
    3f62:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    3f64:	687b      	ldr	r3, [r7, #4]
    3f66:	8c1b      	ldrh	r3, [r3, #32]
    3f68:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    3f6a:	687b      	ldr	r3, [r7, #4]
    3f6c:	889b      	ldrh	r3, [r3, #4]
    3f6e:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    3f70:	687b      	ldr	r3, [r7, #4]
    3f72:	8b9b      	ldrh	r3, [r3, #28]
    3f74:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
    3f76:	897b      	ldrh	r3, [r7, #10]
    3f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    3f7c:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
    3f7e:	897b      	ldrh	r3, [r7, #10]
    3f80:	f023 0303 	bic.w	r3, r3, #3
    3f84:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    3f86:	683b      	ldr	r3, [r7, #0]
    3f88:	881a      	ldrh	r2, [r3, #0]
    3f8a:	897b      	ldrh	r3, [r7, #10]
    3f8c:	4313      	orrs	r3, r2
    3f8e:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
    3f90:	89fb      	ldrh	r3, [r7, #14]
    3f92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3f96:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    3f98:	683b      	ldr	r3, [r7, #0]
    3f9a:	891b      	ldrh	r3, [r3, #8]
    3f9c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3fa0:	b29a      	uxth	r2, r3
    3fa2:	89fb      	ldrh	r3, [r7, #14]
    3fa4:	4313      	orrs	r3, r2
    3fa6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    3fa8:	683b      	ldr	r3, [r7, #0]
    3faa:	885b      	ldrh	r3, [r3, #2]
    3fac:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3fb0:	b29a      	uxth	r2, r3
    3fb2:	89fb      	ldrh	r3, [r7, #14]
    3fb4:	4313      	orrs	r3, r2
    3fb6:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    3fb8:	687a      	ldr	r2, [r7, #4]
    3fba:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    3fbe:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3fc2:	429a      	cmp	r2, r3
    3fc4:	d006      	beq.n	3fd4 <TIM_OC3Init+0x9c>
    3fc6:	687a      	ldr	r2, [r7, #4]
    3fc8:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    3fcc:	f2c4 0301 	movt	r3, #16385	; 0x4001
    3fd0:	429a      	cmp	r2, r3
    3fd2:	d12f      	bne.n	4034 <TIM_OC3Init+0xfc>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
    3fd4:	89fb      	ldrh	r3, [r7, #14]
    3fd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    3fda:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    3fdc:	683b      	ldr	r3, [r7, #0]
    3fde:	895b      	ldrh	r3, [r3, #10]
    3fe0:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3fe4:	b29a      	uxth	r2, r3
    3fe6:	89fb      	ldrh	r3, [r7, #14]
    3fe8:	4313      	orrs	r3, r2
    3fea:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    3fec:	89fb      	ldrh	r3, [r7, #14]
    3fee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    3ff2:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    3ff4:	683b      	ldr	r3, [r7, #0]
    3ff6:	889b      	ldrh	r3, [r3, #4]
    3ff8:	ea4f 2303 	mov.w	r3, r3, lsl #8
    3ffc:	b29a      	uxth	r2, r3
    3ffe:	89fb      	ldrh	r3, [r7, #14]
    4000:	4313      	orrs	r3, r2
    4002:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    4004:	89bb      	ldrh	r3, [r7, #12]
    4006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    400a:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    400c:	89bb      	ldrh	r3, [r7, #12]
    400e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4012:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    4014:	683b      	ldr	r3, [r7, #0]
    4016:	899b      	ldrh	r3, [r3, #12]
    4018:	ea4f 1303 	mov.w	r3, r3, lsl #4
    401c:	b29a      	uxth	r2, r3
    401e:	89bb      	ldrh	r3, [r7, #12]
    4020:	4313      	orrs	r3, r2
    4022:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    4024:	683b      	ldr	r3, [r7, #0]
    4026:	89db      	ldrh	r3, [r3, #14]
    4028:	ea4f 1303 	mov.w	r3, r3, lsl #4
    402c:	b29a      	uxth	r2, r3
    402e:	89bb      	ldrh	r3, [r7, #12]
    4030:	4313      	orrs	r3, r2
    4032:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    4034:	687b      	ldr	r3, [r7, #4]
    4036:	89ba      	ldrh	r2, [r7, #12]
    4038:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
    403a:	687b      	ldr	r3, [r7, #4]
    403c:	897a      	ldrh	r2, [r7, #10]
    403e:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
    4040:	683b      	ldr	r3, [r7, #0]
    4042:	88da      	ldrh	r2, [r3, #6]
    4044:	687b      	ldr	r3, [r7, #4]
    4046:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    4048:	687b      	ldr	r3, [r7, #4]
    404a:	89fa      	ldrh	r2, [r7, #14]
    404c:	841a      	strh	r2, [r3, #32]
}
    404e:	f107 0714 	add.w	r7, r7, #20
    4052:	46bd      	mov	sp, r7
    4054:	bc80      	pop	{r7}
    4056:	4770      	bx	lr

00004058 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    4058:	b480      	push	{r7}
    405a:	b085      	sub	sp, #20
    405c:	af00      	add	r7, sp, #0
    405e:	6078      	str	r0, [r7, #4]
    4060:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    4062:	f04f 0300 	mov.w	r3, #0
    4066:	81bb      	strh	r3, [r7, #12]
    4068:	f04f 0300 	mov.w	r3, #0
    406c:	817b      	strh	r3, [r7, #10]
    406e:	f04f 0300 	mov.w	r3, #0
    4072:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
    4074:	687b      	ldr	r3, [r7, #4]
    4076:	8c1b      	ldrh	r3, [r3, #32]
    4078:	b29b      	uxth	r3, r3
    407a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    407e:	b29a      	uxth	r2, r3
    4080:	687b      	ldr	r3, [r7, #4]
    4082:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    4084:	687b      	ldr	r3, [r7, #4]
    4086:	8c1b      	ldrh	r3, [r3, #32]
    4088:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
    408a:	687b      	ldr	r3, [r7, #4]
    408c:	889b      	ldrh	r3, [r3, #4]
    408e:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    4090:	687b      	ldr	r3, [r7, #4]
    4092:	8b9b      	ldrh	r3, [r3, #28]
    4094:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
    4096:	89bb      	ldrh	r3, [r7, #12]
    4098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    409c:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
    409e:	89bb      	ldrh	r3, [r7, #12]
    40a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    40a4:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    40a6:	683b      	ldr	r3, [r7, #0]
    40a8:	881b      	ldrh	r3, [r3, #0]
    40aa:	ea4f 2303 	mov.w	r3, r3, lsl #8
    40ae:	b29a      	uxth	r2, r3
    40b0:	89bb      	ldrh	r3, [r7, #12]
    40b2:	4313      	orrs	r3, r2
    40b4:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
    40b6:	897b      	ldrh	r3, [r7, #10]
    40b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    40bc:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    40be:	683b      	ldr	r3, [r7, #0]
    40c0:	891b      	ldrh	r3, [r3, #8]
    40c2:	ea4f 3303 	mov.w	r3, r3, lsl #12
    40c6:	b29a      	uxth	r2, r3
    40c8:	897b      	ldrh	r3, [r7, #10]
    40ca:	4313      	orrs	r3, r2
    40cc:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    40ce:	683b      	ldr	r3, [r7, #0]
    40d0:	885b      	ldrh	r3, [r3, #2]
    40d2:	ea4f 3303 	mov.w	r3, r3, lsl #12
    40d6:	b29a      	uxth	r2, r3
    40d8:	897b      	ldrh	r3, [r7, #10]
    40da:	4313      	orrs	r3, r2
    40dc:	817b      	strh	r3, [r7, #10]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
    40de:	687a      	ldr	r2, [r7, #4]
    40e0:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    40e4:	f2c4 0301 	movt	r3, #16385	; 0x4001
    40e8:	429a      	cmp	r2, r3
    40ea:	d006      	beq.n	40fa <TIM_OC4Init+0xa2>
    40ec:	687a      	ldr	r2, [r7, #4]
    40ee:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    40f2:	f2c4 0301 	movt	r3, #16385	; 0x4001
    40f6:	429a      	cmp	r2, r3
    40f8:	d10b      	bne.n	4112 <TIM_OC4Init+0xba>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    40fa:	89fb      	ldrh	r3, [r7, #14]
    40fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    4100:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    4102:	683b      	ldr	r3, [r7, #0]
    4104:	899b      	ldrh	r3, [r3, #12]
    4106:	ea4f 1383 	mov.w	r3, r3, lsl #6
    410a:	b29a      	uxth	r2, r3
    410c:	89fb      	ldrh	r3, [r7, #14]
    410e:	4313      	orrs	r3, r2
    4110:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
    4112:	687b      	ldr	r3, [r7, #4]
    4114:	89fa      	ldrh	r2, [r7, #14]
    4116:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    4118:	687b      	ldr	r3, [r7, #4]
    411a:	89ba      	ldrh	r2, [r7, #12]
    411c:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
    411e:	683b      	ldr	r3, [r7, #0]
    4120:	88da      	ldrh	r2, [r3, #6]
    4122:	687b      	ldr	r3, [r7, #4]
    4124:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    4128:	687b      	ldr	r3, [r7, #4]
    412a:	897a      	ldrh	r2, [r7, #10]
    412c:	841a      	strh	r2, [r3, #32]
}
    412e:	f107 0714 	add.w	r7, r7, #20
    4132:	46bd      	mov	sp, r7
    4134:	bc80      	pop	{r7}
    4136:	4770      	bx	lr

00004138 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    4138:	b580      	push	{r7, lr}
    413a:	b082      	sub	sp, #8
    413c:	af00      	add	r7, sp, #0
    413e:	6078      	str	r0, [r7, #4]
    4140:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    4142:	683b      	ldr	r3, [r7, #0]
    4144:	881b      	ldrh	r3, [r3, #0]
    4146:	2b00      	cmp	r3, #0
    4148:	d10f      	bne.n	416a <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    414a:	683b      	ldr	r3, [r7, #0]
    414c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
    414e:	683b      	ldr	r3, [r7, #0]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    4150:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    4152:	683b      	ldr	r3, [r7, #0]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    4154:	891b      	ldrh	r3, [r3, #8]
    4156:	6878      	ldr	r0, [r7, #4]
    4158:	f001 f9d4 	bl	5504 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    415c:	683b      	ldr	r3, [r7, #0]
    415e:	88db      	ldrh	r3, [r3, #6]
    4160:	6878      	ldr	r0, [r7, #4]
    4162:	4619      	mov	r1, r3
    4164:	f001 f876 	bl	5254 <TIM_SetIC1Prescaler>
    4168:	e036      	b.n	41d8 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    416a:	683b      	ldr	r3, [r7, #0]
    416c:	881b      	ldrh	r3, [r3, #0]
    416e:	2b04      	cmp	r3, #4
    4170:	d10f      	bne.n	4192 <TIM_ICInit+0x5a>
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    4172:	683b      	ldr	r3, [r7, #0]
    4174:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
    4176:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    4178:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    417a:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    417c:	891b      	ldrh	r3, [r3, #8]
    417e:	6878      	ldr	r0, [r7, #4]
    4180:	f001 fa32 	bl	55e8 <TI2_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    4184:	683b      	ldr	r3, [r7, #0]
    4186:	88db      	ldrh	r3, [r3, #6]
    4188:	6878      	ldr	r0, [r7, #4]
    418a:	4619      	mov	r1, r3
    418c:	f001 f87e 	bl	528c <TIM_SetIC2Prescaler>
    4190:	e022      	b.n	41d8 <TIM_ICInit+0xa0>
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    4192:	683b      	ldr	r3, [r7, #0]
    4194:	881b      	ldrh	r3, [r3, #0]
    4196:	2b08      	cmp	r3, #8
    4198:	d10f      	bne.n	41ba <TIM_ICInit+0x82>
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    419a:	683b      	ldr	r3, [r7, #0]
    419c:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
    419e:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    41a0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    41a2:	683b      	ldr	r3, [r7, #0]
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
    41a4:	891b      	ldrh	r3, [r3, #8]
    41a6:	6878      	ldr	r0, [r7, #4]
    41a8:	f001 faa0 	bl	56ec <TI3_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    41ac:	683b      	ldr	r3, [r7, #0]
    41ae:	88db      	ldrh	r3, [r3, #6]
    41b0:	6878      	ldr	r0, [r7, #4]
    41b2:	4619      	mov	r1, r3
    41b4:	f001 f888 	bl	52c8 <TIM_SetIC3Prescaler>
    41b8:	e00e      	b.n	41d8 <TIM_ICInit+0xa0>
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    41ba:	683b      	ldr	r3, [r7, #0]
    41bc:	8859      	ldrh	r1, [r3, #2]
               TIM_ICInitStruct->TIM_ICSelection,
    41be:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    41c0:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    41c2:	683b      	ldr	r3, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    41c4:	891b      	ldrh	r3, [r3, #8]
    41c6:	6878      	ldr	r0, [r7, #4]
    41c8:	f001 fb0a 	bl	57e0 <TI4_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    41cc:	683b      	ldr	r3, [r7, #0]
    41ce:	88db      	ldrh	r3, [r3, #6]
    41d0:	6878      	ldr	r0, [r7, #4]
    41d2:	4619      	mov	r1, r3
    41d4:	f001 f894 	bl	5300 <TIM_SetIC4Prescaler>
  }
}
    41d8:	f107 0708 	add.w	r7, r7, #8
    41dc:	46bd      	mov	sp, r7
    41de:	bd80      	pop	{r7, pc}

000041e0 <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    41e0:	b580      	push	{r7, lr}
    41e2:	b084      	sub	sp, #16
    41e4:	af00      	add	r7, sp, #0
    41e6:	6078      	str	r0, [r7, #4]
    41e8:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    41ea:	f04f 0300 	mov.w	r3, #0
    41ee:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    41f0:	f04f 0301 	mov.w	r3, #1
    41f4:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    41f6:	683b      	ldr	r3, [r7, #0]
    41f8:	885b      	ldrh	r3, [r3, #2]
    41fa:	2b00      	cmp	r3, #0
    41fc:	d103      	bne.n	4206 <TIM_PWMIConfig+0x26>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
    41fe:	f04f 0302 	mov.w	r3, #2
    4202:	81fb      	strh	r3, [r7, #14]
    4204:	e002      	b.n	420c <TIM_PWMIConfig+0x2c>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
    4206:	f04f 0300 	mov.w	r3, #0
    420a:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    420c:	683b      	ldr	r3, [r7, #0]
    420e:	889b      	ldrh	r3, [r3, #4]
    4210:	2b01      	cmp	r3, #1
    4212:	d103      	bne.n	421c <TIM_PWMIConfig+0x3c>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
    4214:	f04f 0302 	mov.w	r3, #2
    4218:	81bb      	strh	r3, [r7, #12]
    421a:	e002      	b.n	4222 <TIM_PWMIConfig+0x42>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
    421c:	f04f 0301 	mov.w	r3, #1
    4220:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    4222:	683b      	ldr	r3, [r7, #0]
    4224:	881b      	ldrh	r3, [r3, #0]
    4226:	2b00      	cmp	r3, #0
    4228:	d11c      	bne.n	4264 <TIM_PWMIConfig+0x84>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    422a:	683b      	ldr	r3, [r7, #0]
    422c:	8859      	ldrh	r1, [r3, #2]
    422e:	683b      	ldr	r3, [r7, #0]
    4230:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
    4232:	683b      	ldr	r3, [r7, #0]
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    4234:	891b      	ldrh	r3, [r3, #8]
    4236:	6878      	ldr	r0, [r7, #4]
    4238:	f001 f964 	bl	5504 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    423c:	683b      	ldr	r3, [r7, #0]
    423e:	88db      	ldrh	r3, [r3, #6]
    4240:	6878      	ldr	r0, [r7, #4]
    4242:	4619      	mov	r1, r3
    4244:	f001 f806 	bl	5254 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    4248:	683b      	ldr	r3, [r7, #0]
    424a:	891b      	ldrh	r3, [r3, #8]
    424c:	89f9      	ldrh	r1, [r7, #14]
    424e:	89ba      	ldrh	r2, [r7, #12]
    4250:	6878      	ldr	r0, [r7, #4]
    4252:	f001 f9c9 	bl	55e8 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    4256:	683b      	ldr	r3, [r7, #0]
    4258:	88db      	ldrh	r3, [r3, #6]
    425a:	6878      	ldr	r0, [r7, #4]
    425c:	4619      	mov	r1, r3
    425e:	f001 f815 	bl	528c <TIM_SetIC2Prescaler>
    4262:	e01b      	b.n	429c <TIM_PWMIConfig+0xbc>
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    4264:	683b      	ldr	r3, [r7, #0]
    4266:	8859      	ldrh	r1, [r3, #2]
    4268:	683b      	ldr	r3, [r7, #0]
    426a:	889a      	ldrh	r2, [r3, #4]
               TIM_ICInitStruct->TIM_ICFilter);
    426c:	683b      	ldr	r3, [r7, #0]
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    426e:	891b      	ldrh	r3, [r3, #8]
    4270:	6878      	ldr	r0, [r7, #4]
    4272:	f001 f9b9 	bl	55e8 <TI2_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    4276:	683b      	ldr	r3, [r7, #0]
    4278:	88db      	ldrh	r3, [r3, #6]
    427a:	6878      	ldr	r0, [r7, #4]
    427c:	4619      	mov	r1, r3
    427e:	f001 f805 	bl	528c <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    4282:	683b      	ldr	r3, [r7, #0]
    4284:	891b      	ldrh	r3, [r3, #8]
    4286:	89f9      	ldrh	r1, [r7, #14]
    4288:	89ba      	ldrh	r2, [r7, #12]
    428a:	6878      	ldr	r0, [r7, #4]
    428c:	f001 f93a 	bl	5504 <TI1_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    4290:	683b      	ldr	r3, [r7, #0]
    4292:	88db      	ldrh	r3, [r3, #6]
    4294:	6878      	ldr	r0, [r7, #4]
    4296:	4619      	mov	r1, r3
    4298:	f000 ffdc 	bl	5254 <TIM_SetIC1Prescaler>
  }
}
    429c:	f107 0710 	add.w	r7, r7, #16
    42a0:	46bd      	mov	sp, r7
    42a2:	bd80      	pop	{r7, pc}

000042a4 <TIM_BDTRConfig>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure that
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval None
  */
void TIM_BDTRConfig(TIM_TypeDef* TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    42a4:	b480      	push	{r7}
    42a6:	b083      	sub	sp, #12
    42a8:	af00      	add	r7, sp, #0
    42aa:	6078      	str	r0, [r7, #4]
    42ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    42ae:	683b      	ldr	r3, [r7, #0]
    42b0:	881a      	ldrh	r2, [r3, #0]
    42b2:	683b      	ldr	r3, [r7, #0]
    42b4:	885b      	ldrh	r3, [r3, #2]
    42b6:	4313      	orrs	r3, r2
    42b8:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    42ba:	683b      	ldr	r3, [r7, #0]
    42bc:	889b      	ldrh	r3, [r3, #4]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    42be:	4313      	orrs	r3, r2
    42c0:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    42c2:	683b      	ldr	r3, [r7, #0]
    42c4:	88db      	ldrh	r3, [r3, #6]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    42c6:	4313      	orrs	r3, r2
    42c8:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    42ca:	683b      	ldr	r3, [r7, #0]
    42cc:	891b      	ldrh	r3, [r3, #8]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    42ce:	4313      	orrs	r3, r2
    42d0:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    42d2:	683b      	ldr	r3, [r7, #0]
    42d4:	895b      	ldrh	r3, [r3, #10]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    42d6:	4313      	orrs	r3, r2
    42d8:	b29a      	uxth	r2, r3
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
    42da:	683b      	ldr	r3, [r7, #0]
    42dc:	899b      	ldrh	r3, [r3, #12]
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    42de:	4313      	orrs	r3, r2
    42e0:	b29a      	uxth	r2, r3
    42e2:	687b      	ldr	r3, [r7, #4]
    42e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
    42e8:	f107 070c 	add.w	r7, r7, #12
    42ec:	46bd      	mov	sp, r7
    42ee:	bc80      	pop	{r7}
    42f0:	4770      	bx	lr
    42f2:	bf00      	nop

000042f4 <TIM_TimeBaseStructInit>:
  * @param  TIM_TimeBaseInitStruct : pointer to a TIM_TimeBaseInitTypeDef
  *         structure which will be initialized.
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
    42f4:	b480      	push	{r7}
    42f6:	b083      	sub	sp, #12
    42f8:	af00      	add	r7, sp, #0
    42fa:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    42fc:	687b      	ldr	r3, [r7, #4]
    42fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
    4302:	809a      	strh	r2, [r3, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    4304:	687b      	ldr	r3, [r7, #4]
    4306:	f04f 0200 	mov.w	r2, #0
    430a:	801a      	strh	r2, [r3, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    430c:	687b      	ldr	r3, [r7, #4]
    430e:	f04f 0200 	mov.w	r2, #0
    4312:	80da      	strh	r2, [r3, #6]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    4314:	687b      	ldr	r3, [r7, #4]
    4316:	f04f 0200 	mov.w	r2, #0
    431a:	805a      	strh	r2, [r3, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    431c:	687b      	ldr	r3, [r7, #4]
    431e:	f04f 0200 	mov.w	r2, #0
    4322:	721a      	strb	r2, [r3, #8]
}
    4324:	f107 070c 	add.w	r7, r7, #12
    4328:	46bd      	mov	sp, r7
    432a:	bc80      	pop	{r7}
    432c:	4770      	bx	lr
    432e:	bf00      	nop

00004330 <TIM_OCStructInit>:
  * @param  TIM_OCInitStruct : pointer to a TIM_OCInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
    4330:	b480      	push	{r7}
    4332:	b083      	sub	sp, #12
    4334:	af00      	add	r7, sp, #0
    4336:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    4338:	687b      	ldr	r3, [r7, #4]
    433a:	f04f 0200 	mov.w	r2, #0
    433e:	801a      	strh	r2, [r3, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    4340:	687b      	ldr	r3, [r7, #4]
    4342:	f04f 0200 	mov.w	r2, #0
    4346:	805a      	strh	r2, [r3, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    4348:	687b      	ldr	r3, [r7, #4]
    434a:	f04f 0200 	mov.w	r2, #0
    434e:	809a      	strh	r2, [r3, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000;
    4350:	687b      	ldr	r3, [r7, #4]
    4352:	f04f 0200 	mov.w	r2, #0
    4356:	80da      	strh	r2, [r3, #6]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    4358:	687b      	ldr	r3, [r7, #4]
    435a:	f04f 0200 	mov.w	r2, #0
    435e:	811a      	strh	r2, [r3, #8]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    4360:	687b      	ldr	r3, [r7, #4]
    4362:	f04f 0200 	mov.w	r2, #0
    4366:	815a      	strh	r2, [r3, #10]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    4368:	687b      	ldr	r3, [r7, #4]
    436a:	f04f 0200 	mov.w	r2, #0
    436e:	819a      	strh	r2, [r3, #12]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    4370:	687b      	ldr	r3, [r7, #4]
    4372:	f04f 0200 	mov.w	r2, #0
    4376:	81da      	strh	r2, [r3, #14]
}
    4378:	f107 070c 	add.w	r7, r7, #12
    437c:	46bd      	mov	sp, r7
    437e:	bc80      	pop	{r7}
    4380:	4770      	bx	lr
    4382:	bf00      	nop

00004384 <TIM_ICStructInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure which will
  *         be initialized.
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
    4384:	b480      	push	{r7}
    4386:	b083      	sub	sp, #12
    4388:	af00      	add	r7, sp, #0
    438a:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    438c:	687b      	ldr	r3, [r7, #4]
    438e:	f04f 0200 	mov.w	r2, #0
    4392:	801a      	strh	r2, [r3, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    4394:	687b      	ldr	r3, [r7, #4]
    4396:	f04f 0200 	mov.w	r2, #0
    439a:	805a      	strh	r2, [r3, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    439c:	687b      	ldr	r3, [r7, #4]
    439e:	f04f 0201 	mov.w	r2, #1
    43a2:	809a      	strh	r2, [r3, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    43a4:	687b      	ldr	r3, [r7, #4]
    43a6:	f04f 0200 	mov.w	r2, #0
    43aa:	80da      	strh	r2, [r3, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
    43ac:	687b      	ldr	r3, [r7, #4]
    43ae:	f04f 0200 	mov.w	r2, #0
    43b2:	811a      	strh	r2, [r3, #8]
}
    43b4:	f107 070c 	add.w	r7, r7, #12
    43b8:	46bd      	mov	sp, r7
    43ba:	bc80      	pop	{r7}
    43bc:	4770      	bx	lr
    43be:	bf00      	nop

000043c0 <TIM_BDTRStructInit>:
  * @param  TIM_BDTRInitStruct: pointer to a TIM_BDTRInitTypeDef structure which
  *         will be initialized.
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
    43c0:	b480      	push	{r7}
    43c2:	b083      	sub	sp, #12
    43c4:	af00      	add	r7, sp, #0
    43c6:	6078      	str	r0, [r7, #4]
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    43c8:	687b      	ldr	r3, [r7, #4]
    43ca:	f04f 0200 	mov.w	r2, #0
    43ce:	801a      	strh	r2, [r3, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    43d0:	687b      	ldr	r3, [r7, #4]
    43d2:	f04f 0200 	mov.w	r2, #0
    43d6:	805a      	strh	r2, [r3, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    43d8:	687b      	ldr	r3, [r7, #4]
    43da:	f04f 0200 	mov.w	r2, #0
    43de:	809a      	strh	r2, [r3, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    43e0:	687b      	ldr	r3, [r7, #4]
    43e2:	f04f 0200 	mov.w	r2, #0
    43e6:	80da      	strh	r2, [r3, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    43e8:	687b      	ldr	r3, [r7, #4]
    43ea:	f04f 0200 	mov.w	r2, #0
    43ee:	811a      	strh	r2, [r3, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    43f0:	687b      	ldr	r3, [r7, #4]
    43f2:	f04f 0200 	mov.w	r2, #0
    43f6:	815a      	strh	r2, [r3, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    43f8:	687b      	ldr	r3, [r7, #4]
    43fa:	f04f 0200 	mov.w	r2, #0
    43fe:	819a      	strh	r2, [r3, #12]
}
    4400:	f107 070c 	add.w	r7, r7, #12
    4404:	46bd      	mov	sp, r7
    4406:	bc80      	pop	{r7}
    4408:	4770      	bx	lr
    440a:	bf00      	nop

0000440c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    440c:	b480      	push	{r7}
    440e:	b083      	sub	sp, #12
    4410:	af00      	add	r7, sp, #0
    4412:	6078      	str	r0, [r7, #4]
    4414:	460b      	mov	r3, r1
    4416:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4418:	78fb      	ldrb	r3, [r7, #3]
    441a:	2b00      	cmp	r3, #0
    441c:	d008      	beq.n	4430 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
    441e:	687b      	ldr	r3, [r7, #4]
    4420:	881b      	ldrh	r3, [r3, #0]
    4422:	b29b      	uxth	r3, r3
    4424:	f043 0301 	orr.w	r3, r3, #1
    4428:	b29a      	uxth	r2, r3
    442a:	687b      	ldr	r3, [r7, #4]
    442c:	801a      	strh	r2, [r3, #0]
    442e:	e007      	b.n	4440 <TIM_Cmd+0x34>
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
    4430:	687b      	ldr	r3, [r7, #4]
    4432:	881b      	ldrh	r3, [r3, #0]
    4434:	b29b      	uxth	r3, r3
    4436:	f023 0301 	bic.w	r3, r3, #1
    443a:	b29a      	uxth	r2, r3
    443c:	687b      	ldr	r3, [r7, #4]
    443e:	801a      	strh	r2, [r3, #0]
  }
}
    4440:	f107 070c 	add.w	r7, r7, #12
    4444:	46bd      	mov	sp, r7
    4446:	bc80      	pop	{r7}
    4448:	4770      	bx	lr
    444a:	bf00      	nop

0000444c <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    444c:	b480      	push	{r7}
    444e:	b083      	sub	sp, #12
    4450:	af00      	add	r7, sp, #0
    4452:	6078      	str	r0, [r7, #4]
    4454:	460b      	mov	r3, r1
    4456:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4458:	78fb      	ldrb	r3, [r7, #3]
    445a:	2b00      	cmp	r3, #0
    445c:	d00c      	beq.n	4478 <TIM_CtrlPWMOutputs+0x2c>
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
    445e:	687b      	ldr	r3, [r7, #4]
    4460:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    4464:	b29b      	uxth	r3, r3
    4466:	ea6f 4343 	mvn.w	r3, r3, lsl #17
    446a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
    446e:	b29a      	uxth	r2, r3
    4470:	687b      	ldr	r3, [r7, #4]
    4472:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    4476:	e00b      	b.n	4490 <TIM_CtrlPWMOutputs+0x44>
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
    4478:	687b      	ldr	r3, [r7, #4]
    447a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
    447e:	b29b      	uxth	r3, r3
    4480:	ea4f 4343 	mov.w	r3, r3, lsl #17
    4484:	ea4f 4353 	mov.w	r3, r3, lsr #17
    4488:	b29a      	uxth	r2, r3
    448a:	687b      	ldr	r3, [r7, #4]
    448c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }  
}
    4490:	f107 070c 	add.w	r7, r7, #12
    4494:	46bd      	mov	sp, r7
    4496:	bc80      	pop	{r7}
    4498:	4770      	bx	lr
    449a:	bf00      	nop

0000449c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
    449c:	b480      	push	{r7}
    449e:	b083      	sub	sp, #12
    44a0:	af00      	add	r7, sp, #0
    44a2:	6078      	str	r0, [r7, #4]
    44a4:	4613      	mov	r3, r2
    44a6:	460a      	mov	r2, r1
    44a8:	807a      	strh	r2, [r7, #2]
    44aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    44ac:	787b      	ldrb	r3, [r7, #1]
    44ae:	2b00      	cmp	r3, #0
    44b0:	d008      	beq.n	44c4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
    44b2:	687b      	ldr	r3, [r7, #4]
    44b4:	899b      	ldrh	r3, [r3, #12]
    44b6:	b29a      	uxth	r2, r3
    44b8:	887b      	ldrh	r3, [r7, #2]
    44ba:	4313      	orrs	r3, r2
    44bc:	b29a      	uxth	r2, r3
    44be:	687b      	ldr	r3, [r7, #4]
    44c0:	819a      	strh	r2, [r3, #12]
    44c2:	e00a      	b.n	44da <TIM_ITConfig+0x3e>
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
    44c4:	687b      	ldr	r3, [r7, #4]
    44c6:	899b      	ldrh	r3, [r3, #12]
    44c8:	b29a      	uxth	r2, r3
    44ca:	887b      	ldrh	r3, [r7, #2]
    44cc:	ea6f 0303 	mvn.w	r3, r3
    44d0:	b29b      	uxth	r3, r3
    44d2:	4013      	ands	r3, r2
    44d4:	b29a      	uxth	r2, r3
    44d6:	687b      	ldr	r3, [r7, #4]
    44d8:	819a      	strh	r2, [r3, #12]
  }
}
    44da:	f107 070c 	add.w	r7, r7, #12
    44de:	46bd      	mov	sp, r7
    44e0:	bc80      	pop	{r7}
    44e2:	4770      	bx	lr

000044e4 <TIM_GenerateEvent>:
  *   - TIM6 and TIM7 can only generate an update event. 
  *   - TIM_EventSource_COM and TIM_EventSource_Break are used only with TIM1 and TIM8.      
  * @retval None
  */
void TIM_GenerateEvent(TIM_TypeDef* TIMx, uint16_t TIM_EventSource)
{ 
    44e4:	b480      	push	{r7}
    44e6:	b083      	sub	sp, #12
    44e8:	af00      	add	r7, sp, #0
    44ea:	6078      	str	r0, [r7, #4]
    44ec:	460b      	mov	r3, r1
    44ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource));
  
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
    44f0:	687b      	ldr	r3, [r7, #4]
    44f2:	887a      	ldrh	r2, [r7, #2]
    44f4:	829a      	strh	r2, [r3, #20]
}
    44f6:	f107 070c 	add.w	r7, r7, #12
    44fa:	46bd      	mov	sp, r7
    44fc:	bc80      	pop	{r7}
    44fe:	4770      	bx	lr

00004500 <TIM_DMAConfig>:
  *   This parameter can be one value between:
  *   TIM_DMABurstLength_1Transfer and TIM_DMABurstLength_18Transfers.
  * @retval None
  */
void TIM_DMAConfig(TIM_TypeDef* TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    4500:	b480      	push	{r7}
    4502:	b083      	sub	sp, #12
    4504:	af00      	add	r7, sp, #0
    4506:	6078      	str	r0, [r7, #4]
    4508:	4613      	mov	r3, r2
    450a:	460a      	mov	r2, r1
    450c:	807a      	strh	r2, [r7, #2]
    450e:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase));
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
    4510:	887a      	ldrh	r2, [r7, #2]
    4512:	883b      	ldrh	r3, [r7, #0]
    4514:	4313      	orrs	r3, r2
    4516:	b29a      	uxth	r2, r3
    4518:	687b      	ldr	r3, [r7, #4]
    451a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
}
    451e:	f107 070c 	add.w	r7, r7, #12
    4522:	46bd      	mov	sp, r7
    4524:	bc80      	pop	{r7}
    4526:	4770      	bx	lr

00004528 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
    4528:	b480      	push	{r7}
    452a:	b083      	sub	sp, #12
    452c:	af00      	add	r7, sp, #0
    452e:	6078      	str	r0, [r7, #4]
    4530:	4613      	mov	r3, r2
    4532:	460a      	mov	r2, r1
    4534:	807a      	strh	r2, [r7, #2]
    4536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
    4538:	787b      	ldrb	r3, [r7, #1]
    453a:	2b00      	cmp	r3, #0
    453c:	d008      	beq.n	4550 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
    453e:	687b      	ldr	r3, [r7, #4]
    4540:	899b      	ldrh	r3, [r3, #12]
    4542:	b29a      	uxth	r2, r3
    4544:	887b      	ldrh	r3, [r7, #2]
    4546:	4313      	orrs	r3, r2
    4548:	b29a      	uxth	r2, r3
    454a:	687b      	ldr	r3, [r7, #4]
    454c:	819a      	strh	r2, [r3, #12]
    454e:	e00a      	b.n	4566 <TIM_DMACmd+0x3e>
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
    4550:	687b      	ldr	r3, [r7, #4]
    4552:	899b      	ldrh	r3, [r3, #12]
    4554:	b29a      	uxth	r2, r3
    4556:	887b      	ldrh	r3, [r7, #2]
    4558:	ea6f 0303 	mvn.w	r3, r3
    455c:	b29b      	uxth	r3, r3
    455e:	4013      	ands	r3, r2
    4560:	b29a      	uxth	r2, r3
    4562:	687b      	ldr	r3, [r7, #4]
    4564:	819a      	strh	r2, [r3, #12]
  }
}
    4566:	f107 070c 	add.w	r7, r7, #12
    456a:	46bd      	mov	sp, r7
    456c:	bc80      	pop	{r7}
    456e:	4770      	bx	lr

00004570 <TIM_InternalClockConfig>:
  * @param  TIMx: where x can be  1, 2, 3, 4, 5, 8, 9, 12 or 15
  *         to select the TIM peripheral.
  * @retval None
  */
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
    4570:	b480      	push	{r7}
    4572:	b083      	sub	sp, #12
    4574:	af00      	add	r7, sp, #0
    4576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    4578:	687b      	ldr	r3, [r7, #4]
    457a:	891b      	ldrh	r3, [r3, #8]
    457c:	b29b      	uxth	r3, r3
    457e:	f023 0307 	bic.w	r3, r3, #7
    4582:	b29a      	uxth	r2, r3
    4584:	687b      	ldr	r3, [r7, #4]
    4586:	811a      	strh	r2, [r3, #8]
}
    4588:	f107 070c 	add.w	r7, r7, #12
    458c:	46bd      	mov	sp, r7
    458e:	bc80      	pop	{r7}
    4590:	4770      	bx	lr
    4592:	bf00      	nop

00004594 <TIM_ITRxExternalClockConfig>:
  * @param  TIM_TS_ITR2: Internal Trigger 2
  * @param  TIM_TS_ITR3: Internal Trigger 3
  * @retval None
  */
void TIM_ITRxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    4594:	b580      	push	{r7, lr}
    4596:	b082      	sub	sp, #8
    4598:	af00      	add	r7, sp, #0
    459a:	6078      	str	r0, [r7, #4]
    459c:	460b      	mov	r3, r1
    459e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    45a0:	887b      	ldrh	r3, [r7, #2]
    45a2:	6878      	ldr	r0, [r7, #4]
    45a4:	4619      	mov	r1, r3
    45a6:	f000 f8d3 	bl	4750 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    45aa:	687b      	ldr	r3, [r7, #4]
    45ac:	891b      	ldrh	r3, [r3, #8]
    45ae:	b29b      	uxth	r3, r3
    45b0:	f043 0307 	orr.w	r3, r3, #7
    45b4:	b29a      	uxth	r2, r3
    45b6:	687b      	ldr	r3, [r7, #4]
    45b8:	811a      	strh	r2, [r3, #8]
}
    45ba:	f107 0708 	add.w	r7, r7, #8
    45be:	46bd      	mov	sp, r7
    45c0:	bd80      	pop	{r7, pc}
    45c2:	bf00      	nop

000045c4 <TIM_TIxExternalClockConfig>:
  *   This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    45c4:	b580      	push	{r7, lr}
    45c6:	b084      	sub	sp, #16
    45c8:	af00      	add	r7, sp, #0
    45ca:	60f8      	str	r0, [r7, #12]
    45cc:	8179      	strh	r1, [r7, #10]
    45ce:	813a      	strh	r2, [r7, #8]
    45d0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TIXCLK_SOURCE(TIM_TIxExternalCLKSource));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    45d2:	897b      	ldrh	r3, [r7, #10]
    45d4:	2b60      	cmp	r3, #96	; 0x60
    45d6:	d108      	bne.n	45ea <TIM_TIxExternalClockConfig+0x26>
  {
    TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    45d8:	893a      	ldrh	r2, [r7, #8]
    45da:	88fb      	ldrh	r3, [r7, #6]
    45dc:	68f8      	ldr	r0, [r7, #12]
    45de:	4611      	mov	r1, r2
    45e0:	f04f 0201 	mov.w	r2, #1
    45e4:	f001 f800 	bl	55e8 <TI2_Config>
    45e8:	e007      	b.n	45fa <TIM_TIxExternalClockConfig+0x36>
  }
  else
  {
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    45ea:	893a      	ldrh	r2, [r7, #8]
    45ec:	88fb      	ldrh	r3, [r7, #6]
    45ee:	68f8      	ldr	r0, [r7, #12]
    45f0:	4611      	mov	r1, r2
    45f2:	f04f 0201 	mov.w	r2, #1
    45f6:	f000 ff85 	bl	5504 <TI1_Config>
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    45fa:	897b      	ldrh	r3, [r7, #10]
    45fc:	68f8      	ldr	r0, [r7, #12]
    45fe:	4619      	mov	r1, r3
    4600:	f000 f8a6 	bl	4750 <TIM_SelectInputTrigger>
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
    4604:	68fb      	ldr	r3, [r7, #12]
    4606:	891b      	ldrh	r3, [r3, #8]
    4608:	b29b      	uxth	r3, r3
    460a:	f043 0307 	orr.w	r3, r3, #7
    460e:	b29a      	uxth	r2, r3
    4610:	68fb      	ldr	r3, [r7, #12]
    4612:	811a      	strh	r2, [r3, #8]
}
    4614:	f107 0710 	add.w	r7, r7, #16
    4618:	46bd      	mov	sp, r7
    461a:	bd80      	pop	{r7, pc}

0000461c <TIM_ETRClockMode1Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    461c:	b580      	push	{r7, lr}
    461e:	b086      	sub	sp, #24
    4620:	af00      	add	r7, sp, #0
    4622:	60f8      	str	r0, [r7, #12]
    4624:	8179      	strh	r1, [r7, #10]
    4626:	813a      	strh	r2, [r7, #8]
    4628:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    462a:	f04f 0300 	mov.w	r3, #0
    462e:	82fb      	strh	r3, [r7, #22]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    4630:	8979      	ldrh	r1, [r7, #10]
    4632:	893a      	ldrh	r2, [r7, #8]
    4634:	88fb      	ldrh	r3, [r7, #6]
    4636:	68f8      	ldr	r0, [r7, #12]
    4638:	f000 f834 	bl	46a4 <TIM_ETRConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    463c:	68fb      	ldr	r3, [r7, #12]
    463e:	891b      	ldrh	r3, [r3, #8]
    4640:	82fb      	strh	r3, [r7, #22]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    4642:	8afb      	ldrh	r3, [r7, #22]
    4644:	f023 0307 	bic.w	r3, r3, #7
    4648:	82fb      	strh	r3, [r7, #22]
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
    464a:	8afb      	ldrh	r3, [r7, #22]
    464c:	f043 0307 	orr.w	r3, r3, #7
    4650:	82fb      	strh	r3, [r7, #22]
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    4652:	8afb      	ldrh	r3, [r7, #22]
    4654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4658:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_TS_ETRF;
    465a:	8afb      	ldrh	r3, [r7, #22]
    465c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    4660:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    4662:	68fb      	ldr	r3, [r7, #12]
    4664:	8afa      	ldrh	r2, [r7, #22]
    4666:	811a      	strh	r2, [r3, #8]
}
    4668:	f107 0718 	add.w	r7, r7, #24
    466c:	46bd      	mov	sp, r7
    466e:	bd80      	pop	{r7, pc}

00004670 <TIM_ETRClockMode2Config>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    4670:	b580      	push	{r7, lr}
    4672:	b084      	sub	sp, #16
    4674:	af00      	add	r7, sp, #0
    4676:	60f8      	str	r0, [r7, #12]
    4678:	8179      	strh	r1, [r7, #10]
    467a:	813a      	strh	r2, [r7, #8]
    467c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    467e:	8979      	ldrh	r1, [r7, #10]
    4680:	893a      	ldrh	r2, [r7, #8]
    4682:	88fb      	ldrh	r3, [r7, #6]
    4684:	68f8      	ldr	r0, [r7, #12]
    4686:	f000 f80d 	bl	46a4 <TIM_ETRConfig>
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
    468a:	68fb      	ldr	r3, [r7, #12]
    468c:	891b      	ldrh	r3, [r3, #8]
    468e:	b29b      	uxth	r3, r3
    4690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4694:	b29a      	uxth	r2, r3
    4696:	68fb      	ldr	r3, [r7, #12]
    4698:	811a      	strh	r2, [r3, #8]
}
    469a:	f107 0710 	add.w	r7, r7, #16
    469e:	46bd      	mov	sp, r7
    46a0:	bd80      	pop	{r7, pc}
    46a2:	bf00      	nop

000046a4 <TIM_ETRConfig>:
  *   This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    46a4:	b480      	push	{r7}
    46a6:	b087      	sub	sp, #28
    46a8:	af00      	add	r7, sp, #0
    46aa:	60f8      	str	r0, [r7, #12]
    46ac:	8179      	strh	r1, [r7, #10]
    46ae:	813a      	strh	r2, [r7, #8]
    46b0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    46b2:	f04f 0300 	mov.w	r3, #0
    46b6:	82fb      	strh	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  tmpsmcr = TIMx->SMCR;
    46b8:	68fb      	ldr	r3, [r7, #12]
    46ba:	891b      	ldrh	r3, [r3, #8]
    46bc:	82fb      	strh	r3, [r7, #22]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_Mask;
    46be:	8afb      	ldrh	r3, [r7, #22]
    46c0:	b2db      	uxtb	r3, r3
    46c2:	82fb      	strh	r3, [r7, #22]
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    46c4:	88fb      	ldrh	r3, [r7, #6]
    46c6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    46ca:	b29a      	uxth	r2, r3
    46cc:	893b      	ldrh	r3, [r7, #8]
    46ce:	4313      	orrs	r3, r2
    46d0:	b29a      	uxth	r2, r3
    46d2:	897b      	ldrh	r3, [r7, #10]
    46d4:	4313      	orrs	r3, r2
    46d6:	b29a      	uxth	r2, r3
    46d8:	8afb      	ldrh	r3, [r7, #22]
    46da:	4313      	orrs	r3, r2
    46dc:	82fb      	strh	r3, [r7, #22]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    46de:	68fb      	ldr	r3, [r7, #12]
    46e0:	8afa      	ldrh	r2, [r7, #22]
    46e2:	811a      	strh	r2, [r3, #8]
}
    46e4:	f107 071c 	add.w	r7, r7, #28
    46e8:	46bd      	mov	sp, r7
    46ea:	bc80      	pop	{r7}
    46ec:	4770      	bx	lr
    46ee:	bf00      	nop

000046f0 <TIM_PrescalerConfig>:
  *     @arg TIM_PSCReloadMode_Update: The Prescaler is loaded at the update event.
  *     @arg TIM_PSCReloadMode_Immediate: The Prescaler is loaded immediately.
  * @retval None
  */
void TIM_PrescalerConfig(TIM_TypeDef* TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    46f0:	b480      	push	{r7}
    46f2:	b083      	sub	sp, #12
    46f4:	af00      	add	r7, sp, #0
    46f6:	6078      	str	r0, [r7, #4]
    46f8:	4613      	mov	r3, r2
    46fa:	460a      	mov	r2, r1
    46fc:	807a      	strh	r2, [r7, #2]
    46fe:	803b      	strh	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
    4700:	687b      	ldr	r3, [r7, #4]
    4702:	887a      	ldrh	r2, [r7, #2]
    4704:	851a      	strh	r2, [r3, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
    4706:	687b      	ldr	r3, [r7, #4]
    4708:	883a      	ldrh	r2, [r7, #0]
    470a:	829a      	strh	r2, [r3, #20]
}
    470c:	f107 070c 	add.w	r7, r7, #12
    4710:	46bd      	mov	sp, r7
    4712:	bc80      	pop	{r7}
    4714:	4770      	bx	lr
    4716:	bf00      	nop

00004718 <TIM_CounterModeConfig>:
  *     @arg TIM_CounterMode_CenterAligned2: TIM Center Aligned Mode2
  *     @arg TIM_CounterMode_CenterAligned3: TIM Center Aligned Mode3
  * @retval None
  */
void TIM_CounterModeConfig(TIM_TypeDef* TIMx, uint16_t TIM_CounterMode)
{
    4718:	b480      	push	{r7}
    471a:	b085      	sub	sp, #20
    471c:	af00      	add	r7, sp, #0
    471e:	6078      	str	r0, [r7, #4]
    4720:	460b      	mov	r3, r1
    4722:	807b      	strh	r3, [r7, #2]
  uint16_t tmpcr1 = 0;
    4724:	f04f 0300 	mov.w	r3, #0
    4728:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  tmpcr1 = TIMx->CR1;
    472a:	687b      	ldr	r3, [r7, #4]
    472c:	881b      	ldrh	r3, [r3, #0]
    472e:	81fb      	strh	r3, [r7, #14]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
    4730:	89fb      	ldrh	r3, [r7, #14]
    4732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    4736:	81fb      	strh	r3, [r7, #14]
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
    4738:	89fa      	ldrh	r2, [r7, #14]
    473a:	887b      	ldrh	r3, [r7, #2]
    473c:	4313      	orrs	r3, r2
    473e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
    4740:	687b      	ldr	r3, [r7, #4]
    4742:	89fa      	ldrh	r2, [r7, #14]
    4744:	801a      	strh	r2, [r3, #0]
}
    4746:	f107 0714 	add.w	r7, r7, #20
    474a:	46bd      	mov	sp, r7
    474c:	bc80      	pop	{r7}
    474e:	4770      	bx	lr

00004750 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
    4750:	b480      	push	{r7}
    4752:	b085      	sub	sp, #20
    4754:	af00      	add	r7, sp, #0
    4756:	6078      	str	r0, [r7, #4]
    4758:	460b      	mov	r3, r1
    475a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
    475c:	f04f 0300 	mov.w	r3, #0
    4760:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    4762:	687b      	ldr	r3, [r7, #4]
    4764:	891b      	ldrh	r3, [r3, #8]
    4766:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
    4768:	89fb      	ldrh	r3, [r7, #14]
    476a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    476e:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
    4770:	89fa      	ldrh	r2, [r7, #14]
    4772:	887b      	ldrh	r3, [r7, #2]
    4774:	4313      	orrs	r3, r2
    4776:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    4778:	687b      	ldr	r3, [r7, #4]
    477a:	89fa      	ldrh	r2, [r7, #14]
    477c:	811a      	strh	r2, [r3, #8]
}
    477e:	f107 0714 	add.w	r7, r7, #20
    4782:	46bd      	mov	sp, r7
    4784:	bc80      	pop	{r7}
    4786:	4770      	bx	lr

00004788 <TIM_EncoderInterfaceConfig>:
  *     @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    4788:	b480      	push	{r7}
    478a:	b087      	sub	sp, #28
    478c:	af00      	add	r7, sp, #0
    478e:	60f8      	str	r0, [r7, #12]
    4790:	8179      	strh	r1, [r7, #10]
    4792:	813a      	strh	r2, [r7, #8]
    4794:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpsmcr = 0;
    4796:	f04f 0300 	mov.w	r3, #0
    479a:	82fb      	strh	r3, [r7, #22]
  uint16_t tmpccmr1 = 0;
    479c:	f04f 0300 	mov.w	r3, #0
    47a0:	82bb      	strh	r3, [r7, #20]
  uint16_t tmpccer = 0;
    47a2:	f04f 0300 	mov.w	r3, #0
    47a6:	827b      	strh	r3, [r7, #18]
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
    47a8:	68fb      	ldr	r3, [r7, #12]
    47aa:	891b      	ldrh	r3, [r3, #8]
    47ac:	82fb      	strh	r3, [r7, #22]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    47ae:	68fb      	ldr	r3, [r7, #12]
    47b0:	8b1b      	ldrh	r3, [r3, #24]
    47b2:	82bb      	strh	r3, [r7, #20]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
    47b4:	68fb      	ldr	r3, [r7, #12]
    47b6:	8c1b      	ldrh	r3, [r3, #32]
    47b8:	827b      	strh	r3, [r7, #18]
  
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
    47ba:	8afb      	ldrh	r3, [r7, #22]
    47bc:	f023 0307 	bic.w	r3, r3, #7
    47c0:	82fb      	strh	r3, [r7, #22]
  tmpsmcr |= TIM_EncoderMode;
    47c2:	8afa      	ldrh	r2, [r7, #22]
    47c4:	897b      	ldrh	r3, [r7, #10]
    47c6:	4313      	orrs	r3, r2
    47c8:	82fb      	strh	r3, [r7, #22]
  
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
    47ca:	8abb      	ldrh	r3, [r7, #20]
    47cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    47d0:	f023 0303 	bic.w	r3, r3, #3
    47d4:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
    47d6:	8abb      	ldrh	r3, [r7, #20]
    47d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    47dc:	f043 0301 	orr.w	r3, r3, #1
    47e0:	82bb      	strh	r3, [r7, #20]
  
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCER_CC1P)) & ((uint16_t)~((uint16_t)TIM_CCER_CC2P)));
    47e2:	8a7b      	ldrh	r3, [r7, #18]
    47e4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
    47e8:	827b      	strh	r3, [r7, #18]
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    47ea:	88fb      	ldrh	r3, [r7, #6]
    47ec:	ea4f 1303 	mov.w	r3, r3, lsl #4
    47f0:	b29a      	uxth	r2, r3
    47f2:	893b      	ldrh	r3, [r7, #8]
    47f4:	4313      	orrs	r3, r2
    47f6:	b29a      	uxth	r2, r3
    47f8:	8a7b      	ldrh	r3, [r7, #18]
    47fa:	4313      	orrs	r3, r2
    47fc:	827b      	strh	r3, [r7, #18]
  
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
    47fe:	68fb      	ldr	r3, [r7, #12]
    4800:	8afa      	ldrh	r2, [r7, #22]
    4802:	811a      	strh	r2, [r3, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    4804:	68fb      	ldr	r3, [r7, #12]
    4806:	8aba      	ldrh	r2, [r7, #20]
    4808:	831a      	strh	r2, [r3, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
    480a:	68fb      	ldr	r3, [r7, #12]
    480c:	8a7a      	ldrh	r2, [r7, #18]
    480e:	841a      	strh	r2, [r3, #32]
}
    4810:	f107 071c 	add.w	r7, r7, #28
    4814:	46bd      	mov	sp, r7
    4816:	bc80      	pop	{r7}
    4818:	4770      	bx	lr
    481a:	bf00      	nop

0000481c <TIM_ForcedOC1Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC1REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC1REF.
  * @retval None
  */
void TIM_ForcedOC1Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    481c:	b480      	push	{r7}
    481e:	b085      	sub	sp, #20
    4820:	af00      	add	r7, sp, #0
    4822:	6078      	str	r0, [r7, #4]
    4824:	460b      	mov	r3, r1
    4826:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4828:	f04f 0300 	mov.w	r3, #0
    482c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    482e:	687b      	ldr	r3, [r7, #4]
    4830:	8b1b      	ldrh	r3, [r3, #24]
    4832:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
    4834:	89fb      	ldrh	r3, [r7, #14]
    4836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    483a:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
    483c:	89fa      	ldrh	r2, [r7, #14]
    483e:	887b      	ldrh	r3, [r7, #2]
    4840:	4313      	orrs	r3, r2
    4842:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4844:	687b      	ldr	r3, [r7, #4]
    4846:	89fa      	ldrh	r2, [r7, #14]
    4848:	831a      	strh	r2, [r3, #24]
}
    484a:	f107 0714 	add.w	r7, r7, #20
    484e:	46bd      	mov	sp, r7
    4850:	bc80      	pop	{r7}
    4852:	4770      	bx	lr

00004854 <TIM_ForcedOC2Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC2REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC2REF.
  * @retval None
  */
void TIM_ForcedOC2Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4854:	b480      	push	{r7}
    4856:	b085      	sub	sp, #20
    4858:	af00      	add	r7, sp, #0
    485a:	6078      	str	r0, [r7, #4]
    485c:	460b      	mov	r3, r1
    485e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4860:	f04f 0300 	mov.w	r3, #0
    4864:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
    4866:	687b      	ldr	r3, [r7, #4]
    4868:	8b1b      	ldrh	r3, [r3, #24]
    486a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
    486c:	89fb      	ldrh	r3, [r7, #14]
    486e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    4872:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    4874:	887b      	ldrh	r3, [r7, #2]
    4876:	ea4f 2303 	mov.w	r3, r3, lsl #8
    487a:	b29a      	uxth	r2, r3
    487c:	89fb      	ldrh	r3, [r7, #14]
    487e:	4313      	orrs	r3, r2
    4880:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4882:	687b      	ldr	r3, [r7, #4]
    4884:	89fa      	ldrh	r2, [r7, #14]
    4886:	831a      	strh	r2, [r3, #24]
}
    4888:	f107 0714 	add.w	r7, r7, #20
    488c:	46bd      	mov	sp, r7
    488e:	bc80      	pop	{r7}
    4890:	4770      	bx	lr
    4892:	bf00      	nop

00004894 <TIM_ForcedOC3Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC3REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC3REF.
  * @retval None
  */
void TIM_ForcedOC3Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    4894:	b480      	push	{r7}
    4896:	b085      	sub	sp, #20
    4898:	af00      	add	r7, sp, #0
    489a:	6078      	str	r0, [r7, #4]
    489c:	460b      	mov	r3, r1
    489e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    48a0:	f04f 0300 	mov.w	r3, #0
    48a4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    48a6:	687b      	ldr	r3, [r7, #4]
    48a8:	8b9b      	ldrh	r3, [r3, #28]
    48aa:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
    48ac:	89fb      	ldrh	r3, [r7, #14]
    48ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    48b2:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
    48b4:	89fa      	ldrh	r2, [r7, #14]
    48b6:	887b      	ldrh	r3, [r7, #2]
    48b8:	4313      	orrs	r3, r2
    48ba:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    48bc:	687b      	ldr	r3, [r7, #4]
    48be:	89fa      	ldrh	r2, [r7, #14]
    48c0:	839a      	strh	r2, [r3, #28]
}
    48c2:	f107 0714 	add.w	r7, r7, #20
    48c6:	46bd      	mov	sp, r7
    48c8:	bc80      	pop	{r7}
    48ca:	4770      	bx	lr

000048cc <TIM_ForcedOC4Config>:
  *     @arg TIM_ForcedAction_Active: Force active level on OC4REF
  *     @arg TIM_ForcedAction_InActive: Force inactive level on OC4REF.
  * @retval None
  */
void TIM_ForcedOC4Config(TIM_TypeDef* TIMx, uint16_t TIM_ForcedAction)
{
    48cc:	b480      	push	{r7}
    48ce:	b085      	sub	sp, #20
    48d0:	af00      	add	r7, sp, #0
    48d2:	6078      	str	r0, [r7, #4]
    48d4:	460b      	mov	r3, r1
    48d6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    48d8:	f04f 0300 	mov.w	r3, #0
    48dc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr2 = TIMx->CCMR2;
    48de:	687b      	ldr	r3, [r7, #4]
    48e0:	8b9b      	ldrh	r3, [r3, #28]
    48e2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
    48e4:	89fb      	ldrh	r3, [r7, #14]
    48e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
    48ea:	81fb      	strh	r3, [r7, #14]
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    48ec:	887b      	ldrh	r3, [r7, #2]
    48ee:	ea4f 2303 	mov.w	r3, r3, lsl #8
    48f2:	b29a      	uxth	r2, r3
    48f4:	89fb      	ldrh	r3, [r7, #14]
    48f6:	4313      	orrs	r3, r2
    48f8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    48fa:	687b      	ldr	r3, [r7, #4]
    48fc:	89fa      	ldrh	r2, [r7, #14]
    48fe:	839a      	strh	r2, [r3, #28]
}
    4900:	f107 0714 	add.w	r7, r7, #20
    4904:	46bd      	mov	sp, r7
    4906:	bc80      	pop	{r7}
    4908:	4770      	bx	lr
    490a:	bf00      	nop

0000490c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    490c:	b480      	push	{r7}
    490e:	b083      	sub	sp, #12
    4910:	af00      	add	r7, sp, #0
    4912:	6078      	str	r0, [r7, #4]
    4914:	460b      	mov	r3, r1
    4916:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4918:	78fb      	ldrb	r3, [r7, #3]
    491a:	2b00      	cmp	r3, #0
    491c:	d008      	beq.n	4930 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
    491e:	687b      	ldr	r3, [r7, #4]
    4920:	881b      	ldrh	r3, [r3, #0]
    4922:	b29b      	uxth	r3, r3
    4924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    4928:	b29a      	uxth	r2, r3
    492a:	687b      	ldr	r3, [r7, #4]
    492c:	801a      	strh	r2, [r3, #0]
    492e:	e007      	b.n	4940 <TIM_ARRPreloadConfig+0x34>
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
    4930:	687b      	ldr	r3, [r7, #4]
    4932:	881b      	ldrh	r3, [r3, #0]
    4934:	b29b      	uxth	r3, r3
    4936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    493a:	b29a      	uxth	r2, r3
    493c:	687b      	ldr	r3, [r7, #4]
    493e:	801a      	strh	r2, [r3, #0]
  }
}
    4940:	f107 070c 	add.w	r7, r7, #12
    4944:	46bd      	mov	sp, r7
    4946:	bc80      	pop	{r7}
    4948:	4770      	bx	lr
    494a:	bf00      	nop

0000494c <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    494c:	b480      	push	{r7}
    494e:	b083      	sub	sp, #12
    4950:	af00      	add	r7, sp, #0
    4952:	6078      	str	r0, [r7, #4]
    4954:	460b      	mov	r3, r1
    4956:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4958:	78fb      	ldrb	r3, [r7, #3]
    495a:	2b00      	cmp	r3, #0
    495c:	d008      	beq.n	4970 <TIM_SelectCOM+0x24>
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
    495e:	687b      	ldr	r3, [r7, #4]
    4960:	889b      	ldrh	r3, [r3, #4]
    4962:	b29b      	uxth	r3, r3
    4964:	f043 0304 	orr.w	r3, r3, #4
    4968:	b29a      	uxth	r2, r3
    496a:	687b      	ldr	r3, [r7, #4]
    496c:	809a      	strh	r2, [r3, #4]
    496e:	e007      	b.n	4980 <TIM_SelectCOM+0x34>
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
    4970:	687b      	ldr	r3, [r7, #4]
    4972:	889b      	ldrh	r3, [r3, #4]
    4974:	b29b      	uxth	r3, r3
    4976:	f023 0304 	bic.w	r3, r3, #4
    497a:	b29a      	uxth	r2, r3
    497c:	687b      	ldr	r3, [r7, #4]
    497e:	809a      	strh	r2, [r3, #4]
  }
}
    4980:	f107 070c 	add.w	r7, r7, #12
    4984:	46bd      	mov	sp, r7
    4986:	bc80      	pop	{r7}
    4988:	4770      	bx	lr
    498a:	bf00      	nop

0000498c <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    498c:	b480      	push	{r7}
    498e:	b083      	sub	sp, #12
    4990:	af00      	add	r7, sp, #0
    4992:	6078      	str	r0, [r7, #4]
    4994:	460b      	mov	r3, r1
    4996:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    4998:	78fb      	ldrb	r3, [r7, #3]
    499a:	2b00      	cmp	r3, #0
    499c:	d008      	beq.n	49b0 <TIM_SelectCCDMA+0x24>
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
    499e:	687b      	ldr	r3, [r7, #4]
    49a0:	889b      	ldrh	r3, [r3, #4]
    49a2:	b29b      	uxth	r3, r3
    49a4:	f043 0308 	orr.w	r3, r3, #8
    49a8:	b29a      	uxth	r2, r3
    49aa:	687b      	ldr	r3, [r7, #4]
    49ac:	809a      	strh	r2, [r3, #4]
    49ae:	e007      	b.n	49c0 <TIM_SelectCCDMA+0x34>
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
    49b0:	687b      	ldr	r3, [r7, #4]
    49b2:	889b      	ldrh	r3, [r3, #4]
    49b4:	b29b      	uxth	r3, r3
    49b6:	f023 0308 	bic.w	r3, r3, #8
    49ba:	b29a      	uxth	r2, r3
    49bc:	687b      	ldr	r3, [r7, #4]
    49be:	809a      	strh	r2, [r3, #4]
  }
}
    49c0:	f107 070c 	add.w	r7, r7, #12
    49c4:	46bd      	mov	sp, r7
    49c6:	bc80      	pop	{r7}
    49c8:	4770      	bx	lr
    49ca:	bf00      	nop

000049cc <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
    49cc:	b480      	push	{r7}
    49ce:	b083      	sub	sp, #12
    49d0:	af00      	add	r7, sp, #0
    49d2:	6078      	str	r0, [r7, #4]
    49d4:	460b      	mov	r3, r1
    49d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    49d8:	78fb      	ldrb	r3, [r7, #3]
    49da:	2b00      	cmp	r3, #0
    49dc:	d008      	beq.n	49f0 <TIM_CCPreloadControl+0x24>
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
    49de:	687b      	ldr	r3, [r7, #4]
    49e0:	889b      	ldrh	r3, [r3, #4]
    49e2:	b29b      	uxth	r3, r3
    49e4:	f043 0301 	orr.w	r3, r3, #1
    49e8:	b29a      	uxth	r2, r3
    49ea:	687b      	ldr	r3, [r7, #4]
    49ec:	809a      	strh	r2, [r3, #4]
    49ee:	e007      	b.n	4a00 <TIM_CCPreloadControl+0x34>
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
    49f0:	687b      	ldr	r3, [r7, #4]
    49f2:	889b      	ldrh	r3, [r3, #4]
    49f4:	b29b      	uxth	r3, r3
    49f6:	f023 0301 	bic.w	r3, r3, #1
    49fa:	b29a      	uxth	r2, r3
    49fc:	687b      	ldr	r3, [r7, #4]
    49fe:	809a      	strh	r2, [r3, #4]
  }
}
    4a00:	f107 070c 	add.w	r7, r7, #12
    4a04:	46bd      	mov	sp, r7
    4a06:	bc80      	pop	{r7}
    4a08:	4770      	bx	lr
    4a0a:	bf00      	nop

00004a0c <TIM_OC1PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC1PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    4a0c:	b480      	push	{r7}
    4a0e:	b085      	sub	sp, #20
    4a10:	af00      	add	r7, sp, #0
    4a12:	6078      	str	r0, [r7, #4]
    4a14:	460b      	mov	r3, r1
    4a16:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4a18:	f04f 0300 	mov.w	r3, #0
    4a1c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    4a1e:	687b      	ldr	r3, [r7, #4]
    4a20:	8b1b      	ldrh	r3, [r3, #24]
    4a22:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
    4a24:	89fb      	ldrh	r3, [r7, #14]
    4a26:	f023 0308 	bic.w	r3, r3, #8
    4a2a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
    4a2c:	89fa      	ldrh	r2, [r7, #14]
    4a2e:	887b      	ldrh	r3, [r7, #2]
    4a30:	4313      	orrs	r3, r2
    4a32:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4a34:	687b      	ldr	r3, [r7, #4]
    4a36:	89fa      	ldrh	r2, [r7, #14]
    4a38:	831a      	strh	r2, [r3, #24]
}
    4a3a:	f107 0714 	add.w	r7, r7, #20
    4a3e:	46bd      	mov	sp, r7
    4a40:	bc80      	pop	{r7}
    4a42:	4770      	bx	lr

00004a44 <TIM_OC2PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC2PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    4a44:	b480      	push	{r7}
    4a46:	b085      	sub	sp, #20
    4a48:	af00      	add	r7, sp, #0
    4a4a:	6078      	str	r0, [r7, #4]
    4a4c:	460b      	mov	r3, r1
    4a4e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4a50:	f04f 0300 	mov.w	r3, #0
    4a54:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr1 = TIMx->CCMR1;
    4a56:	687b      	ldr	r3, [r7, #4]
    4a58:	8b1b      	ldrh	r3, [r3, #24]
    4a5a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
    4a5c:	89fb      	ldrh	r3, [r7, #14]
    4a5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4a62:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    4a64:	887b      	ldrh	r3, [r7, #2]
    4a66:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4a6a:	b29a      	uxth	r2, r3
    4a6c:	89fb      	ldrh	r3, [r7, #14]
    4a6e:	4313      	orrs	r3, r2
    4a70:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4a72:	687b      	ldr	r3, [r7, #4]
    4a74:	89fa      	ldrh	r2, [r7, #14]
    4a76:	831a      	strh	r2, [r3, #24]
}
    4a78:	f107 0714 	add.w	r7, r7, #20
    4a7c:	46bd      	mov	sp, r7
    4a7e:	bc80      	pop	{r7}
    4a80:	4770      	bx	lr
    4a82:	bf00      	nop

00004a84 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    4a84:	b480      	push	{r7}
    4a86:	b085      	sub	sp, #20
    4a88:	af00      	add	r7, sp, #0
    4a8a:	6078      	str	r0, [r7, #4]
    4a8c:	460b      	mov	r3, r1
    4a8e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4a90:	f04f 0300 	mov.w	r3, #0
    4a94:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    4a96:	687b      	ldr	r3, [r7, #4]
    4a98:	8b9b      	ldrh	r3, [r3, #28]
    4a9a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
    4a9c:	89fb      	ldrh	r3, [r7, #14]
    4a9e:	f023 0308 	bic.w	r3, r3, #8
    4aa2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
    4aa4:	89fa      	ldrh	r2, [r7, #14]
    4aa6:	887b      	ldrh	r3, [r7, #2]
    4aa8:	4313      	orrs	r3, r2
    4aaa:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    4aac:	687b      	ldr	r3, [r7, #4]
    4aae:	89fa      	ldrh	r2, [r7, #14]
    4ab0:	839a      	strh	r2, [r3, #28]
}
    4ab2:	f107 0714 	add.w	r7, r7, #20
    4ab6:	46bd      	mov	sp, r7
    4ab8:	bc80      	pop	{r7}
    4aba:	4770      	bx	lr

00004abc <TIM_OC4PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
    4abc:	b480      	push	{r7}
    4abe:	b085      	sub	sp, #20
    4ac0:	af00      	add	r7, sp, #0
    4ac2:	6078      	str	r0, [r7, #4]
    4ac4:	460b      	mov	r3, r1
    4ac6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4ac8:	f04f 0300 	mov.w	r3, #0
    4acc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
    4ace:	687b      	ldr	r3, [r7, #4]
    4ad0:	8b9b      	ldrh	r3, [r3, #28]
    4ad2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
    4ad4:	89fb      	ldrh	r3, [r7, #14]
    4ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4ada:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    4adc:	887b      	ldrh	r3, [r7, #2]
    4ade:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4ae2:	b29a      	uxth	r2, r3
    4ae4:	89fb      	ldrh	r3, [r7, #14]
    4ae6:	4313      	orrs	r3, r2
    4ae8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    4aea:	687b      	ldr	r3, [r7, #4]
    4aec:	89fa      	ldrh	r2, [r7, #14]
    4aee:	839a      	strh	r2, [r3, #28]
}
    4af0:	f107 0714 	add.w	r7, r7, #20
    4af4:	46bd      	mov	sp, r7
    4af6:	bc80      	pop	{r7}
    4af8:	4770      	bx	lr
    4afa:	bf00      	nop

00004afc <TIM_OC1FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC1FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    4afc:	b480      	push	{r7}
    4afe:	b085      	sub	sp, #20
    4b00:	af00      	add	r7, sp, #0
    4b02:	6078      	str	r0, [r7, #4]
    4b04:	460b      	mov	r3, r1
    4b06:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4b08:	f04f 0300 	mov.w	r3, #0
    4b0c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    4b0e:	687b      	ldr	r3, [r7, #4]
    4b10:	8b1b      	ldrh	r3, [r3, #24]
    4b12:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
    4b14:	89fb      	ldrh	r3, [r7, #14]
    4b16:	f023 0304 	bic.w	r3, r3, #4
    4b1a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
    4b1c:	89fa      	ldrh	r2, [r7, #14]
    4b1e:	887b      	ldrh	r3, [r7, #2]
    4b20:	4313      	orrs	r3, r2
    4b22:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    4b24:	687b      	ldr	r3, [r7, #4]
    4b26:	89fa      	ldrh	r2, [r7, #14]
    4b28:	831a      	strh	r2, [r3, #24]
}
    4b2a:	f107 0714 	add.w	r7, r7, #20
    4b2e:	46bd      	mov	sp, r7
    4b30:	bc80      	pop	{r7}
    4b32:	4770      	bx	lr

00004b34 <TIM_OC2FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC2FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    4b34:	b480      	push	{r7}
    4b36:	b085      	sub	sp, #20
    4b38:	af00      	add	r7, sp, #0
    4b3a:	6078      	str	r0, [r7, #4]
    4b3c:	460b      	mov	r3, r1
    4b3e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4b40:	f04f 0300 	mov.w	r3, #0
    4b44:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
    4b46:	687b      	ldr	r3, [r7, #4]
    4b48:	8b1b      	ldrh	r3, [r3, #24]
    4b4a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
    4b4c:	89fb      	ldrh	r3, [r7, #14]
    4b4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    4b52:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    4b54:	887b      	ldrh	r3, [r7, #2]
    4b56:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4b5a:	b29a      	uxth	r2, r3
    4b5c:	89fb      	ldrh	r3, [r7, #14]
    4b5e:	4313      	orrs	r3, r2
    4b60:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
    4b62:	687b      	ldr	r3, [r7, #4]
    4b64:	89fa      	ldrh	r2, [r7, #14]
    4b66:	831a      	strh	r2, [r3, #24]
}
    4b68:	f107 0714 	add.w	r7, r7, #20
    4b6c:	46bd      	mov	sp, r7
    4b6e:	bc80      	pop	{r7}
    4b70:	4770      	bx	lr
    4b72:	bf00      	nop

00004b74 <TIM_OC3FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC3FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    4b74:	b480      	push	{r7}
    4b76:	b085      	sub	sp, #20
    4b78:	af00      	add	r7, sp, #0
    4b7a:	6078      	str	r0, [r7, #4]
    4b7c:	460b      	mov	r3, r1
    4b7e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4b80:	f04f 0300 	mov.w	r3, #0
    4b84:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    4b86:	687b      	ldr	r3, [r7, #4]
    4b88:	8b9b      	ldrh	r3, [r3, #28]
    4b8a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
    4b8c:	89fb      	ldrh	r3, [r7, #14]
    4b8e:	f023 0304 	bic.w	r3, r3, #4
    4b92:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
    4b94:	89fa      	ldrh	r2, [r7, #14]
    4b96:	887b      	ldrh	r3, [r7, #2]
    4b98:	4313      	orrs	r3, r2
    4b9a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    4b9c:	687b      	ldr	r3, [r7, #4]
    4b9e:	89fa      	ldrh	r2, [r7, #14]
    4ba0:	839a      	strh	r2, [r3, #28]
}
    4ba2:	f107 0714 	add.w	r7, r7, #20
    4ba6:	46bd      	mov	sp, r7
    4ba8:	bc80      	pop	{r7}
    4baa:	4770      	bx	lr

00004bac <TIM_OC4FastConfig>:
  *     @arg TIM_OCFast_Enable: TIM output compare fast enable
  *     @arg TIM_OCFast_Disable: TIM output compare fast disable
  * @retval None
  */
void TIM_OC4FastConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCFast)
{
    4bac:	b480      	push	{r7}
    4bae:	b085      	sub	sp, #20
    4bb0:	af00      	add	r7, sp, #0
    4bb2:	6078      	str	r0, [r7, #4]
    4bb4:	460b      	mov	r3, r1
    4bb6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4bb8:	f04f 0300 	mov.w	r3, #0
    4bbc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
    4bbe:	687b      	ldr	r3, [r7, #4]
    4bc0:	8b9b      	ldrh	r3, [r3, #28]
    4bc2:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
    4bc4:	89fb      	ldrh	r3, [r7, #14]
    4bc6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    4bca:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    4bcc:	887b      	ldrh	r3, [r7, #2]
    4bce:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4bd2:	b29a      	uxth	r2, r3
    4bd4:	89fb      	ldrh	r3, [r7, #14]
    4bd6:	4313      	orrs	r3, r2
    4bd8:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
    4bda:	687b      	ldr	r3, [r7, #4]
    4bdc:	89fa      	ldrh	r2, [r7, #14]
    4bde:	839a      	strh	r2, [r3, #28]
}
    4be0:	f107 0714 	add.w	r7, r7, #20
    4be4:	46bd      	mov	sp, r7
    4be6:	bc80      	pop	{r7}
    4be8:	4770      	bx	lr
    4bea:	bf00      	nop

00004bec <TIM_ClearOC1Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC1Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    4bec:	b480      	push	{r7}
    4bee:	b085      	sub	sp, #20
    4bf0:	af00      	add	r7, sp, #0
    4bf2:	6078      	str	r0, [r7, #4]
    4bf4:	460b      	mov	r3, r1
    4bf6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4bf8:	f04f 0300 	mov.w	r3, #0
    4bfc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));

  tmpccmr1 = TIMx->CCMR1;
    4bfe:	687b      	ldr	r3, [r7, #4]
    4c00:	8b1b      	ldrh	r3, [r3, #24]
    4c02:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
    4c04:	89fb      	ldrh	r3, [r7, #14]
    4c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4c0a:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
    4c0c:	89fa      	ldrh	r2, [r7, #14]
    4c0e:	887b      	ldrh	r3, [r7, #2]
    4c10:	4313      	orrs	r3, r2
    4c12:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4c14:	687b      	ldr	r3, [r7, #4]
    4c16:	89fa      	ldrh	r2, [r7, #14]
    4c18:	831a      	strh	r2, [r3, #24]
}
    4c1a:	f107 0714 	add.w	r7, r7, #20
    4c1e:	46bd      	mov	sp, r7
    4c20:	bc80      	pop	{r7}
    4c22:	4770      	bx	lr

00004c24 <TIM_ClearOC2Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC2Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    4c24:	b480      	push	{r7}
    4c26:	b085      	sub	sp, #20
    4c28:	af00      	add	r7, sp, #0
    4c2a:	6078      	str	r0, [r7, #4]
    4c2c:	460b      	mov	r3, r1
    4c2e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr1 = 0;
    4c30:	f04f 0300 	mov.w	r3, #0
    4c34:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr1 = TIMx->CCMR1;
    4c36:	687b      	ldr	r3, [r7, #4]
    4c38:	8b1b      	ldrh	r3, [r3, #24]
    4c3a:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
    4c3c:	89fb      	ldrh	r3, [r7, #14]
    4c3e:	ea4f 4343 	mov.w	r3, r3, lsl #17
    4c42:	ea4f 4353 	mov.w	r3, r3, lsr #17
    4c46:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    4c48:	887b      	ldrh	r3, [r7, #2]
    4c4a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4c4e:	b29a      	uxth	r2, r3
    4c50:	89fb      	ldrh	r3, [r7, #14]
    4c52:	4313      	orrs	r3, r2
    4c54:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
    4c56:	687b      	ldr	r3, [r7, #4]
    4c58:	89fa      	ldrh	r2, [r7, #14]
    4c5a:	831a      	strh	r2, [r3, #24]
}
    4c5c:	f107 0714 	add.w	r7, r7, #20
    4c60:	46bd      	mov	sp, r7
    4c62:	bc80      	pop	{r7}
    4c64:	4770      	bx	lr
    4c66:	bf00      	nop

00004c68 <TIM_ClearOC3Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC3Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    4c68:	b480      	push	{r7}
    4c6a:	b085      	sub	sp, #20
    4c6c:	af00      	add	r7, sp, #0
    4c6e:	6078      	str	r0, [r7, #4]
    4c70:	460b      	mov	r3, r1
    4c72:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4c74:	f04f 0300 	mov.w	r3, #0
    4c78:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    4c7a:	687b      	ldr	r3, [r7, #4]
    4c7c:	8b9b      	ldrh	r3, [r3, #28]
    4c7e:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
    4c80:	89fb      	ldrh	r3, [r7, #14]
    4c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4c86:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
    4c88:	89fa      	ldrh	r2, [r7, #14]
    4c8a:	887b      	ldrh	r3, [r7, #2]
    4c8c:	4313      	orrs	r3, r2
    4c8e:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    4c90:	687b      	ldr	r3, [r7, #4]
    4c92:	89fa      	ldrh	r2, [r7, #14]
    4c94:	839a      	strh	r2, [r3, #28]
}
    4c96:	f107 0714 	add.w	r7, r7, #20
    4c9a:	46bd      	mov	sp, r7
    4c9c:	bc80      	pop	{r7}
    4c9e:	4770      	bx	lr

00004ca0 <TIM_ClearOC4Ref>:
  *     @arg TIM_OCClear_Enable: TIM Output clear enable
  *     @arg TIM_OCClear_Disable: TIM Output clear disable
  * @retval None
  */
void TIM_ClearOC4Ref(TIM_TypeDef* TIMx, uint16_t TIM_OCClear)
{
    4ca0:	b480      	push	{r7}
    4ca2:	b085      	sub	sp, #20
    4ca4:	af00      	add	r7, sp, #0
    4ca6:	6078      	str	r0, [r7, #4]
    4ca8:	460b      	mov	r3, r1
    4caa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
    4cac:	f04f 0300 	mov.w	r3, #0
    4cb0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  tmpccmr2 = TIMx->CCMR2;
    4cb2:	687b      	ldr	r3, [r7, #4]
    4cb4:	8b9b      	ldrh	r3, [r3, #28]
    4cb6:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
    4cb8:	89fb      	ldrh	r3, [r7, #14]
    4cba:	ea4f 4343 	mov.w	r3, r3, lsl #17
    4cbe:	ea4f 4353 	mov.w	r3, r3, lsr #17
    4cc2:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    4cc4:	887b      	ldrh	r3, [r7, #2]
    4cc6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4cca:	b29a      	uxth	r2, r3
    4ccc:	89fb      	ldrh	r3, [r7, #14]
    4cce:	4313      	orrs	r3, r2
    4cd0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
    4cd2:	687b      	ldr	r3, [r7, #4]
    4cd4:	89fa      	ldrh	r2, [r7, #14]
    4cd6:	839a      	strh	r2, [r3, #28]
}
    4cd8:	f107 0714 	add.w	r7, r7, #20
    4cdc:	46bd      	mov	sp, r7
    4cde:	bc80      	pop	{r7}
    4ce0:	4770      	bx	lr
    4ce2:	bf00      	nop

00004ce4 <TIM_OC1PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    4ce4:	b480      	push	{r7}
    4ce6:	b085      	sub	sp, #20
    4ce8:	af00      	add	r7, sp, #0
    4cea:	6078      	str	r0, [r7, #4]
    4cec:	460b      	mov	r3, r1
    4cee:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4cf0:	f04f 0300 	mov.w	r3, #0
    4cf4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    4cf6:	687b      	ldr	r3, [r7, #4]
    4cf8:	8c1b      	ldrh	r3, [r3, #32]
    4cfa:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
    4cfc:	89fb      	ldrh	r3, [r7, #14]
    4cfe:	f023 0302 	bic.w	r3, r3, #2
    4d02:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCPolarity;
    4d04:	89fa      	ldrh	r2, [r7, #14]
    4d06:	887b      	ldrh	r3, [r7, #2]
    4d08:	4313      	orrs	r3, r2
    4d0a:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4d0c:	687b      	ldr	r3, [r7, #4]
    4d0e:	89fa      	ldrh	r2, [r7, #14]
    4d10:	841a      	strh	r2, [r3, #32]
}
    4d12:	f107 0714 	add.w	r7, r7, #20
    4d16:	46bd      	mov	sp, r7
    4d18:	bc80      	pop	{r7}
    4d1a:	4770      	bx	lr

00004d1c <TIM_OC1NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC1NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    4d1c:	b480      	push	{r7}
    4d1e:	b085      	sub	sp, #20
    4d20:	af00      	add	r7, sp, #0
    4d22:	6078      	str	r0, [r7, #4]
    4d24:	460b      	mov	r3, r1
    4d26:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4d28:	f04f 0300 	mov.w	r3, #0
    4d2c:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
    4d2e:	687b      	ldr	r3, [r7, #4]
    4d30:	8c1b      	ldrh	r3, [r3, #32]
    4d32:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
    4d34:	89fb      	ldrh	r3, [r7, #14]
    4d36:	f023 0308 	bic.w	r3, r3, #8
    4d3a:	81fb      	strh	r3, [r7, #14]
  tmpccer |= TIM_OCNPolarity;
    4d3c:	89fa      	ldrh	r2, [r7, #14]
    4d3e:	887b      	ldrh	r3, [r7, #2]
    4d40:	4313      	orrs	r3, r2
    4d42:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4d44:	687b      	ldr	r3, [r7, #4]
    4d46:	89fa      	ldrh	r2, [r7, #14]
    4d48:	841a      	strh	r2, [r3, #32]
}
    4d4a:	f107 0714 	add.w	r7, r7, #20
    4d4e:	46bd      	mov	sp, r7
    4d50:	bc80      	pop	{r7}
    4d52:	4770      	bx	lr

00004d54 <TIM_OC2PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    4d54:	b480      	push	{r7}
    4d56:	b085      	sub	sp, #20
    4d58:	af00      	add	r7, sp, #0
    4d5a:	6078      	str	r0, [r7, #4]
    4d5c:	460b      	mov	r3, r1
    4d5e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4d60:	f04f 0300 	mov.w	r3, #0
    4d64:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    4d66:	687b      	ldr	r3, [r7, #4]
    4d68:	8c1b      	ldrh	r3, [r3, #32]
    4d6a:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
    4d6c:	89fb      	ldrh	r3, [r7, #14]
    4d6e:	f023 0320 	bic.w	r3, r3, #32
    4d72:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    4d74:	887b      	ldrh	r3, [r7, #2]
    4d76:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4d7a:	b29a      	uxth	r2, r3
    4d7c:	89fb      	ldrh	r3, [r7, #14]
    4d7e:	4313      	orrs	r3, r2
    4d80:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4d82:	687b      	ldr	r3, [r7, #4]
    4d84:	89fa      	ldrh	r2, [r7, #14]
    4d86:	841a      	strh	r2, [r3, #32]
}
    4d88:	f107 0714 	add.w	r7, r7, #20
    4d8c:	46bd      	mov	sp, r7
    4d8e:	bc80      	pop	{r7}
    4d90:	4770      	bx	lr
    4d92:	bf00      	nop

00004d94 <TIM_OC2NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC2NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    4d94:	b480      	push	{r7}
    4d96:	b085      	sub	sp, #20
    4d98:	af00      	add	r7, sp, #0
    4d9a:	6078      	str	r0, [r7, #4]
    4d9c:	460b      	mov	r3, r1
    4d9e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4da0:	f04f 0300 	mov.w	r3, #0
    4da4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
    4da6:	687b      	ldr	r3, [r7, #4]
    4da8:	8c1b      	ldrh	r3, [r3, #32]
    4daa:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
    4dac:	89fb      	ldrh	r3, [r7, #14]
    4dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4db2:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    4db4:	887b      	ldrh	r3, [r7, #2]
    4db6:	ea4f 1303 	mov.w	r3, r3, lsl #4
    4dba:	b29a      	uxth	r2, r3
    4dbc:	89fb      	ldrh	r3, [r7, #14]
    4dbe:	4313      	orrs	r3, r2
    4dc0:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4dc2:	687b      	ldr	r3, [r7, #4]
    4dc4:	89fa      	ldrh	r2, [r7, #14]
    4dc6:	841a      	strh	r2, [r3, #32]
}
    4dc8:	f107 0714 	add.w	r7, r7, #20
    4dcc:	46bd      	mov	sp, r7
    4dce:	bc80      	pop	{r7}
    4dd0:	4770      	bx	lr
    4dd2:	bf00      	nop

00004dd4 <TIM_OC3PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    4dd4:	b480      	push	{r7}
    4dd6:	b085      	sub	sp, #20
    4dd8:	af00      	add	r7, sp, #0
    4dda:	6078      	str	r0, [r7, #4]
    4ddc:	460b      	mov	r3, r1
    4dde:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4de0:	f04f 0300 	mov.w	r3, #0
    4de4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    4de6:	687b      	ldr	r3, [r7, #4]
    4de8:	8c1b      	ldrh	r3, [r3, #32]
    4dea:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
    4dec:	89fb      	ldrh	r3, [r7, #14]
    4dee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    4df2:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    4df4:	887b      	ldrh	r3, [r7, #2]
    4df6:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4dfa:	b29a      	uxth	r2, r3
    4dfc:	89fb      	ldrh	r3, [r7, #14]
    4dfe:	4313      	orrs	r3, r2
    4e00:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4e02:	687b      	ldr	r3, [r7, #4]
    4e04:	89fa      	ldrh	r2, [r7, #14]
    4e06:	841a      	strh	r2, [r3, #32]
}
    4e08:	f107 0714 	add.w	r7, r7, #20
    4e0c:	46bd      	mov	sp, r7
    4e0e:	bc80      	pop	{r7}
    4e10:	4770      	bx	lr
    4e12:	bf00      	nop

00004e14 <TIM_OC3NPolarityConfig>:
  *     @arg TIM_OCNPolarity_High: Output Compare active high
  *     @arg TIM_OCNPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC3NPolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCNPolarity)
{
    4e14:	b480      	push	{r7}
    4e16:	b085      	sub	sp, #20
    4e18:	af00      	add	r7, sp, #0
    4e1a:	6078      	str	r0, [r7, #4]
    4e1c:	460b      	mov	r3, r1
    4e1e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4e20:	f04f 0300 	mov.w	r3, #0
    4e24:	81fb      	strh	r3, [r7, #14]
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
    4e26:	687b      	ldr	r3, [r7, #4]
    4e28:	8c1b      	ldrh	r3, [r3, #32]
    4e2a:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
    4e2c:	89fb      	ldrh	r3, [r7, #14]
    4e2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    4e32:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    4e34:	887b      	ldrh	r3, [r7, #2]
    4e36:	ea4f 2303 	mov.w	r3, r3, lsl #8
    4e3a:	b29a      	uxth	r2, r3
    4e3c:	89fb      	ldrh	r3, [r7, #14]
    4e3e:	4313      	orrs	r3, r2
    4e40:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4e42:	687b      	ldr	r3, [r7, #4]
    4e44:	89fa      	ldrh	r2, [r7, #14]
    4e46:	841a      	strh	r2, [r3, #32]
}
    4e48:	f107 0714 	add.w	r7, r7, #20
    4e4c:	46bd      	mov	sp, r7
    4e4e:	bc80      	pop	{r7}
    4e50:	4770      	bx	lr
    4e52:	bf00      	nop

00004e54 <TIM_OC4PolarityConfig>:
  *     @arg TIM_OCPolarity_High: Output Compare active high
  *     @arg TIM_OCPolarity_Low: Output Compare active low
  * @retval None
  */
void TIM_OC4PolarityConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPolarity)
{
    4e54:	b480      	push	{r7}
    4e56:	b085      	sub	sp, #20
    4e58:	af00      	add	r7, sp, #0
    4e5a:	6078      	str	r0, [r7, #4]
    4e5c:	460b      	mov	r3, r1
    4e5e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccer = 0;
    4e60:	f04f 0300 	mov.w	r3, #0
    4e64:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  tmpccer = TIMx->CCER;
    4e66:	687b      	ldr	r3, [r7, #4]
    4e68:	8c1b      	ldrh	r3, [r3, #32]
    4e6a:	81fb      	strh	r3, [r7, #14]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
    4e6c:	89fb      	ldrh	r3, [r7, #14]
    4e6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4e72:	81fb      	strh	r3, [r7, #14]
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    4e74:	887b      	ldrh	r3, [r7, #2]
    4e76:	ea4f 3303 	mov.w	r3, r3, lsl #12
    4e7a:	b29a      	uxth	r2, r3
    4e7c:	89fb      	ldrh	r3, [r7, #14]
    4e7e:	4313      	orrs	r3, r2
    4e80:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
    4e82:	687b      	ldr	r3, [r7, #4]
    4e84:	89fa      	ldrh	r2, [r7, #14]
    4e86:	841a      	strh	r2, [r3, #32]
}
    4e88:	f107 0714 	add.w	r7, r7, #20
    4e8c:	46bd      	mov	sp, r7
    4e8e:	bc80      	pop	{r7}
    4e90:	4770      	bx	lr
    4e92:	bf00      	nop

00004e94 <TIM_CCxCmd>:
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *   This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    4e94:	b480      	push	{r7}
    4e96:	b085      	sub	sp, #20
    4e98:	af00      	add	r7, sp, #0
    4e9a:	6078      	str	r0, [r7, #4]
    4e9c:	4613      	mov	r3, r2
    4e9e:	460a      	mov	r2, r1
    4ea0:	807a      	strh	r2, [r7, #2]
    4ea2:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    4ea4:	f04f 0300 	mov.w	r3, #0
    4ea8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_Set << TIM_Channel;
    4eaa:	887b      	ldrh	r3, [r7, #2]
    4eac:	f04f 0201 	mov.w	r2, #1
    4eb0:	fa02 f303 	lsl.w	r3, r2, r3
    4eb4:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
    4eb6:	687b      	ldr	r3, [r7, #4]
    4eb8:	8c1b      	ldrh	r3, [r3, #32]
    4eba:	b29a      	uxth	r2, r3
    4ebc:	89fb      	ldrh	r3, [r7, #14]
    4ebe:	ea6f 0303 	mvn.w	r3, r3
    4ec2:	b29b      	uxth	r3, r3
    4ec4:	4013      	ands	r3, r2
    4ec6:	b29a      	uxth	r2, r3
    4ec8:	687b      	ldr	r3, [r7, #4]
    4eca:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
    4ecc:	687b      	ldr	r3, [r7, #4]
    4ece:	8c1b      	ldrh	r3, [r3, #32]
    4ed0:	b29a      	uxth	r2, r3
    4ed2:	8839      	ldrh	r1, [r7, #0]
    4ed4:	887b      	ldrh	r3, [r7, #2]
    4ed6:	fa01 f303 	lsl.w	r3, r1, r3
    4eda:	b29b      	uxth	r3, r3
    4edc:	4313      	orrs	r3, r2
    4ede:	b29a      	uxth	r2, r3
    4ee0:	687b      	ldr	r3, [r7, #4]
    4ee2:	841a      	strh	r2, [r3, #32]
}
    4ee4:	f107 0714 	add.w	r7, r7, #20
    4ee8:	46bd      	mov	sp, r7
    4eea:	bc80      	pop	{r7}
    4eec:	4770      	bx	lr
    4eee:	bf00      	nop

00004ef0 <TIM_CCxNCmd>:
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *   This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    4ef0:	b480      	push	{r7}
    4ef2:	b085      	sub	sp, #20
    4ef4:	af00      	add	r7, sp, #0
    4ef6:	6078      	str	r0, [r7, #4]
    4ef8:	4613      	mov	r3, r2
    4efa:	460a      	mov	r2, r1
    4efc:	807a      	strh	r2, [r7, #2]
    4efe:	803b      	strh	r3, [r7, #0]
  uint16_t tmp = 0;
    4f00:	f04f 0300 	mov.w	r3, #0
    4f04:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_Set << TIM_Channel;
    4f06:	887b      	ldrh	r3, [r7, #2]
    4f08:	f04f 0204 	mov.w	r2, #4
    4f0c:	fa02 f303 	lsl.w	r3, r2, r3
    4f10:	81fb      	strh	r3, [r7, #14]

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
    4f12:	687b      	ldr	r3, [r7, #4]
    4f14:	8c1b      	ldrh	r3, [r3, #32]
    4f16:	b29a      	uxth	r2, r3
    4f18:	89fb      	ldrh	r3, [r7, #14]
    4f1a:	ea6f 0303 	mvn.w	r3, r3
    4f1e:	b29b      	uxth	r3, r3
    4f20:	4013      	ands	r3, r2
    4f22:	b29a      	uxth	r2, r3
    4f24:	687b      	ldr	r3, [r7, #4]
    4f26:	841a      	strh	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
    4f28:	687b      	ldr	r3, [r7, #4]
    4f2a:	8c1b      	ldrh	r3, [r3, #32]
    4f2c:	b29a      	uxth	r2, r3
    4f2e:	8839      	ldrh	r1, [r7, #0]
    4f30:	887b      	ldrh	r3, [r7, #2]
    4f32:	fa01 f303 	lsl.w	r3, r1, r3
    4f36:	b29b      	uxth	r3, r3
    4f38:	4313      	orrs	r3, r2
    4f3a:	b29a      	uxth	r2, r3
    4f3c:	687b      	ldr	r3, [r7, #4]
    4f3e:	841a      	strh	r2, [r3, #32]
}
    4f40:	f107 0714 	add.w	r7, r7, #20
    4f44:	46bd      	mov	sp, r7
    4f46:	bc80      	pop	{r7}
    4f48:	4770      	bx	lr
    4f4a:	bf00      	nop

00004f4c <TIM_SelectOCxM>:
  *     @arg TIM_ForcedAction_Active
  *     @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    4f4c:	b480      	push	{r7}
    4f4e:	b085      	sub	sp, #20
    4f50:	af00      	add	r7, sp, #0
    4f52:	6078      	str	r0, [r7, #4]
    4f54:	4613      	mov	r3, r2
    4f56:	460a      	mov	r2, r1
    4f58:	807a      	strh	r2, [r7, #2]
    4f5a:	803b      	strh	r3, [r7, #0]
  uint32_t tmp = 0;
    4f5c:	f04f 0300 	mov.w	r3, #0
    4f60:	60fb      	str	r3, [r7, #12]
  uint16_t tmp1 = 0;
    4f62:	f04f 0300 	mov.w	r3, #0
    4f66:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_OCM(TIM_OCMode));

  tmp = (uint32_t) TIMx;
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	60fb      	str	r3, [r7, #12]
  tmp += CCMR_Offset;
    4f6c:	68fb      	ldr	r3, [r7, #12]
    4f6e:	f103 0318 	add.w	r3, r3, #24
    4f72:	60fb      	str	r3, [r7, #12]

  tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    4f74:	887b      	ldrh	r3, [r7, #2]
    4f76:	f04f 0201 	mov.w	r2, #1
    4f7a:	fa02 f303 	lsl.w	r3, r2, r3
    4f7e:	817b      	strh	r3, [r7, #10]

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
    4f80:	687b      	ldr	r3, [r7, #4]
    4f82:	8c1b      	ldrh	r3, [r3, #32]
    4f84:	b29a      	uxth	r2, r3
    4f86:	897b      	ldrh	r3, [r7, #10]
    4f88:	ea6f 0303 	mvn.w	r3, r3
    4f8c:	b29b      	uxth	r3, r3
    4f8e:	4013      	ands	r3, r2
    4f90:	b29a      	uxth	r2, r3
    4f92:	687b      	ldr	r3, [r7, #4]
    4f94:	841a      	strh	r2, [r3, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
    4f96:	887b      	ldrh	r3, [r7, #2]
    4f98:	2b00      	cmp	r3, #0
    4f9a:	d002      	beq.n	4fa2 <TIM_SelectOCxM+0x56>
    4f9c:	887b      	ldrh	r3, [r7, #2]
    4f9e:	2b08      	cmp	r3, #8
    4fa0:	d113      	bne.n	4fca <TIM_SelectOCxM+0x7e>
  {
    tmp += (TIM_Channel>>1);
    4fa2:	887b      	ldrh	r3, [r7, #2]
    4fa4:	ea4f 0353 	mov.w	r3, r3, lsr #1
    4fa8:	b29b      	uxth	r3, r3
    4faa:	68fa      	ldr	r2, [r7, #12]
    4fac:	18d3      	adds	r3, r2, r3
    4fae:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
    4fb0:	68fb      	ldr	r3, [r7, #12]
    4fb2:	68fa      	ldr	r2, [r7, #12]
    4fb4:	6812      	ldr	r2, [r2, #0]
    4fb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    4fba:	601a      	str	r2, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
    4fbc:	68fb      	ldr	r3, [r7, #12]
    4fbe:	68fa      	ldr	r2, [r7, #12]
    4fc0:	6811      	ldr	r1, [r2, #0]
    4fc2:	883a      	ldrh	r2, [r7, #0]
    4fc4:	430a      	orrs	r2, r1
    4fc6:	601a      	str	r2, [r3, #0]
    4fc8:	e018      	b.n	4ffc <TIM_SelectOCxM+0xb0>
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
    4fca:	887b      	ldrh	r3, [r7, #2]
    4fcc:	f1a3 0304 	sub.w	r3, r3, #4
    4fd0:	b29b      	uxth	r3, r3
    4fd2:	ea4f 0353 	mov.w	r3, r3, lsr #1
    4fd6:	b29b      	uxth	r3, r3
    4fd8:	68fa      	ldr	r2, [r7, #12]
    4fda:	18d3      	adds	r3, r2, r3
    4fdc:	60fb      	str	r3, [r7, #12]

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
    4fde:	68fb      	ldr	r3, [r7, #12]
    4fe0:	68fa      	ldr	r2, [r7, #12]
    4fe2:	6812      	ldr	r2, [r2, #0]
    4fe4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
    4fe8:	601a      	str	r2, [r3, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
    4fea:	68fb      	ldr	r3, [r7, #12]
    4fec:	68fa      	ldr	r2, [r7, #12]
    4fee:	6811      	ldr	r1, [r2, #0]
    4ff0:	883a      	ldrh	r2, [r7, #0]
    4ff2:	ea4f 2202 	mov.w	r2, r2, lsl #8
    4ff6:	b292      	uxth	r2, r2
    4ff8:	430a      	orrs	r2, r1
    4ffa:	601a      	str	r2, [r3, #0]
  }
}
    4ffc:	f107 0714 	add.w	r7, r7, #20
    5000:	46bd      	mov	sp, r7
    5002:	bc80      	pop	{r7}
    5004:	4770      	bx	lr
    5006:	bf00      	nop

00005008 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    5008:	b480      	push	{r7}
    500a:	b083      	sub	sp, #12
    500c:	af00      	add	r7, sp, #0
    500e:	6078      	str	r0, [r7, #4]
    5010:	460b      	mov	r3, r1
    5012:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5014:	78fb      	ldrb	r3, [r7, #3]
    5016:	2b00      	cmp	r3, #0
    5018:	d008      	beq.n	502c <TIM_UpdateDisableConfig+0x24>
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
    501a:	687b      	ldr	r3, [r7, #4]
    501c:	881b      	ldrh	r3, [r3, #0]
    501e:	b29b      	uxth	r3, r3
    5020:	f043 0302 	orr.w	r3, r3, #2
    5024:	b29a      	uxth	r2, r3
    5026:	687b      	ldr	r3, [r7, #4]
    5028:	801a      	strh	r2, [r3, #0]
    502a:	e007      	b.n	503c <TIM_UpdateDisableConfig+0x34>
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
    502c:	687b      	ldr	r3, [r7, #4]
    502e:	881b      	ldrh	r3, [r3, #0]
    5030:	b29b      	uxth	r3, r3
    5032:	f023 0302 	bic.w	r3, r3, #2
    5036:	b29a      	uxth	r2, r3
    5038:	687b      	ldr	r3, [r7, #4]
    503a:	801a      	strh	r2, [r3, #0]
  }
}
    503c:	f107 070c 	add.w	r7, r7, #12
    5040:	46bd      	mov	sp, r7
    5042:	bc80      	pop	{r7}
    5044:	4770      	bx	lr
    5046:	bf00      	nop

00005048 <TIM_UpdateRequestConfig>:
                                       through the slave mode controller.
  *     @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
    5048:	b480      	push	{r7}
    504a:	b083      	sub	sp, #12
    504c:	af00      	add	r7, sp, #0
    504e:	6078      	str	r0, [r7, #4]
    5050:	460b      	mov	r3, r1
    5052:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
    5054:	887b      	ldrh	r3, [r7, #2]
    5056:	2b00      	cmp	r3, #0
    5058:	d008      	beq.n	506c <TIM_UpdateRequestConfig+0x24>
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
    505a:	687b      	ldr	r3, [r7, #4]
    505c:	881b      	ldrh	r3, [r3, #0]
    505e:	b29b      	uxth	r3, r3
    5060:	f043 0304 	orr.w	r3, r3, #4
    5064:	b29a      	uxth	r2, r3
    5066:	687b      	ldr	r3, [r7, #4]
    5068:	801a      	strh	r2, [r3, #0]
    506a:	e007      	b.n	507c <TIM_UpdateRequestConfig+0x34>
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
    506c:	687b      	ldr	r3, [r7, #4]
    506e:	881b      	ldrh	r3, [r3, #0]
    5070:	b29b      	uxth	r3, r3
    5072:	f023 0304 	bic.w	r3, r3, #4
    5076:	b29a      	uxth	r2, r3
    5078:	687b      	ldr	r3, [r7, #4]
    507a:	801a      	strh	r2, [r3, #0]
  }
}
    507c:	f107 070c 	add.w	r7, r7, #12
    5080:	46bd      	mov	sp, r7
    5082:	bc80      	pop	{r7}
    5084:	4770      	bx	lr
    5086:	bf00      	nop

00005088 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
    5088:	b480      	push	{r7}
    508a:	b083      	sub	sp, #12
    508c:	af00      	add	r7, sp, #0
    508e:	6078      	str	r0, [r7, #4]
    5090:	460b      	mov	r3, r1
    5092:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
    5094:	78fb      	ldrb	r3, [r7, #3]
    5096:	2b00      	cmp	r3, #0
    5098:	d008      	beq.n	50ac <TIM_SelectHallSensor+0x24>
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
    509a:	687b      	ldr	r3, [r7, #4]
    509c:	889b      	ldrh	r3, [r3, #4]
    509e:	b29b      	uxth	r3, r3
    50a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    50a4:	b29a      	uxth	r2, r3
    50a6:	687b      	ldr	r3, [r7, #4]
    50a8:	809a      	strh	r2, [r3, #4]
    50aa:	e007      	b.n	50bc <TIM_SelectHallSensor+0x34>
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
    50ac:	687b      	ldr	r3, [r7, #4]
    50ae:	889b      	ldrh	r3, [r3, #4]
    50b0:	b29b      	uxth	r3, r3
    50b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    50b6:	b29a      	uxth	r2, r3
    50b8:	687b      	ldr	r3, [r7, #4]
    50ba:	809a      	strh	r2, [r3, #4]
  }
}
    50bc:	f107 070c 	add.w	r7, r7, #12
    50c0:	46bd      	mov	sp, r7
    50c2:	bc80      	pop	{r7}
    50c4:	4770      	bx	lr
    50c6:	bf00      	nop

000050c8 <TIM_SelectOnePulseMode>:
  *     @arg TIM_OPMode_Single
  *     @arg TIM_OPMode_Repetitive
  * @retval None
  */
void TIM_SelectOnePulseMode(TIM_TypeDef* TIMx, uint16_t TIM_OPMode)
{
    50c8:	b480      	push	{r7}
    50ca:	b083      	sub	sp, #12
    50cc:	af00      	add	r7, sp, #0
    50ce:	6078      	str	r0, [r7, #4]
    50d0:	460b      	mov	r3, r1
    50d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
    50d4:	687b      	ldr	r3, [r7, #4]
    50d6:	881b      	ldrh	r3, [r3, #0]
    50d8:	b29b      	uxth	r3, r3
    50da:	f023 0308 	bic.w	r3, r3, #8
    50de:	b29a      	uxth	r2, r3
    50e0:	687b      	ldr	r3, [r7, #4]
    50e2:	801a      	strh	r2, [r3, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
    50e4:	687b      	ldr	r3, [r7, #4]
    50e6:	881b      	ldrh	r3, [r3, #0]
    50e8:	b29a      	uxth	r2, r3
    50ea:	887b      	ldrh	r3, [r7, #2]
    50ec:	4313      	orrs	r3, r2
    50ee:	b29a      	uxth	r2, r3
    50f0:	687b      	ldr	r3, [r7, #4]
    50f2:	801a      	strh	r2, [r3, #0]
}
    50f4:	f107 070c 	add.w	r7, r7, #12
    50f8:	46bd      	mov	sp, r7
    50fa:	bc80      	pop	{r7}
    50fc:	4770      	bx	lr
    50fe:	bf00      	nop

00005100 <TIM_SelectOutputTrigger>:
  *     @arg TIM_TRGOSource_OC4Ref: OC4REF signal is used as the trigger output (TRGO).
  *
  * @retval None
  */
void TIM_SelectOutputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_TRGOSource)
{
    5100:	b480      	push	{r7}
    5102:	b083      	sub	sp, #12
    5104:	af00      	add	r7, sp, #0
    5106:	6078      	str	r0, [r7, #4]
    5108:	460b      	mov	r3, r1
    510a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST7_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));
  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
    510c:	687b      	ldr	r3, [r7, #4]
    510e:	889b      	ldrh	r3, [r3, #4]
    5110:	b29b      	uxth	r3, r3
    5112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    5116:	b29a      	uxth	r2, r3
    5118:	687b      	ldr	r3, [r7, #4]
    511a:	809a      	strh	r2, [r3, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
    511c:	687b      	ldr	r3, [r7, #4]
    511e:	889b      	ldrh	r3, [r3, #4]
    5120:	b29a      	uxth	r2, r3
    5122:	887b      	ldrh	r3, [r7, #2]
    5124:	4313      	orrs	r3, r2
    5126:	b29a      	uxth	r2, r3
    5128:	687b      	ldr	r3, [r7, #4]
    512a:	809a      	strh	r2, [r3, #4]
}
    512c:	f107 070c 	add.w	r7, r7, #12
    5130:	46bd      	mov	sp, r7
    5132:	bc80      	pop	{r7}
    5134:	4770      	bx	lr
    5136:	bf00      	nop

00005138 <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
    5138:	b480      	push	{r7}
    513a:	b083      	sub	sp, #12
    513c:	af00      	add	r7, sp, #0
    513e:	6078      	str	r0, [r7, #4]
    5140:	460b      	mov	r3, r1
    5142:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
    5144:	687b      	ldr	r3, [r7, #4]
    5146:	891b      	ldrh	r3, [r3, #8]
    5148:	b29b      	uxth	r3, r3
    514a:	f023 0307 	bic.w	r3, r3, #7
    514e:	b29a      	uxth	r2, r3
    5150:	687b      	ldr	r3, [r7, #4]
    5152:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
    5154:	687b      	ldr	r3, [r7, #4]
    5156:	891b      	ldrh	r3, [r3, #8]
    5158:	b29a      	uxth	r2, r3
    515a:	887b      	ldrh	r3, [r7, #2]
    515c:	4313      	orrs	r3, r2
    515e:	b29a      	uxth	r2, r3
    5160:	687b      	ldr	r3, [r7, #4]
    5162:	811a      	strh	r2, [r3, #8]
}
    5164:	f107 070c 	add.w	r7, r7, #12
    5168:	46bd      	mov	sp, r7
    516a:	bc80      	pop	{r7}
    516c:	4770      	bx	lr
    516e:	bf00      	nop

00005170 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
    5170:	b480      	push	{r7}
    5172:	b083      	sub	sp, #12
    5174:	af00      	add	r7, sp, #0
    5176:	6078      	str	r0, [r7, #4]
    5178:	460b      	mov	r3, r1
    517a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
    517c:	687b      	ldr	r3, [r7, #4]
    517e:	891b      	ldrh	r3, [r3, #8]
    5180:	b29b      	uxth	r3, r3
    5182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5186:	b29a      	uxth	r2, r3
    5188:	687b      	ldr	r3, [r7, #4]
    518a:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
    518c:	687b      	ldr	r3, [r7, #4]
    518e:	891b      	ldrh	r3, [r3, #8]
    5190:	b29a      	uxth	r2, r3
    5192:	887b      	ldrh	r3, [r7, #2]
    5194:	4313      	orrs	r3, r2
    5196:	b29a      	uxth	r2, r3
    5198:	687b      	ldr	r3, [r7, #4]
    519a:	811a      	strh	r2, [r3, #8]
}
    519c:	f107 070c 	add.w	r7, r7, #12
    51a0:	46bd      	mov	sp, r7
    51a2:	bc80      	pop	{r7}
    51a4:	4770      	bx	lr
    51a6:	bf00      	nop

000051a8 <TIM_SetCounter>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Counter: specifies the Counter register new value.
  * @retval None
  */
void TIM_SetCounter(TIM_TypeDef* TIMx, uint16_t Counter)
{
    51a8:	b480      	push	{r7}
    51aa:	b083      	sub	sp, #12
    51ac:	af00      	add	r7, sp, #0
    51ae:	6078      	str	r0, [r7, #4]
    51b0:	460b      	mov	r3, r1
    51b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
    51b4:	687b      	ldr	r3, [r7, #4]
    51b6:	887a      	ldrh	r2, [r7, #2]
    51b8:	849a      	strh	r2, [r3, #36]	; 0x24
}
    51ba:	f107 070c 	add.w	r7, r7, #12
    51be:	46bd      	mov	sp, r7
    51c0:	bc80      	pop	{r7}
    51c2:	4770      	bx	lr

000051c4 <TIM_SetAutoreload>:
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @param  Autoreload: specifies the Autoreload register new value.
  * @retval None
  */
void TIM_SetAutoreload(TIM_TypeDef* TIMx, uint16_t Autoreload)
{
    51c4:	b480      	push	{r7}
    51c6:	b083      	sub	sp, #12
    51c8:	af00      	add	r7, sp, #0
    51ca:	6078      	str	r0, [r7, #4]
    51cc:	460b      	mov	r3, r1
    51ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
    51d0:	687b      	ldr	r3, [r7, #4]
    51d2:	887a      	ldrh	r2, [r7, #2]
    51d4:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    51d6:	f107 070c 	add.w	r7, r7, #12
    51da:	46bd      	mov	sp, r7
    51dc:	bc80      	pop	{r7}
    51de:	4770      	bx	lr

000051e0 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
    51e0:	b480      	push	{r7}
    51e2:	b083      	sub	sp, #12
    51e4:	af00      	add	r7, sp, #0
    51e6:	6078      	str	r0, [r7, #4]
    51e8:	460b      	mov	r3, r1
    51ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
    51ec:	687b      	ldr	r3, [r7, #4]
    51ee:	887a      	ldrh	r2, [r7, #2]
    51f0:	869a      	strh	r2, [r3, #52]	; 0x34
}
    51f2:	f107 070c 	add.w	r7, r7, #12
    51f6:	46bd      	mov	sp, r7
    51f8:	bc80      	pop	{r7}
    51fa:	4770      	bx	lr

000051fc <TIM_SetCompare2>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @param  Compare2: specifies the Capture Compare2 register new value.
  * @retval None
  */
void TIM_SetCompare2(TIM_TypeDef* TIMx, uint16_t Compare2)
{
    51fc:	b480      	push	{r7}
    51fe:	b083      	sub	sp, #12
    5200:	af00      	add	r7, sp, #0
    5202:	6078      	str	r0, [r7, #4]
    5204:	460b      	mov	r3, r1
    5206:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
    5208:	687b      	ldr	r3, [r7, #4]
    520a:	887a      	ldrh	r2, [r7, #2]
    520c:	871a      	strh	r2, [r3, #56]	; 0x38
}
    520e:	f107 070c 	add.w	r7, r7, #12
    5212:	46bd      	mov	sp, r7
    5214:	bc80      	pop	{r7}
    5216:	4770      	bx	lr

00005218 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
    5218:	b480      	push	{r7}
    521a:	b083      	sub	sp, #12
    521c:	af00      	add	r7, sp, #0
    521e:	6078      	str	r0, [r7, #4]
    5220:	460b      	mov	r3, r1
    5222:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
    5224:	687b      	ldr	r3, [r7, #4]
    5226:	887a      	ldrh	r2, [r7, #2]
    5228:	879a      	strh	r2, [r3, #60]	; 0x3c
}
    522a:	f107 070c 	add.w	r7, r7, #12
    522e:	46bd      	mov	sp, r7
    5230:	bc80      	pop	{r7}
    5232:	4770      	bx	lr

00005234 <TIM_SetCompare4>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare4: specifies the Capture Compare4 register new value.
  * @retval None
  */
void TIM_SetCompare4(TIM_TypeDef* TIMx, uint16_t Compare4)
{
    5234:	b480      	push	{r7}
    5236:	b083      	sub	sp, #12
    5238:	af00      	add	r7, sp, #0
    523a:	6078      	str	r0, [r7, #4]
    523c:	460b      	mov	r3, r1
    523e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
    5240:	687b      	ldr	r3, [r7, #4]
    5242:	887a      	ldrh	r2, [r7, #2]
    5244:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
}
    5248:	f107 070c 	add.w	r7, r7, #12
    524c:	46bd      	mov	sp, r7
    524e:	bc80      	pop	{r7}
    5250:	4770      	bx	lr
    5252:	bf00      	nop

00005254 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    5254:	b480      	push	{r7}
    5256:	b083      	sub	sp, #12
    5258:	af00      	add	r7, sp, #0
    525a:	6078      	str	r0, [r7, #4]
    525c:	460b      	mov	r3, r1
    525e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
    5260:	687b      	ldr	r3, [r7, #4]
    5262:	8b1b      	ldrh	r3, [r3, #24]
    5264:	b29b      	uxth	r3, r3
    5266:	f023 030c 	bic.w	r3, r3, #12
    526a:	b29a      	uxth	r2, r3
    526c:	687b      	ldr	r3, [r7, #4]
    526e:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	8b1b      	ldrh	r3, [r3, #24]
    5274:	b29a      	uxth	r2, r3
    5276:	887b      	ldrh	r3, [r7, #2]
    5278:	4313      	orrs	r3, r2
    527a:	b29a      	uxth	r2, r3
    527c:	687b      	ldr	r3, [r7, #4]
    527e:	831a      	strh	r2, [r3, #24]
}
    5280:	f107 070c 	add.w	r7, r7, #12
    5284:	46bd      	mov	sp, r7
    5286:	bc80      	pop	{r7}
    5288:	4770      	bx	lr
    528a:	bf00      	nop

0000528c <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    528c:	b480      	push	{r7}
    528e:	b083      	sub	sp, #12
    5290:	af00      	add	r7, sp, #0
    5292:	6078      	str	r0, [r7, #4]
    5294:	460b      	mov	r3, r1
    5296:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
    5298:	687b      	ldr	r3, [r7, #4]
    529a:	8b1b      	ldrh	r3, [r3, #24]
    529c:	b29b      	uxth	r3, r3
    529e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    52a2:	b29a      	uxth	r2, r3
    52a4:	687b      	ldr	r3, [r7, #4]
    52a6:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
    52a8:	687b      	ldr	r3, [r7, #4]
    52aa:	8b1b      	ldrh	r3, [r3, #24]
    52ac:	b29a      	uxth	r2, r3
    52ae:	887b      	ldrh	r3, [r7, #2]
    52b0:	ea4f 2303 	mov.w	r3, r3, lsl #8
    52b4:	b29b      	uxth	r3, r3
    52b6:	4313      	orrs	r3, r2
    52b8:	b29a      	uxth	r2, r3
    52ba:	687b      	ldr	r3, [r7, #4]
    52bc:	831a      	strh	r2, [r3, #24]
}
    52be:	f107 070c 	add.w	r7, r7, #12
    52c2:	46bd      	mov	sp, r7
    52c4:	bc80      	pop	{r7}
    52c6:	4770      	bx	lr

000052c8 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
    52c8:	b480      	push	{r7}
    52ca:	b083      	sub	sp, #12
    52cc:	af00      	add	r7, sp, #0
    52ce:	6078      	str	r0, [r7, #4]
    52d0:	460b      	mov	r3, r1
    52d2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
    52d4:	687b      	ldr	r3, [r7, #4]
    52d6:	8b9b      	ldrh	r3, [r3, #28]
    52d8:	b29b      	uxth	r3, r3
    52da:	f023 030c 	bic.w	r3, r3, #12
    52de:	b29a      	uxth	r2, r3
    52e0:	687b      	ldr	r3, [r7, #4]
    52e2:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
    52e4:	687b      	ldr	r3, [r7, #4]
    52e6:	8b9b      	ldrh	r3, [r3, #28]
    52e8:	b29a      	uxth	r2, r3
    52ea:	887b      	ldrh	r3, [r7, #2]
    52ec:	4313      	orrs	r3, r2
    52ee:	b29a      	uxth	r2, r3
    52f0:	687b      	ldr	r3, [r7, #4]
    52f2:	839a      	strh	r2, [r3, #28]
}
    52f4:	f107 070c 	add.w	r7, r7, #12
    52f8:	46bd      	mov	sp, r7
    52fa:	bc80      	pop	{r7}
    52fc:	4770      	bx	lr
    52fe:	bf00      	nop

00005300 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
    5300:	b480      	push	{r7}
    5302:	b083      	sub	sp, #12
    5304:	af00      	add	r7, sp, #0
    5306:	6078      	str	r0, [r7, #4]
    5308:	460b      	mov	r3, r1
    530a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
    530c:	687b      	ldr	r3, [r7, #4]
    530e:	8b9b      	ldrh	r3, [r3, #28]
    5310:	b29b      	uxth	r3, r3
    5312:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
    5316:	b29a      	uxth	r2, r3
    5318:	687b      	ldr	r3, [r7, #4]
    531a:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
    531c:	687b      	ldr	r3, [r7, #4]
    531e:	8b9b      	ldrh	r3, [r3, #28]
    5320:	b29a      	uxth	r2, r3
    5322:	887b      	ldrh	r3, [r7, #2]
    5324:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5328:	b29b      	uxth	r3, r3
    532a:	4313      	orrs	r3, r2
    532c:	b29a      	uxth	r2, r3
    532e:	687b      	ldr	r3, [r7, #4]
    5330:	839a      	strh	r2, [r3, #28]
}
    5332:	f107 070c 	add.w	r7, r7, #12
    5336:	46bd      	mov	sp, r7
    5338:	bc80      	pop	{r7}
    533a:	4770      	bx	lr

0000533c <TIM_SetClockDivision>:
  *     @arg TIM_CKD_DIV2: TDTS = 2*Tck_tim
  *     @arg TIM_CKD_DIV4: TDTS = 4*Tck_tim
  * @retval None
  */
void TIM_SetClockDivision(TIM_TypeDef* TIMx, uint16_t TIM_CKD)
{
    533c:	b480      	push	{r7}
    533e:	b083      	sub	sp, #12
    5340:	af00      	add	r7, sp, #0
    5342:	6078      	str	r0, [r7, #4]
    5344:	460b      	mov	r3, r1
    5346:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
    5348:	687b      	ldr	r3, [r7, #4]
    534a:	881b      	ldrh	r3, [r3, #0]
    534c:	b29b      	uxth	r3, r3
    534e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    5352:	b29a      	uxth	r2, r3
    5354:	687b      	ldr	r3, [r7, #4]
    5356:	801a      	strh	r2, [r3, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
    5358:	687b      	ldr	r3, [r7, #4]
    535a:	881b      	ldrh	r3, [r3, #0]
    535c:	b29a      	uxth	r2, r3
    535e:	887b      	ldrh	r3, [r7, #2]
    5360:	4313      	orrs	r3, r2
    5362:	b29a      	uxth	r2, r3
    5364:	687b      	ldr	r3, [r7, #4]
    5366:	801a      	strh	r2, [r3, #0]
}
    5368:	f107 070c 	add.w	r7, r7, #12
    536c:	46bd      	mov	sp, r7
    536e:	bc80      	pop	{r7}
    5370:	4770      	bx	lr
    5372:	bf00      	nop

00005374 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
    5374:	b480      	push	{r7}
    5376:	b083      	sub	sp, #12
    5378:	af00      	add	r7, sp, #0
    537a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
    537c:	687b      	ldr	r3, [r7, #4]
    537e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    5380:	b29b      	uxth	r3, r3
}
    5382:	4618      	mov	r0, r3
    5384:	f107 070c 	add.w	r7, r7, #12
    5388:	46bd      	mov	sp, r7
    538a:	bc80      	pop	{r7}
    538c:	4770      	bx	lr
    538e:	bf00      	nop

00005390 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
    5390:	b480      	push	{r7}
    5392:	b083      	sub	sp, #12
    5394:	af00      	add	r7, sp, #0
    5396:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
    5398:	687b      	ldr	r3, [r7, #4]
    539a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
    539c:	b29b      	uxth	r3, r3
}
    539e:	4618      	mov	r0, r3
    53a0:	f107 070c 	add.w	r7, r7, #12
    53a4:	46bd      	mov	sp, r7
    53a6:	bc80      	pop	{r7}
    53a8:	4770      	bx	lr
    53aa:	bf00      	nop

000053ac <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
    53ac:	b480      	push	{r7}
    53ae:	b083      	sub	sp, #12
    53b0:	af00      	add	r7, sp, #0
    53b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
    53b4:	687b      	ldr	r3, [r7, #4]
    53b6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
    53b8:	b29b      	uxth	r3, r3
}
    53ba:	4618      	mov	r0, r3
    53bc:	f107 070c 	add.w	r7, r7, #12
    53c0:	46bd      	mov	sp, r7
    53c2:	bc80      	pop	{r7}
    53c4:	4770      	bx	lr
    53c6:	bf00      	nop

000053c8 <TIM_GetCapture4>:
  * @brief  Gets the TIMx Input Capture 4 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 4 Register value.
  */
uint16_t TIM_GetCapture4(TIM_TypeDef* TIMx)
{
    53c8:	b480      	push	{r7}
    53ca:	b083      	sub	sp, #12
    53cc:	af00      	add	r7, sp, #0
    53ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
    53d0:	687b      	ldr	r3, [r7, #4]
    53d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
    53d6:	b29b      	uxth	r3, r3
}
    53d8:	4618      	mov	r0, r3
    53da:	f107 070c 	add.w	r7, r7, #12
    53de:	46bd      	mov	sp, r7
    53e0:	bc80      	pop	{r7}
    53e2:	4770      	bx	lr

000053e4 <TIM_GetCounter>:
  * @brief  Gets the TIMx Counter value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Counter Register value.
  */
uint16_t TIM_GetCounter(TIM_TypeDef* TIMx)
{
    53e4:	b480      	push	{r7}
    53e6:	b083      	sub	sp, #12
    53e8:	af00      	add	r7, sp, #0
    53ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Counter Register value */
  return TIMx->CNT;
    53ec:	687b      	ldr	r3, [r7, #4]
    53ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    53f0:	b29b      	uxth	r3, r3
}
    53f2:	4618      	mov	r0, r3
    53f4:	f107 070c 	add.w	r7, r7, #12
    53f8:	46bd      	mov	sp, r7
    53fa:	bc80      	pop	{r7}
    53fc:	4770      	bx	lr
    53fe:	bf00      	nop

00005400 <TIM_GetPrescaler>:
  * @brief  Gets the TIMx Prescaler value.
  * @param  TIMx: where x can be 1 to 17 to select the TIM peripheral.
  * @retval Prescaler Register value.
  */
uint16_t TIM_GetPrescaler(TIM_TypeDef* TIMx)
{
    5400:	b480      	push	{r7}
    5402:	b083      	sub	sp, #12
    5404:	af00      	add	r7, sp, #0
    5406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  /* Get the Prescaler Register value */
  return TIMx->PSC;
    5408:	687b      	ldr	r3, [r7, #4]
    540a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    540c:	b29b      	uxth	r3, r3
}
    540e:	4618      	mov	r0, r3
    5410:	f107 070c 	add.w	r7, r7, #12
    5414:	46bd      	mov	sp, r7
    5416:	bc80      	pop	{r7}
    5418:	4770      	bx	lr
    541a:	bf00      	nop

0000541c <TIM_GetFlagStatus>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval The new state of TIM_FLAG (SET or RESET).
  */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{ 
    541c:	b480      	push	{r7}
    541e:	b085      	sub	sp, #20
    5420:	af00      	add	r7, sp, #0
    5422:	6078      	str	r0, [r7, #4]
    5424:	460b      	mov	r3, r1
    5426:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    5428:	f04f 0300 	mov.w	r3, #0
    542c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
    542e:	687b      	ldr	r3, [r7, #4]
    5430:	8a1b      	ldrh	r3, [r3, #16]
    5432:	b29a      	uxth	r2, r3
    5434:	887b      	ldrh	r3, [r7, #2]
    5436:	4013      	ands	r3, r2
    5438:	b29b      	uxth	r3, r3
    543a:	2b00      	cmp	r3, #0
    543c:	d003      	beq.n	5446 <TIM_GetFlagStatus+0x2a>
  {
    bitstatus = SET;
    543e:	f04f 0301 	mov.w	r3, #1
    5442:	73fb      	strb	r3, [r7, #15]
    5444:	e002      	b.n	544c <TIM_GetFlagStatus+0x30>
  }
  else
  {
    bitstatus = RESET;
    5446:	f04f 0300 	mov.w	r3, #0
    544a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    544c:	7bfb      	ldrb	r3, [r7, #15]
}
    544e:	4618      	mov	r0, r3
    5450:	f107 0714 	add.w	r7, r7, #20
    5454:	46bd      	mov	sp, r7
    5456:	bc80      	pop	{r7}
    5458:	4770      	bx	lr
    545a:	bf00      	nop

0000545c <TIM_ClearFlag>:
  *   - TIM_FLAG_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_FLAG_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.   
  * @retval None
  */
void TIM_ClearFlag(TIM_TypeDef* TIMx, uint16_t TIM_FLAG)
{  
    545c:	b480      	push	{r7}
    545e:	b083      	sub	sp, #12
    5460:	af00      	add	r7, sp, #0
    5462:	6078      	str	r0, [r7, #4]
    5464:	460b      	mov	r3, r1
    5466:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
    5468:	887b      	ldrh	r3, [r7, #2]
    546a:	ea6f 0303 	mvn.w	r3, r3
    546e:	b29a      	uxth	r2, r3
    5470:	687b      	ldr	r3, [r7, #4]
    5472:	821a      	strh	r2, [r3, #16]
}
    5474:	f107 070c 	add.w	r7, r7, #12
    5478:	46bd      	mov	sp, r7
    547a:	bc80      	pop	{r7}
    547c:	4770      	bx	lr
    547e:	bf00      	nop

00005480 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    5480:	b480      	push	{r7}
    5482:	b085      	sub	sp, #20
    5484:	af00      	add	r7, sp, #0
    5486:	6078      	str	r0, [r7, #4]
    5488:	460b      	mov	r3, r1
    548a:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
    548c:	f04f 0300 	mov.w	r3, #0
    5490:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
    5492:	f04f 0300 	mov.w	r3, #0
    5496:	81bb      	strh	r3, [r7, #12]
    5498:	f04f 0300 	mov.w	r3, #0
    549c:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
    549e:	687b      	ldr	r3, [r7, #4]
    54a0:	8a1b      	ldrh	r3, [r3, #16]
    54a2:	b29a      	uxth	r2, r3
    54a4:	887b      	ldrh	r3, [r7, #2]
    54a6:	4013      	ands	r3, r2
    54a8:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
    54aa:	687b      	ldr	r3, [r7, #4]
    54ac:	899b      	ldrh	r3, [r3, #12]
    54ae:	b29a      	uxth	r2, r3
    54b0:	887b      	ldrh	r3, [r7, #2]
    54b2:	4013      	ands	r3, r2
    54b4:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    54b6:	89bb      	ldrh	r3, [r7, #12]
    54b8:	2b00      	cmp	r3, #0
    54ba:	d006      	beq.n	54ca <TIM_GetITStatus+0x4a>
    54bc:	897b      	ldrh	r3, [r7, #10]
    54be:	2b00      	cmp	r3, #0
    54c0:	d003      	beq.n	54ca <TIM_GetITStatus+0x4a>
  {
    bitstatus = SET;
    54c2:	f04f 0301 	mov.w	r3, #1
    54c6:	73fb      	strb	r3, [r7, #15]
    54c8:	e002      	b.n	54d0 <TIM_GetITStatus+0x50>
  }
  else
  {
    bitstatus = RESET;
    54ca:	f04f 0300 	mov.w	r3, #0
    54ce:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
    54d0:	7bfb      	ldrb	r3, [r7, #15]
}
    54d2:	4618      	mov	r0, r3
    54d4:	f107 0714 	add.w	r7, r7, #20
    54d8:	46bd      	mov	sp, r7
    54da:	bc80      	pop	{r7}
    54dc:	4770      	bx	lr
    54de:	bf00      	nop

000054e0 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
    54e0:	b480      	push	{r7}
    54e2:	b083      	sub	sp, #12
    54e4:	af00      	add	r7, sp, #0
    54e6:	6078      	str	r0, [r7, #4]
    54e8:	460b      	mov	r3, r1
    54ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
    54ec:	887b      	ldrh	r3, [r7, #2]
    54ee:	ea6f 0303 	mvn.w	r3, r3
    54f2:	b29a      	uxth	r2, r3
    54f4:	687b      	ldr	r3, [r7, #4]
    54f6:	821a      	strh	r2, [r3, #16]
}
    54f8:	f107 070c 	add.w	r7, r7, #12
    54fc:	46bd      	mov	sp, r7
    54fe:	bc80      	pop	{r7}
    5500:	4770      	bx	lr
    5502:	bf00      	nop

00005504 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    5504:	b480      	push	{r7}
    5506:	b087      	sub	sp, #28
    5508:	af00      	add	r7, sp, #0
    550a:	60f8      	str	r0, [r7, #12]
    550c:	8179      	strh	r1, [r7, #10]
    550e:	813a      	strh	r2, [r7, #8]
    5510:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
    5512:	f04f 0300 	mov.w	r3, #0
    5516:	82bb      	strh	r3, [r7, #20]
    5518:	f04f 0300 	mov.w	r3, #0
    551c:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
    551e:	68fb      	ldr	r3, [r7, #12]
    5520:	8c1b      	ldrh	r3, [r3, #32]
    5522:	b29b      	uxth	r3, r3
    5524:	f023 0301 	bic.w	r3, r3, #1
    5528:	b29a      	uxth	r2, r3
    552a:	68fb      	ldr	r3, [r7, #12]
    552c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    552e:	68fb      	ldr	r3, [r7, #12]
    5530:	8b1b      	ldrh	r3, [r3, #24]
    5532:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5534:	68fb      	ldr	r3, [r7, #12]
    5536:	8c1b      	ldrh	r3, [r3, #32]
    5538:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
    553a:	8abb      	ldrh	r3, [r7, #20]
    553c:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    5540:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    5542:	88fb      	ldrh	r3, [r7, #6]
    5544:	ea4f 1303 	mov.w	r3, r3, lsl #4
    5548:	b29a      	uxth	r2, r3
    554a:	893b      	ldrh	r3, [r7, #8]
    554c:	4313      	orrs	r3, r2
    554e:	b29a      	uxth	r2, r3
    5550:	8abb      	ldrh	r3, [r7, #20]
    5552:	4313      	orrs	r3, r2
    5554:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5556:	68fa      	ldr	r2, [r7, #12]
    5558:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    555c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5560:	429a      	cmp	r2, r3
    5562:	d01f      	beq.n	55a4 <TI1_Config+0xa0>
    5564:	68fa      	ldr	r2, [r7, #12]
    5566:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    556a:	f2c4 0301 	movt	r3, #16385	; 0x4001
    556e:	429a      	cmp	r2, r3
    5570:	d018      	beq.n	55a4 <TI1_Config+0xa0>
    5572:	68fb      	ldr	r3, [r7, #12]
    5574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    5578:	d014      	beq.n	55a4 <TI1_Config+0xa0>
    557a:	68fa      	ldr	r2, [r7, #12]
    557c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5580:	f2c4 0300 	movt	r3, #16384	; 0x4000
    5584:	429a      	cmp	r2, r3
    5586:	d00d      	beq.n	55a4 <TI1_Config+0xa0>
    5588:	68fa      	ldr	r2, [r7, #12]
    558a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    558e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    5592:	429a      	cmp	r2, r3
    5594:	d006      	beq.n	55a4 <TI1_Config+0xa0>
     (TIMx == TIM4) ||(TIMx == TIM5))
    5596:	68fa      	ldr	r2, [r7, #12]
    5598:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    559c:	f2c4 0300 	movt	r3, #16384	; 0x4000
    55a0:	429a      	cmp	r2, r3
    55a2:	d10b      	bne.n	55bc <TI1_Config+0xb8>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
    55a4:	8afb      	ldrh	r3, [r7, #22]
    55a6:	f023 0302 	bic.w	r3, r3, #2
    55aa:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    55ac:	897a      	ldrh	r2, [r7, #10]
    55ae:	8afb      	ldrh	r3, [r7, #22]
    55b0:	4313      	orrs	r3, r2
    55b2:	b29b      	uxth	r3, r3
    55b4:	f043 0301 	orr.w	r3, r3, #1
    55b8:	82fb      	strh	r3, [r7, #22]
    55ba:	e00a      	b.n	55d2 <TI1_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
    55bc:	8afb      	ldrh	r3, [r7, #22]
    55be:	f023 030a 	bic.w	r3, r3, #10
    55c2:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
    55c4:	897a      	ldrh	r2, [r7, #10]
    55c6:	8afb      	ldrh	r3, [r7, #22]
    55c8:	4313      	orrs	r3, r2
    55ca:	b29b      	uxth	r3, r3
    55cc:	f043 0301 	orr.w	r3, r3, #1
    55d0:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
    55d2:	68fb      	ldr	r3, [r7, #12]
    55d4:	8aba      	ldrh	r2, [r7, #20]
    55d6:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    55d8:	68fb      	ldr	r3, [r7, #12]
    55da:	8afa      	ldrh	r2, [r7, #22]
    55dc:	841a      	strh	r2, [r3, #32]
}
    55de:	f107 071c 	add.w	r7, r7, #28
    55e2:	46bd      	mov	sp, r7
    55e4:	bc80      	pop	{r7}
    55e6:	4770      	bx	lr

000055e8 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    55e8:	b480      	push	{r7}
    55ea:	b087      	sub	sp, #28
    55ec:	af00      	add	r7, sp, #0
    55ee:	60f8      	str	r0, [r7, #12]
    55f0:	8179      	strh	r1, [r7, #10]
    55f2:	813a      	strh	r2, [r7, #8]
    55f4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    55f6:	f04f 0300 	mov.w	r3, #0
    55fa:	82bb      	strh	r3, [r7, #20]
    55fc:	f04f 0300 	mov.w	r3, #0
    5600:	82fb      	strh	r3, [r7, #22]
    5602:	f04f 0300 	mov.w	r3, #0
    5606:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
    5608:	68fb      	ldr	r3, [r7, #12]
    560a:	8c1b      	ldrh	r3, [r3, #32]
    560c:	b29b      	uxth	r3, r3
    560e:	f023 0310 	bic.w	r3, r3, #16
    5612:	b29a      	uxth	r2, r3
    5614:	68fb      	ldr	r3, [r7, #12]
    5616:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
    5618:	68fb      	ldr	r3, [r7, #12]
    561a:	8b1b      	ldrh	r3, [r3, #24]
    561c:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    561e:	68fb      	ldr	r3, [r7, #12]
    5620:	8c1b      	ldrh	r3, [r3, #32]
    5622:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
    5624:	897b      	ldrh	r3, [r7, #10]
    5626:	ea4f 1303 	mov.w	r3, r3, lsl #4
    562a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
    562c:	8abb      	ldrh	r3, [r7, #20]
    562e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    5632:	ea4f 5303 	mov.w	r3, r3, lsl #20
    5636:	ea4f 5313 	mov.w	r3, r3, lsr #20
    563a:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    563c:	88fb      	ldrh	r3, [r7, #6]
    563e:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5642:	b29a      	uxth	r2, r3
    5644:	8abb      	ldrh	r3, [r7, #20]
    5646:	4313      	orrs	r3, r2
    5648:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    564a:	893b      	ldrh	r3, [r7, #8]
    564c:	ea4f 2303 	mov.w	r3, r3, lsl #8
    5650:	b29a      	uxth	r2, r3
    5652:	8abb      	ldrh	r3, [r7, #20]
    5654:	4313      	orrs	r3, r2
    5656:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5658:	68fa      	ldr	r2, [r7, #12]
    565a:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    565e:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5662:	429a      	cmp	r2, r3
    5664:	d01f      	beq.n	56a6 <TI2_Config+0xbe>
    5666:	68fa      	ldr	r2, [r7, #12]
    5668:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    566c:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5670:	429a      	cmp	r2, r3
    5672:	d018      	beq.n	56a6 <TI2_Config+0xbe>
    5674:	68fb      	ldr	r3, [r7, #12]
    5676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    567a:	d014      	beq.n	56a6 <TI2_Config+0xbe>
    567c:	68fa      	ldr	r2, [r7, #12]
    567e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5682:	f2c4 0300 	movt	r3, #16384	; 0x4000
    5686:	429a      	cmp	r2, r3
    5688:	d00d      	beq.n	56a6 <TI2_Config+0xbe>
    568a:	68fa      	ldr	r2, [r7, #12]
    568c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    5690:	f2c4 0300 	movt	r3, #16384	; 0x4000
    5694:	429a      	cmp	r2, r3
    5696:	d006      	beq.n	56a6 <TI2_Config+0xbe>
     (TIMx == TIM4) ||(TIMx == TIM5))
    5698:	68fa      	ldr	r2, [r7, #12]
    569a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    569e:	f2c4 0300 	movt	r3, #16384	; 0x4000
    56a2:	429a      	cmp	r2, r3
    56a4:	d10b      	bne.n	56be <TI2_Config+0xd6>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
    56a6:	8afb      	ldrh	r3, [r7, #22]
    56a8:	f023 0320 	bic.w	r3, r3, #32
    56ac:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
    56ae:	8a7a      	ldrh	r2, [r7, #18]
    56b0:	8afb      	ldrh	r3, [r7, #22]
    56b2:	4313      	orrs	r3, r2
    56b4:	b29b      	uxth	r3, r3
    56b6:	f043 0310 	orr.w	r3, r3, #16
    56ba:	82fb      	strh	r3, [r7, #22]
    56bc:	e00a      	b.n	56d4 <TI2_Config+0xec>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
    56be:	8afb      	ldrh	r3, [r7, #22]
    56c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
    56c4:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
    56c6:	897a      	ldrh	r2, [r7, #10]
    56c8:	8afb      	ldrh	r3, [r7, #22]
    56ca:	4313      	orrs	r3, r2
    56cc:	b29b      	uxth	r3, r3
    56ce:	f043 0310 	orr.w	r3, r3, #16
    56d2:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
    56d4:	68fb      	ldr	r3, [r7, #12]
    56d6:	8aba      	ldrh	r2, [r7, #20]
    56d8:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
    56da:	68fb      	ldr	r3, [r7, #12]
    56dc:	8afa      	ldrh	r2, [r7, #22]
    56de:	841a      	strh	r2, [r3, #32]
}
    56e0:	f107 071c 	add.w	r7, r7, #28
    56e4:	46bd      	mov	sp, r7
    56e6:	bc80      	pop	{r7}
    56e8:	4770      	bx	lr
    56ea:	bf00      	nop

000056ec <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    56ec:	b480      	push	{r7}
    56ee:	b087      	sub	sp, #28
    56f0:	af00      	add	r7, sp, #0
    56f2:	60f8      	str	r0, [r7, #12]
    56f4:	8179      	strh	r1, [r7, #10]
    56f6:	813a      	strh	r2, [r7, #8]
    56f8:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    56fa:	f04f 0300 	mov.w	r3, #0
    56fe:	82bb      	strh	r3, [r7, #20]
    5700:	f04f 0300 	mov.w	r3, #0
    5704:	82fb      	strh	r3, [r7, #22]
    5706:	f04f 0300 	mov.w	r3, #0
    570a:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
    570c:	68fb      	ldr	r3, [r7, #12]
    570e:	8c1b      	ldrh	r3, [r3, #32]
    5710:	b29b      	uxth	r3, r3
    5712:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    5716:	b29a      	uxth	r2, r3
    5718:	68fb      	ldr	r3, [r7, #12]
    571a:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    571c:	68fb      	ldr	r3, [r7, #12]
    571e:	8b9b      	ldrh	r3, [r3, #28]
    5720:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5722:	68fb      	ldr	r3, [r7, #12]
    5724:	8c1b      	ldrh	r3, [r3, #32]
    5726:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
    5728:	897b      	ldrh	r3, [r7, #10]
    572a:	ea4f 2303 	mov.w	r3, r3, lsl #8
    572e:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
    5730:	8abb      	ldrh	r3, [r7, #20]
    5732:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
    5736:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    5738:	88fb      	ldrh	r3, [r7, #6]
    573a:	ea4f 1303 	mov.w	r3, r3, lsl #4
    573e:	b29a      	uxth	r2, r3
    5740:	893b      	ldrh	r3, [r7, #8]
    5742:	4313      	orrs	r3, r2
    5744:	b29a      	uxth	r2, r3
    5746:	8abb      	ldrh	r3, [r7, #20]
    5748:	4313      	orrs	r3, r2
    574a:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    574c:	68fa      	ldr	r2, [r7, #12]
    574e:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    5752:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5756:	429a      	cmp	r2, r3
    5758:	d01f      	beq.n	579a <TI3_Config+0xae>
    575a:	68fa      	ldr	r2, [r7, #12]
    575c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    5760:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5764:	429a      	cmp	r2, r3
    5766:	d018      	beq.n	579a <TI3_Config+0xae>
    5768:	68fb      	ldr	r3, [r7, #12]
    576a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    576e:	d014      	beq.n	579a <TI3_Config+0xae>
    5770:	68fa      	ldr	r2, [r7, #12]
    5772:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5776:	f2c4 0300 	movt	r3, #16384	; 0x4000
    577a:	429a      	cmp	r2, r3
    577c:	d00d      	beq.n	579a <TI3_Config+0xae>
    577e:	68fa      	ldr	r2, [r7, #12]
    5780:	f44f 6300 	mov.w	r3, #2048	; 0x800
    5784:	f2c4 0300 	movt	r3, #16384	; 0x4000
    5788:	429a      	cmp	r2, r3
    578a:	d006      	beq.n	579a <TI3_Config+0xae>
     (TIMx == TIM4) ||(TIMx == TIM5))
    578c:	68fa      	ldr	r2, [r7, #12]
    578e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    5792:	f2c4 0300 	movt	r3, #16384	; 0x4000
    5796:	429a      	cmp	r2, r3
    5798:	d10b      	bne.n	57b2 <TI3_Config+0xc6>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
    579a:	8afb      	ldrh	r3, [r7, #22]
    579c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    57a0:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
    57a2:	8a7a      	ldrh	r2, [r7, #18]
    57a4:	8afb      	ldrh	r3, [r7, #22]
    57a6:	4313      	orrs	r3, r2
    57a8:	b29b      	uxth	r3, r3
    57aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    57ae:	82fb      	strh	r3, [r7, #22]
    57b0:	e00a      	b.n	57c8 <TI3_Config+0xdc>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
    57b2:	8afb      	ldrh	r3, [r7, #22]
    57b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
    57b8:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
    57ba:	897a      	ldrh	r2, [r7, #10]
    57bc:	8afb      	ldrh	r3, [r7, #22]
    57be:	4313      	orrs	r3, r2
    57c0:	b29b      	uxth	r3, r3
    57c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    57c6:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    57c8:	68fb      	ldr	r3, [r7, #12]
    57ca:	8aba      	ldrh	r2, [r7, #20]
    57cc:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    57ce:	68fb      	ldr	r3, [r7, #12]
    57d0:	8afa      	ldrh	r2, [r7, #22]
    57d2:	841a      	strh	r2, [r3, #32]
}
    57d4:	f107 071c 	add.w	r7, r7, #28
    57d8:	46bd      	mov	sp, r7
    57da:	bc80      	pop	{r7}
    57dc:	4770      	bx	lr
    57de:	bf00      	nop

000057e0 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    57e0:	b480      	push	{r7}
    57e2:	b087      	sub	sp, #28
    57e4:	af00      	add	r7, sp, #0
    57e6:	60f8      	str	r0, [r7, #12]
    57e8:	8179      	strh	r1, [r7, #10]
    57ea:	813a      	strh	r2, [r7, #8]
    57ec:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    57ee:	f04f 0300 	mov.w	r3, #0
    57f2:	82bb      	strh	r3, [r7, #20]
    57f4:	f04f 0300 	mov.w	r3, #0
    57f8:	82fb      	strh	r3, [r7, #22]
    57fa:	f04f 0300 	mov.w	r3, #0
    57fe:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
    5800:	68fb      	ldr	r3, [r7, #12]
    5802:	8c1b      	ldrh	r3, [r3, #32]
    5804:	b29b      	uxth	r3, r3
    5806:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    580a:	b29a      	uxth	r2, r3
    580c:	68fb      	ldr	r3, [r7, #12]
    580e:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
    5810:	68fb      	ldr	r3, [r7, #12]
    5812:	8b9b      	ldrh	r3, [r3, #28]
    5814:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
    5816:	68fb      	ldr	r3, [r7, #12]
    5818:	8c1b      	ldrh	r3, [r3, #32]
    581a:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
    581c:	897b      	ldrh	r3, [r7, #10]
    581e:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5822:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
    5824:	8abb      	ldrh	r3, [r7, #20]
    5826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    582a:	ea4f 5303 	mov.w	r3, r3, lsl #20
    582e:	ea4f 5313 	mov.w	r3, r3, lsr #20
    5832:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    5834:	893b      	ldrh	r3, [r7, #8]
    5836:	ea4f 2303 	mov.w	r3, r3, lsl #8
    583a:	b29a      	uxth	r2, r3
    583c:	8abb      	ldrh	r3, [r7, #20]
    583e:	4313      	orrs	r3, r2
    5840:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    5842:	88fb      	ldrh	r3, [r7, #6]
    5844:	ea4f 3303 	mov.w	r3, r3, lsl #12
    5848:	b29a      	uxth	r2, r3
    584a:	8abb      	ldrh	r3, [r7, #20]
    584c:	4313      	orrs	r3, r2
    584e:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
    5850:	68fa      	ldr	r2, [r7, #12]
    5852:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
    5856:	f2c4 0301 	movt	r3, #16385	; 0x4001
    585a:	429a      	cmp	r2, r3
    585c:	d01f      	beq.n	589e <TI4_Config+0xbe>
    585e:	68fa      	ldr	r2, [r7, #12]
    5860:	f44f 5350 	mov.w	r3, #13312	; 0x3400
    5864:	f2c4 0301 	movt	r3, #16385	; 0x4001
    5868:	429a      	cmp	r2, r3
    586a:	d018      	beq.n	589e <TI4_Config+0xbe>
    586c:	68fb      	ldr	r3, [r7, #12]
    586e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
    5872:	d014      	beq.n	589e <TI4_Config+0xbe>
    5874:	68fa      	ldr	r2, [r7, #12]
    5876:	f44f 6380 	mov.w	r3, #1024	; 0x400
    587a:	f2c4 0300 	movt	r3, #16384	; 0x4000
    587e:	429a      	cmp	r2, r3
    5880:	d00d      	beq.n	589e <TI4_Config+0xbe>
    5882:	68fa      	ldr	r2, [r7, #12]
    5884:	f44f 6300 	mov.w	r3, #2048	; 0x800
    5888:	f2c4 0300 	movt	r3, #16384	; 0x4000
    588c:	429a      	cmp	r2, r3
    588e:	d006      	beq.n	589e <TI4_Config+0xbe>
     (TIMx == TIM4) ||(TIMx == TIM5))
    5890:	68fa      	ldr	r2, [r7, #12]
    5892:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    5896:	f2c4 0300 	movt	r3, #16384	; 0x4000
    589a:	429a      	cmp	r2, r3
    589c:	d10b      	bne.n	58b6 <TI4_Config+0xd6>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
    589e:	8afb      	ldrh	r3, [r7, #22]
    58a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    58a4:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
    58a6:	8a7a      	ldrh	r2, [r7, #18]
    58a8:	8afb      	ldrh	r3, [r7, #22]
    58aa:	4313      	orrs	r3, r2
    58ac:	b29b      	uxth	r3, r3
    58ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    58b2:	82fb      	strh	r3, [r7, #22]
    58b4:	e00e      	b.n	58d4 <TI4_Config+0xf4>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
    58b6:	8afb      	ldrh	r3, [r7, #22]
    58b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    58bc:	ea4f 4343 	mov.w	r3, r3, lsl #17
    58c0:	ea4f 4353 	mov.w	r3, r3, lsr #17
    58c4:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
    58c6:	897a      	ldrh	r2, [r7, #10]
    58c8:	8afb      	ldrh	r3, [r7, #22]
    58ca:	4313      	orrs	r3, r2
    58cc:	b29b      	uxth	r3, r3
    58ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    58d2:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
    58d4:	68fb      	ldr	r3, [r7, #12]
    58d6:	8aba      	ldrh	r2, [r7, #20]
    58d8:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
    58da:	68fb      	ldr	r3, [r7, #12]
    58dc:	8afa      	ldrh	r2, [r7, #22]
    58de:	841a      	strh	r2, [r3, #32]
}
    58e0:	f107 071c 	add.w	r7, r7, #28
    58e4:	46bd      	mov	sp, r7
    58e6:	bc80      	pop	{r7}
    58e8:	4770      	bx	lr
    58ea:	bf00      	nop

000058ec <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    58ec:	b480      	push	{r7}
    58ee:	b083      	sub	sp, #12
    58f0:	af00      	add	r7, sp, #0
    58f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
    58f4:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    58f8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    58fc:	687a      	ldr	r2, [r7, #4]
    58fe:	f042 62be 	orr.w	r2, r2, #99614720	; 0x5f00000
    5902:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    5906:	60da      	str	r2, [r3, #12]
}
    5908:	f107 070c 	add.w	r7, r7, #12
    590c:	46bd      	mov	sp, r7
    590e:	bc80      	pop	{r7}
    5910:	4770      	bx	lr
    5912:	bf00      	nop

00005914 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
    5914:	b480      	push	{r7}
    5916:	b087      	sub	sp, #28
    5918:	af00      	add	r7, sp, #0
    591a:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
    591c:	f04f 0300 	mov.w	r3, #0
    5920:	617b      	str	r3, [r7, #20]
    5922:	f04f 0300 	mov.w	r3, #0
    5926:	613b      	str	r3, [r7, #16]
    5928:	f04f 030f 	mov.w	r3, #15
    592c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    592e:	687b      	ldr	r3, [r7, #4]
    5930:	78db      	ldrb	r3, [r3, #3]
    5932:	2b00      	cmp	r3, #0
    5934:	d047      	beq.n	59c6 <NVIC_Init+0xb2>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
    5936:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    593a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    593e:	68db      	ldr	r3, [r3, #12]
    5940:	ea6f 0303 	mvn.w	r3, r3
    5944:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5948:	ea4f 2313 	mov.w	r3, r3, lsr #8
    594c:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
    594e:	697b      	ldr	r3, [r7, #20]
    5950:	f1c3 0304 	rsb	r3, r3, #4
    5954:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
    5956:	697b      	ldr	r3, [r7, #20]
    5958:	68fa      	ldr	r2, [r7, #12]
    595a:	fa22 f303 	lsr.w	r3, r2, r3
    595e:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    5960:	687b      	ldr	r3, [r7, #4]
    5962:	785b      	ldrb	r3, [r3, #1]
    5964:	461a      	mov	r2, r3
    5966:	693b      	ldr	r3, [r7, #16]
    5968:	fa02 f303 	lsl.w	r3, r2, r3
    596c:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
    596e:	687b      	ldr	r3, [r7, #4]
    5970:	789b      	ldrb	r3, [r3, #2]
    5972:	461a      	mov	r2, r3
    5974:	68fb      	ldr	r3, [r7, #12]
    5976:	4013      	ands	r3, r2
    5978:	697a      	ldr	r2, [r7, #20]
    597a:	4313      	orrs	r3, r2
    597c:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
    597e:	697b      	ldr	r3, [r7, #20]
    5980:	ea4f 1303 	mov.w	r3, r3, lsl #4
    5984:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    5986:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    598a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    598e:	687a      	ldr	r2, [r7, #4]
    5990:	7812      	ldrb	r2, [r2, #0]
    5992:	4611      	mov	r1, r2
    5994:	697a      	ldr	r2, [r7, #20]
    5996:	b2d2      	uxtb	r2, r2
    5998:	185b      	adds	r3, r3, r1
    599a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    599e:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    59a2:	f2ce 0300 	movt	r3, #57344	; 0xe000
    59a6:	687a      	ldr	r2, [r7, #4]
    59a8:	7812      	ldrb	r2, [r2, #0]
    59aa:	ea4f 1252 	mov.w	r2, r2, lsr #5
    59ae:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    59b0:	6879      	ldr	r1, [r7, #4]
    59b2:	7809      	ldrb	r1, [r1, #0]
    59b4:	f001 011f 	and.w	r1, r1, #31
    59b8:	f04f 0001 	mov.w	r0, #1
    59bc:	fa00 f101 	lsl.w	r1, r0, r1
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    59c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    59c4:	e014      	b.n	59f0 <NVIC_Init+0xdc>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    59c6:	f44f 4361 	mov.w	r3, #57600	; 0xe100
    59ca:	f2ce 0300 	movt	r3, #57344	; 0xe000
    59ce:	687a      	ldr	r2, [r7, #4]
    59d0:	7812      	ldrb	r2, [r2, #0]
    59d2:	ea4f 1252 	mov.w	r2, r2, lsr #5
    59d6:	b2d2      	uxtb	r2, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
    59d8:	6879      	ldr	r1, [r7, #4]
    59da:	7809      	ldrb	r1, [r1, #0]
    59dc:	f001 011f 	and.w	r1, r1, #31
    59e0:	f04f 0001 	mov.w	r0, #1
    59e4:	fa00 f101 	lsl.w	r1, r0, r1
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
    59e8:	f102 0220 	add.w	r2, r2, #32
    59ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
    59f0:	f107 071c 	add.w	r7, r7, #28
    59f4:	46bd      	mov	sp, r7
    59f6:	bc80      	pop	{r7}
    59f8:	4770      	bx	lr
    59fa:	bf00      	nop

000059fc <NVIC_SetVectorTable>:
  * @param  Offset: Vector Table base offset field. This value must be a multiple 
  *         of 0x200.
  * @retval None
  */
void NVIC_SetVectorTable(uint32_t NVIC_VectTab, uint32_t Offset)
{ 
    59fc:	b480      	push	{r7}
    59fe:	b083      	sub	sp, #12
    5a00:	af00      	add	r7, sp, #0
    5a02:	6078      	str	r0, [r7, #4]
    5a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_VECTTAB(NVIC_VectTab));
  assert_param(IS_NVIC_OFFSET(Offset));  
   
  SCB->VTOR = NVIC_VectTab | (Offset & (uint32_t)0x1FFFFF80);
    5a06:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    5a0a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5a0e:	683a      	ldr	r2, [r7, #0]
    5a10:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
    5a14:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    5a18:	6879      	ldr	r1, [r7, #4]
    5a1a:	430a      	orrs	r2, r1
    5a1c:	609a      	str	r2, [r3, #8]
}
    5a1e:	f107 070c 	add.w	r7, r7, #12
    5a22:	46bd      	mov	sp, r7
    5a24:	bc80      	pop	{r7}
    5a26:	4770      	bx	lr

00005a28 <NVIC_SystemLPConfig>:
  *     @arg NVIC_LP_SLEEPONEXIT
  * @param  NewState: new state of LP condition. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
    5a28:	b480      	push	{r7}
    5a2a:	b083      	sub	sp, #12
    5a2c:	af00      	add	r7, sp, #0
    5a2e:	4602      	mov	r2, r0
    5a30:	460b      	mov	r3, r1
    5a32:	71fa      	strb	r2, [r7, #7]
    5a34:	71bb      	strb	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
    5a36:	79bb      	ldrb	r3, [r7, #6]
    5a38:	2b00      	cmp	r3, #0
    5a3a:	d00c      	beq.n	5a56 <NVIC_SystemLPConfig+0x2e>
  {
    SCB->SCR |= LowPowerMode;
    5a3c:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    5a40:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5a44:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    5a48:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5a4c:	6911      	ldr	r1, [r2, #16]
    5a4e:	79fa      	ldrb	r2, [r7, #7]
    5a50:	430a      	orrs	r2, r1
    5a52:	611a      	str	r2, [r3, #16]
    5a54:	e00d      	b.n	5a72 <NVIC_SystemLPConfig+0x4a>
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
    5a56:	f44f 436d 	mov.w	r3, #60672	; 0xed00
    5a5a:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5a5e:	f44f 426d 	mov.w	r2, #60672	; 0xed00
    5a62:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5a66:	6911      	ldr	r1, [r2, #16]
    5a68:	79fa      	ldrb	r2, [r7, #7]
    5a6a:	ea6f 0202 	mvn.w	r2, r2
    5a6e:	400a      	ands	r2, r1
    5a70:	611a      	str	r2, [r3, #16]
  }
}
    5a72:	f107 070c 	add.w	r7, r7, #12
    5a76:	46bd      	mov	sp, r7
    5a78:	bc80      	pop	{r7}
    5a7a:	4770      	bx	lr

00005a7c <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
    5a7c:	b480      	push	{r7}
    5a7e:	b083      	sub	sp, #12
    5a80:	af00      	add	r7, sp, #0
    5a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
    5a84:	687b      	ldr	r3, [r7, #4]
    5a86:	2b04      	cmp	r3, #4
    5a88:	d10c      	bne.n	5aa4 <SysTick_CLKSourceConfig+0x28>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
    5a8a:	f24e 0310 	movw	r3, #57360	; 0xe010
    5a8e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5a92:	f24e 0210 	movw	r2, #57360	; 0xe010
    5a96:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5a9a:	6812      	ldr	r2, [r2, #0]
    5a9c:	f042 0204 	orr.w	r2, r2, #4
    5aa0:	601a      	str	r2, [r3, #0]
    5aa2:	e00b      	b.n	5abc <SysTick_CLKSourceConfig+0x40>
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
    5aa4:	f24e 0310 	movw	r3, #57360	; 0xe010
    5aa8:	f2ce 0300 	movt	r3, #57344	; 0xe000
    5aac:	f24e 0210 	movw	r2, #57360	; 0xe010
    5ab0:	f2ce 0200 	movt	r2, #57344	; 0xe000
    5ab4:	6812      	ldr	r2, [r2, #0]
    5ab6:	f022 0204 	bic.w	r2, r2, #4
    5aba:	601a      	str	r2, [r3, #0]
  }
}
    5abc:	f107 070c 	add.w	r7, r7, #12
    5ac0:	46bd      	mov	sp, r7
    5ac2:	bc80      	pop	{r7}
    5ac4:	4770      	bx	lr
    5ac6:	bf00      	nop

00005ac8 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    5ac8:	b580      	push	{r7, lr}
    5aca:	b086      	sub	sp, #24
    5acc:	af00      	add	r7, sp, #0
    5ace:	60f8      	str	r0, [r7, #12]
    5ad0:	60b9      	str	r1, [r7, #8]
    5ad2:	607a      	str	r2, [r7, #4]
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    5ad4:	f04f 0038 	mov.w	r0, #56	; 0x38
    5ad8:	f7fa fb18 	bl	10c <pvPortMalloc>
    5adc:	6138      	str	r0, [r7, #16]
	if( pxCoRoutine )
    5ade:	693b      	ldr	r3, [r7, #16]
    5ae0:	2b00      	cmp	r3, #0
    5ae2:	d061      	beq.n	5ba8 <xCoRoutineCreate+0xe0>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    5ae4:	f244 43b4 	movw	r3, #17588	; 0x44b4
    5ae8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5aec:	681b      	ldr	r3, [r3, #0]
    5aee:	2b00      	cmp	r3, #0
    5af0:	d107      	bne.n	5b02 <xCoRoutineCreate+0x3a>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    5af2:	f244 43b4 	movw	r3, #17588	; 0x44b4
    5af6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5afa:	693a      	ldr	r2, [r7, #16]
    5afc:	601a      	str	r2, [r3, #0]
			prvInitialiseCoRoutineLists();
    5afe:	f000 fa35 	bl	5f6c <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    5b02:	68bb      	ldr	r3, [r7, #8]
    5b04:	2b01      	cmp	r3, #1
    5b06:	d902      	bls.n	5b0e <xCoRoutineCreate+0x46>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    5b08:	f04f 0301 	mov.w	r3, #1
    5b0c:	60bb      	str	r3, [r7, #8]
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    5b0e:	693b      	ldr	r3, [r7, #16]
    5b10:	f04f 0200 	mov.w	r2, #0
    5b14:	869a      	strh	r2, [r3, #52]	; 0x34
		pxCoRoutine->uxPriority = uxPriority;
    5b16:	693b      	ldr	r3, [r7, #16]
    5b18:	68ba      	ldr	r2, [r7, #8]
    5b1a:	62da      	str	r2, [r3, #44]	; 0x2c
		pxCoRoutine->uxIndex = uxIndex;
    5b1c:	693b      	ldr	r3, [r7, #16]
    5b1e:	687a      	ldr	r2, [r7, #4]
    5b20:	631a      	str	r2, [r3, #48]	; 0x30
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    5b22:	693b      	ldr	r3, [r7, #16]
    5b24:	68fa      	ldr	r2, [r7, #12]
    5b26:	601a      	str	r2, [r3, #0]

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    5b28:	693b      	ldr	r3, [r7, #16]
    5b2a:	f103 0304 	add.w	r3, r3, #4
    5b2e:	4618      	mov	r0, r3
    5b30:	f000 fab2 	bl	6098 <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    5b34:	693b      	ldr	r3, [r7, #16]
    5b36:	f103 0318 	add.w	r3, r3, #24
    5b3a:	4618      	mov	r0, r3
    5b3c:	f000 faac 	bl	6098 <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    5b40:	693b      	ldr	r3, [r7, #16]
    5b42:	693a      	ldr	r2, [r7, #16]
    5b44:	611a      	str	r2, [r3, #16]
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    5b46:	693b      	ldr	r3, [r7, #16]
    5b48:	693a      	ldr	r2, [r7, #16]
    5b4a:	625a      	str	r2, [r3, #36]	; 0x24
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    5b4c:	68bb      	ldr	r3, [r7, #8]
    5b4e:	f1c3 0205 	rsb	r2, r3, #5
    5b52:	693b      	ldr	r3, [r7, #16]
    5b54:	619a      	str	r2, [r3, #24]
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    5b56:	693b      	ldr	r3, [r7, #16]
    5b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b5a:	f244 43b8 	movw	r3, #17592	; 0x44b8
    5b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b62:	681b      	ldr	r3, [r3, #0]
    5b64:	429a      	cmp	r2, r3
    5b66:	d906      	bls.n	5b76 <xCoRoutineCreate+0xae>
    5b68:	693b      	ldr	r3, [r7, #16]
    5b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b6c:	f244 43b8 	movw	r3, #17592	; 0x44b8
    5b70:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b74:	601a      	str	r2, [r3, #0]
    5b76:	693b      	ldr	r3, [r7, #16]
    5b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5b7a:	4613      	mov	r3, r2
    5b7c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b80:	189b      	adds	r3, r3, r2
    5b82:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5b86:	461a      	mov	r2, r3
    5b88:	f244 4348 	movw	r3, #17480	; 0x4448
    5b8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5b90:	18d2      	adds	r2, r2, r3
    5b92:	693b      	ldr	r3, [r7, #16]
    5b94:	f103 0304 	add.w	r3, r3, #4
    5b98:	4610      	mov	r0, r2
    5b9a:	4619      	mov	r1, r3
    5b9c:	f000 fa8a 	bl	60b4 <vListInsertEnd>

		xReturn = pdPASS;
    5ba0:	f04f 0301 	mov.w	r3, #1
    5ba4:	617b      	str	r3, [r7, #20]
    5ba6:	e002      	b.n	5bae <xCoRoutineCreate+0xe6>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    5ba8:	f04f 33ff 	mov.w	r3, #4294967295
    5bac:	617b      	str	r3, [r7, #20]
	}
	
	return xReturn;	
    5bae:	697b      	ldr	r3, [r7, #20]
}
    5bb0:	4618      	mov	r0, r3
    5bb2:	f107 0718 	add.w	r7, r7, #24
    5bb6:	46bd      	mov	sp, r7
    5bb8:	bd80      	pop	{r7, pc}
    5bba:	bf00      	nop

00005bbc <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    5bbc:	b580      	push	{r7, lr}
    5bbe:	b084      	sub	sp, #16
    5bc0:	af00      	add	r7, sp, #0
    5bc2:	6078      	str	r0, [r7, #4]
    5bc4:	6039      	str	r1, [r7, #0]
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    5bc6:	f244 43bc 	movw	r3, #17596	; 0x44bc
    5bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bce:	681a      	ldr	r2, [r3, #0]
    5bd0:	687b      	ldr	r3, [r7, #4]
    5bd2:	18d3      	adds	r3, r2, r3
    5bd4:	60fb      	str	r3, [r7, #12]

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    5bd6:	f244 43b4 	movw	r3, #17588	; 0x44b4
    5bda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bde:	681b      	ldr	r3, [r3, #0]
    5be0:	f103 0304 	add.w	r3, r3, #4
    5be4:	4618      	mov	r0, r3
    5be6:	f000 fac7 	bl	6178 <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    5bea:	f244 43b4 	movw	r3, #17588	; 0x44b4
    5bee:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5bf2:	681b      	ldr	r3, [r3, #0]
    5bf4:	68fa      	ldr	r2, [r7, #12]
    5bf6:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xCoRoutineTickCount )
    5bf8:	f244 43bc 	movw	r3, #17596	; 0x44bc
    5bfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c00:	681b      	ldr	r3, [r3, #0]
    5c02:	68fa      	ldr	r2, [r7, #12]
    5c04:	429a      	cmp	r2, r3
    5c06:	d210      	bcs.n	5c2a <vCoRoutineAddToDelayedList+0x6e>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    5c08:	f244 439c 	movw	r3, #17564	; 0x449c
    5c0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c10:	681a      	ldr	r2, [r3, #0]
    5c12:	f244 43b4 	movw	r3, #17588	; 0x44b4
    5c16:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c1a:	681b      	ldr	r3, [r3, #0]
    5c1c:	f103 0304 	add.w	r3, r3, #4
    5c20:	4610      	mov	r0, r2
    5c22:	4619      	mov	r1, r3
    5c24:	f000 fa6e 	bl	6104 <vListInsert>
    5c28:	e00f      	b.n	5c4a <vCoRoutineAddToDelayedList+0x8e>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    5c2a:	f244 4398 	movw	r3, #17560	; 0x4498
    5c2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c32:	681a      	ldr	r2, [r3, #0]
    5c34:	f244 43b4 	movw	r3, #17588	; 0x44b4
    5c38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c3c:	681b      	ldr	r3, [r3, #0]
    5c3e:	f103 0304 	add.w	r3, r3, #4
    5c42:	4610      	mov	r0, r2
    5c44:	4619      	mov	r1, r3
    5c46:	f000 fa5d 	bl	6104 <vListInsert>
	}

	if( pxEventList )
    5c4a:	683b      	ldr	r3, [r7, #0]
    5c4c:	2b00      	cmp	r3, #0
    5c4e:	d00a      	beq.n	5c66 <vCoRoutineAddToDelayedList+0xaa>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    5c50:	f244 43b4 	movw	r3, #17588	; 0x44b4
    5c54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c58:	681b      	ldr	r3, [r3, #0]
    5c5a:	f103 0318 	add.w	r3, r3, #24
    5c5e:	6838      	ldr	r0, [r7, #0]
    5c60:	4619      	mov	r1, r3
    5c62:	f000 fa4f 	bl	6104 <vListInsert>
	}
}
    5c66:	f107 0710 	add.w	r7, r7, #16
    5c6a:	46bd      	mov	sp, r7
    5c6c:	bd80      	pop	{r7, pc}
    5c6e:	bf00      	nop

00005c70 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    5c70:	b580      	push	{r7, lr}
    5c72:	b082      	sub	sp, #8
    5c74:	af00      	add	r7, sp, #0
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    5c76:	e03f      	b.n	5cf8 <prvCheckPendingReadyList+0x88>
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    5c78:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5c7c:	f380 8811 	msr	BASEPRI, r0
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    5c80:	f244 43a0 	movw	r3, #17568	; 0x44a0
    5c84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5c88:	68db      	ldr	r3, [r3, #12]
    5c8a:	68db      	ldr	r3, [r3, #12]
    5c8c:	607b      	str	r3, [r7, #4]
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    5c8e:	687b      	ldr	r3, [r7, #4]
    5c90:	f103 0318 	add.w	r3, r3, #24
    5c94:	4618      	mov	r0, r3
    5c96:	f000 fa6f 	bl	6178 <vListRemove>
		}
		portENABLE_INTERRUPTS();
    5c9a:	f04f 0000 	mov.w	r0, #0
    5c9e:	f380 8811 	msr	BASEPRI, r0

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    5ca2:	687b      	ldr	r3, [r7, #4]
    5ca4:	f103 0304 	add.w	r3, r3, #4
    5ca8:	4618      	mov	r0, r3
    5caa:	f000 fa65 	bl	6178 <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    5cae:	687b      	ldr	r3, [r7, #4]
    5cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5cb2:	f244 43b8 	movw	r3, #17592	; 0x44b8
    5cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5cba:	681b      	ldr	r3, [r3, #0]
    5cbc:	429a      	cmp	r2, r3
    5cbe:	d906      	bls.n	5cce <prvCheckPendingReadyList+0x5e>
    5cc0:	687b      	ldr	r3, [r7, #4]
    5cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5cc4:	f244 43b8 	movw	r3, #17592	; 0x44b8
    5cc8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ccc:	601a      	str	r2, [r3, #0]
    5cce:	687b      	ldr	r3, [r7, #4]
    5cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5cd2:	4613      	mov	r3, r2
    5cd4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5cd8:	189b      	adds	r3, r3, r2
    5cda:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5cde:	461a      	mov	r2, r3
    5ce0:	f244 4348 	movw	r3, #17480	; 0x4448
    5ce4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ce8:	18d2      	adds	r2, r2, r3
    5cea:	687b      	ldr	r3, [r7, #4]
    5cec:	f103 0304 	add.w	r3, r3, #4
    5cf0:	4610      	mov	r0, r2
    5cf2:	4619      	mov	r1, r3
    5cf4:	f000 f9de 	bl	60b4 <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    5cf8:	f244 43a0 	movw	r3, #17568	; 0x44a0
    5cfc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d00:	681b      	ldr	r3, [r3, #0]
    5d02:	2b00      	cmp	r3, #0
    5d04:	d1b8      	bne.n	5c78 <prvCheckPendingReadyList+0x8>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    5d06:	f107 0708 	add.w	r7, r7, #8
    5d0a:	46bd      	mov	sp, r7
    5d0c:	bd80      	pop	{r7, pc}
    5d0e:	bf00      	nop

00005d10 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    5d10:	b580      	push	{r7, lr}
    5d12:	b082      	sub	sp, #8
    5d14:	af00      	add	r7, sp, #0
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    5d16:	f001 fb55 	bl	73c4 <xTaskGetTickCount>
    5d1a:	4602      	mov	r2, r0
    5d1c:	f244 43c0 	movw	r3, #17600	; 0x44c0
    5d20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d24:	681b      	ldr	r3, [r3, #0]
    5d26:	1ad2      	subs	r2, r2, r3
    5d28:	f244 43c4 	movw	r3, #17604	; 0x44c4
    5d2c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d30:	601a      	str	r2, [r3, #0]
	while( xPassedTicks )
    5d32:	e08f      	b.n	5e54 <prvCheckDelayedList+0x144>
	{
		xCoRoutineTickCount++;
    5d34:	f244 43bc 	movw	r3, #17596	; 0x44bc
    5d38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d3c:	681b      	ldr	r3, [r3, #0]
    5d3e:	f103 0201 	add.w	r2, r3, #1
    5d42:	f244 43bc 	movw	r3, #17596	; 0x44bc
    5d46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d4a:	601a      	str	r2, [r3, #0]
		xPassedTicks--;
    5d4c:	f244 43c4 	movw	r3, #17604	; 0x44c4
    5d50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d54:	681b      	ldr	r3, [r3, #0]
    5d56:	f103 32ff 	add.w	r2, r3, #4294967295
    5d5a:	f244 43c4 	movw	r3, #17604	; 0x44c4
    5d5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d62:	601a      	str	r2, [r3, #0]

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    5d64:	f244 43bc 	movw	r3, #17596	; 0x44bc
    5d68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d6c:	681b      	ldr	r3, [r3, #0]
    5d6e:	2b00      	cmp	r3, #0
    5d70:	d165      	bne.n	5e3e <prvCheckDelayedList+0x12e>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    5d72:	f244 4398 	movw	r3, #17560	; 0x4498
    5d76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d7a:	681b      	ldr	r3, [r3, #0]
    5d7c:	607b      	str	r3, [r7, #4]
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    5d7e:	f244 439c 	movw	r3, #17564	; 0x449c
    5d82:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d86:	681a      	ldr	r2, [r3, #0]
    5d88:	f244 4398 	movw	r3, #17560	; 0x4498
    5d8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d90:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedCoRoutineList = pxTemp;
    5d92:	f244 439c 	movw	r3, #17564	; 0x449c
    5d96:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5d9a:	687a      	ldr	r2, [r7, #4]
    5d9c:	601a      	str	r2, [r3, #0]
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    5d9e:	e04e      	b.n	5e3e <prvCheckDelayedList+0x12e>
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    5da0:	f244 4398 	movw	r3, #17560	; 0x4498
    5da4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5da8:	681b      	ldr	r3, [r3, #0]
    5daa:	68db      	ldr	r3, [r3, #12]
    5dac:	68db      	ldr	r3, [r3, #12]
    5dae:	603b      	str	r3, [r7, #0]

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    5db0:	683b      	ldr	r3, [r7, #0]
    5db2:	685a      	ldr	r2, [r3, #4]
    5db4:	f244 43bc 	movw	r3, #17596	; 0x44bc
    5db8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dbc:	681b      	ldr	r3, [r3, #0]
    5dbe:	429a      	cmp	r2, r3
    5dc0:	d847      	bhi.n	5e52 <prvCheckDelayedList+0x142>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    5dc2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    5dc6:	f380 8811 	msr	BASEPRI, r0
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    5dca:	683b      	ldr	r3, [r7, #0]
    5dcc:	f103 0304 	add.w	r3, r3, #4
    5dd0:	4618      	mov	r0, r3
    5dd2:	f000 f9d1 	bl	6178 <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    5dd6:	683b      	ldr	r3, [r7, #0]
    5dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5dda:	2b00      	cmp	r3, #0
    5ddc:	d005      	beq.n	5dea <prvCheckDelayedList+0xda>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    5dde:	683b      	ldr	r3, [r7, #0]
    5de0:	f103 0318 	add.w	r3, r3, #24
    5de4:	4618      	mov	r0, r3
    5de6:	f000 f9c7 	bl	6178 <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    5dea:	f04f 0000 	mov.w	r0, #0
    5dee:	f380 8811 	msr	BASEPRI, r0

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    5df2:	683b      	ldr	r3, [r7, #0]
    5df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5df6:	f244 43b8 	movw	r3, #17592	; 0x44b8
    5dfa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5dfe:	681b      	ldr	r3, [r3, #0]
    5e00:	429a      	cmp	r2, r3
    5e02:	d906      	bls.n	5e12 <prvCheckDelayedList+0x102>
    5e04:	683b      	ldr	r3, [r7, #0]
    5e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5e08:	f244 43b8 	movw	r3, #17592	; 0x44b8
    5e0c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e10:	601a      	str	r2, [r3, #0]
    5e12:	683b      	ldr	r3, [r7, #0]
    5e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5e16:	4613      	mov	r3, r2
    5e18:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e1c:	189b      	adds	r3, r3, r2
    5e1e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5e22:	461a      	mov	r2, r3
    5e24:	f244 4348 	movw	r3, #17480	; 0x4448
    5e28:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e2c:	18d2      	adds	r2, r2, r3
    5e2e:	683b      	ldr	r3, [r7, #0]
    5e30:	f103 0304 	add.w	r3, r3, #4
    5e34:	4610      	mov	r0, r2
    5e36:	4619      	mov	r1, r3
    5e38:	f000 f93c 	bl	60b4 <vListInsertEnd>
    5e3c:	e000      	b.n	5e40 <prvCheckDelayedList+0x130>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    5e3e:	bf00      	nop
    5e40:	f244 4398 	movw	r3, #17560	; 0x4498
    5e44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e48:	681b      	ldr	r3, [r3, #0]
    5e4a:	681b      	ldr	r3, [r3, #0]
    5e4c:	2b00      	cmp	r3, #0
    5e4e:	d1a7      	bne.n	5da0 <prvCheckDelayedList+0x90>
    5e50:	e000      	b.n	5e54 <prvCheckDelayedList+0x144>
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
			{			
				/* Timeout not yet expired. */																			
				break;																				
    5e52:	bf00      	nop
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    5e54:	f244 43c4 	movw	r3, #17604	; 0x44c4
    5e58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e5c:	681b      	ldr	r3, [r3, #0]
    5e5e:	2b00      	cmp	r3, #0
    5e60:	f47f af68 	bne.w	5d34 <prvCheckDelayedList+0x24>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    5e64:	f244 43bc 	movw	r3, #17596	; 0x44bc
    5e68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e6c:	681a      	ldr	r2, [r3, #0]
    5e6e:	f244 43c0 	movw	r3, #17600	; 0x44c0
    5e72:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e76:	601a      	str	r2, [r3, #0]
}
    5e78:	f107 0708 	add.w	r7, r7, #8
    5e7c:	46bd      	mov	sp, r7
    5e7e:	bd80      	pop	{r7, pc}

00005e80 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    5e80:	b580      	push	{r7, lr}
    5e82:	b082      	sub	sp, #8
    5e84:	af00      	add	r7, sp, #0
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    5e86:	f7ff fef3 	bl	5c70 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    5e8a:	f7ff ff41 	bl	5d10 <prvCheckDelayedList>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    5e8e:	e012      	b.n	5eb6 <vCoRoutineSchedule+0x36>
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    5e90:	f244 43b8 	movw	r3, #17592	; 0x44b8
    5e94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5e98:	681b      	ldr	r3, [r3, #0]
    5e9a:	2b00      	cmp	r3, #0
    5e9c:	d060      	beq.n	5f60 <vCoRoutineSchedule+0xe0>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    5e9e:	f244 43b8 	movw	r3, #17592	; 0x44b8
    5ea2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ea6:	681b      	ldr	r3, [r3, #0]
    5ea8:	f103 32ff 	add.w	r2, r3, #4294967295
    5eac:	f244 43b8 	movw	r3, #17592	; 0x44b8
    5eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5eb4:	601a      	str	r2, [r3, #0]

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    5eb6:	f244 43b8 	movw	r3, #17592	; 0x44b8
    5eba:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ebe:	681a      	ldr	r2, [r3, #0]
    5ec0:	4613      	mov	r3, r2
    5ec2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ec6:	189b      	adds	r3, r3, r2
    5ec8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ecc:	461a      	mov	r2, r3
    5ece:	f244 4348 	movw	r3, #17480	; 0x4448
    5ed2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ed6:	18d3      	adds	r3, r2, r3
    5ed8:	681b      	ldr	r3, [r3, #0]
    5eda:	2b00      	cmp	r3, #0
    5edc:	d0d8      	beq.n	5e90 <vCoRoutineSchedule+0x10>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    5ede:	f244 43b8 	movw	r3, #17592	; 0x44b8
    5ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5ee6:	681a      	ldr	r2, [r3, #0]
    5ee8:	4613      	mov	r3, r2
    5eea:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5eee:	189b      	adds	r3, r3, r2
    5ef0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5ef4:	461a      	mov	r2, r3
    5ef6:	f244 4348 	movw	r3, #17480	; 0x4448
    5efa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5efe:	18d3      	adds	r3, r2, r3
    5f00:	607b      	str	r3, [r7, #4]
    5f02:	687b      	ldr	r3, [r7, #4]
    5f04:	685b      	ldr	r3, [r3, #4]
    5f06:	685a      	ldr	r2, [r3, #4]
    5f08:	687b      	ldr	r3, [r7, #4]
    5f0a:	605a      	str	r2, [r3, #4]
    5f0c:	687b      	ldr	r3, [r7, #4]
    5f0e:	685a      	ldr	r2, [r3, #4]
    5f10:	687b      	ldr	r3, [r7, #4]
    5f12:	f103 0308 	add.w	r3, r3, #8
    5f16:	429a      	cmp	r2, r3
    5f18:	d104      	bne.n	5f24 <vCoRoutineSchedule+0xa4>
    5f1a:	687b      	ldr	r3, [r7, #4]
    5f1c:	685b      	ldr	r3, [r3, #4]
    5f1e:	685a      	ldr	r2, [r3, #4]
    5f20:	687b      	ldr	r3, [r7, #4]
    5f22:	605a      	str	r2, [r3, #4]
    5f24:	687b      	ldr	r3, [r7, #4]
    5f26:	685b      	ldr	r3, [r3, #4]
    5f28:	68da      	ldr	r2, [r3, #12]
    5f2a:	f244 43b4 	movw	r3, #17588	; 0x44b4
    5f2e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f32:	601a      	str	r2, [r3, #0]

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    5f34:	f244 43b4 	movw	r3, #17588	; 0x44b4
    5f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f3c:	681b      	ldr	r3, [r3, #0]
    5f3e:	681a      	ldr	r2, [r3, #0]
    5f40:	f244 43b4 	movw	r3, #17588	; 0x44b4
    5f44:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f48:	6819      	ldr	r1, [r3, #0]
    5f4a:	f244 43b4 	movw	r3, #17588	; 0x44b4
    5f4e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f52:	681b      	ldr	r3, [r3, #0]
    5f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    5f56:	4608      	mov	r0, r1
    5f58:	4619      	mov	r1, r3
    5f5a:	4790      	blx	r2

	return;
    5f5c:	bf00      	nop
    5f5e:	e000      	b.n	5f62 <vCoRoutineSchedule+0xe2>
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
		{
			/* No more co-routines to check. */
			return;
    5f60:	bf00      	nop

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );

	return;
}
    5f62:	f107 0708 	add.w	r7, r7, #8
    5f66:	46bd      	mov	sp, r7
    5f68:	bd80      	pop	{r7, pc}
    5f6a:	bf00      	nop

00005f6c <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    5f6c:	b580      	push	{r7, lr}
    5f6e:	b082      	sub	sp, #8
    5f70:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    5f72:	f04f 0300 	mov.w	r3, #0
    5f76:	607b      	str	r3, [r7, #4]
    5f78:	e013      	b.n	5fa2 <prvInitialiseCoRoutineLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    5f7a:	687a      	ldr	r2, [r7, #4]
    5f7c:	4613      	mov	r3, r2
    5f7e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f82:	189b      	adds	r3, r3, r2
    5f84:	ea4f 0383 	mov.w	r3, r3, lsl #2
    5f88:	461a      	mov	r2, r3
    5f8a:	f244 4348 	movw	r3, #17480	; 0x4448
    5f8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5f92:	18d3      	adds	r3, r2, r3
    5f94:	4618      	mov	r0, r3
    5f96:	f000 f85f 	bl	6058 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    5f9a:	687b      	ldr	r3, [r7, #4]
    5f9c:	f103 0301 	add.w	r3, r3, #1
    5fa0:	607b      	str	r3, [r7, #4]
    5fa2:	687b      	ldr	r3, [r7, #4]
    5fa4:	2b01      	cmp	r3, #1
    5fa6:	d9e8      	bls.n	5f7a <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    5fa8:	f244 4070 	movw	r0, #17520	; 0x4470
    5fac:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5fb0:	f000 f852 	bl	6058 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    5fb4:	f244 4084 	movw	r0, #17540	; 0x4484
    5fb8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5fbc:	f000 f84c 	bl	6058 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    5fc0:	f244 40a0 	movw	r0, #17568	; 0x44a0
    5fc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    5fc8:	f000 f846 	bl	6058 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    5fcc:	f244 4398 	movw	r3, #17560	; 0x4498
    5fd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fd4:	f244 4270 	movw	r2, #17520	; 0x4470
    5fd8:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5fdc:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    5fde:	f244 439c 	movw	r3, #17564	; 0x449c
    5fe2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    5fe6:	f244 4284 	movw	r2, #17540	; 0x4484
    5fea:	f2c2 0200 	movt	r2, #8192	; 0x2000
    5fee:	601a      	str	r2, [r3, #0]
}
    5ff0:	f107 0708 	add.w	r7, r7, #8
    5ff4:	46bd      	mov	sp, r7
    5ff6:	bd80      	pop	{r7, pc}

00005ff8 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    5ff8:	b580      	push	{r7, lr}
    5ffa:	b084      	sub	sp, #16
    5ffc:	af00      	add	r7, sp, #0
    5ffe:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    6000:	687b      	ldr	r3, [r7, #4]
    6002:	68db      	ldr	r3, [r3, #12]
    6004:	68db      	ldr	r3, [r3, #12]
    6006:	60bb      	str	r3, [r7, #8]
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    6008:	68bb      	ldr	r3, [r7, #8]
    600a:	f103 0318 	add.w	r3, r3, #24
    600e:	4618      	mov	r0, r3
    6010:	f000 f8b2 	bl	6178 <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    6014:	68bb      	ldr	r3, [r7, #8]
    6016:	f103 0318 	add.w	r3, r3, #24
    601a:	f244 40a0 	movw	r0, #17568	; 0x44a0
    601e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    6022:	4619      	mov	r1, r3
    6024:	f000 f846 	bl	60b4 <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    6028:	68bb      	ldr	r3, [r7, #8]
    602a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    602c:	f244 43b4 	movw	r3, #17588	; 0x44b4
    6030:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6034:	681b      	ldr	r3, [r3, #0]
    6036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6038:	429a      	cmp	r2, r3
    603a:	d303      	bcc.n	6044 <xCoRoutineRemoveFromEventList+0x4c>
	{
		xReturn = pdTRUE;
    603c:	f04f 0301 	mov.w	r3, #1
    6040:	60fb      	str	r3, [r7, #12]
    6042:	e002      	b.n	604a <xCoRoutineRemoveFromEventList+0x52>
	}
	else
	{
		xReturn = pdFALSE;
    6044:	f04f 0300 	mov.w	r3, #0
    6048:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    604a:	68fb      	ldr	r3, [r7, #12]
}
    604c:	4618      	mov	r0, r3
    604e:	f107 0710 	add.w	r7, r7, #16
    6052:	46bd      	mov	sp, r7
    6054:	bd80      	pop	{r7, pc}
    6056:	bf00      	nop

00006058 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    6058:	b480      	push	{r7}
    605a:	b083      	sub	sp, #12
    605c:	af00      	add	r7, sp, #0
    605e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    6060:	687b      	ldr	r3, [r7, #4]
    6062:	f103 0208 	add.w	r2, r3, #8
    6066:	687b      	ldr	r3, [r7, #4]
    6068:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    606a:	687b      	ldr	r3, [r7, #4]
    606c:	f04f 32ff 	mov.w	r2, #4294967295
    6070:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    6072:	687b      	ldr	r3, [r7, #4]
    6074:	f103 0208 	add.w	r2, r3, #8
    6078:	687b      	ldr	r3, [r7, #4]
    607a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    607c:	687b      	ldr	r3, [r7, #4]
    607e:	f103 0208 	add.w	r2, r3, #8
    6082:	687b      	ldr	r3, [r7, #4]
    6084:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    6086:	687b      	ldr	r3, [r7, #4]
    6088:	f04f 0200 	mov.w	r2, #0
    608c:	601a      	str	r2, [r3, #0]
}
    608e:	f107 070c 	add.w	r7, r7, #12
    6092:	46bd      	mov	sp, r7
    6094:	bc80      	pop	{r7}
    6096:	4770      	bx	lr

00006098 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    6098:	b480      	push	{r7}
    609a:	b083      	sub	sp, #12
    609c:	af00      	add	r7, sp, #0
    609e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    60a0:	687b      	ldr	r3, [r7, #4]
    60a2:	f04f 0200 	mov.w	r2, #0
    60a6:	611a      	str	r2, [r3, #16]
}
    60a8:	f107 070c 	add.w	r7, r7, #12
    60ac:	46bd      	mov	sp, r7
    60ae:	bc80      	pop	{r7}
    60b0:	4770      	bx	lr
    60b2:	bf00      	nop

000060b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    60b4:	b480      	push	{r7}
    60b6:	b085      	sub	sp, #20
    60b8:	af00      	add	r7, sp, #0
    60ba:	6078      	str	r0, [r7, #4]
    60bc:	6039      	str	r1, [r7, #0]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    60be:	687b      	ldr	r3, [r7, #4]
    60c0:	685b      	ldr	r3, [r3, #4]
    60c2:	60fb      	str	r3, [r7, #12]

	pxNewListItem->pxNext = pxIndex->pxNext;
    60c4:	68fb      	ldr	r3, [r7, #12]
    60c6:	685a      	ldr	r2, [r3, #4]
    60c8:	683b      	ldr	r3, [r7, #0]
    60ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
    60cc:	687b      	ldr	r3, [r7, #4]
    60ce:	685a      	ldr	r2, [r3, #4]
    60d0:	683b      	ldr	r3, [r7, #0]
    60d2:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    60d4:	68fb      	ldr	r3, [r7, #12]
    60d6:	685b      	ldr	r3, [r3, #4]
    60d8:	683a      	ldr	r2, [r7, #0]
    60da:	609a      	str	r2, [r3, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    60dc:	68fb      	ldr	r3, [r7, #12]
    60de:	683a      	ldr	r2, [r7, #0]
    60e0:	605a      	str	r2, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    60e2:	687b      	ldr	r3, [r7, #4]
    60e4:	683a      	ldr	r2, [r7, #0]
    60e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    60e8:	683b      	ldr	r3, [r7, #0]
    60ea:	687a      	ldr	r2, [r7, #4]
    60ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    60ee:	687b      	ldr	r3, [r7, #4]
    60f0:	681b      	ldr	r3, [r3, #0]
    60f2:	f103 0201 	add.w	r2, r3, #1
    60f6:	687b      	ldr	r3, [r7, #4]
    60f8:	601a      	str	r2, [r3, #0]
}
    60fa:	f107 0714 	add.w	r7, r7, #20
    60fe:	46bd      	mov	sp, r7
    6100:	bc80      	pop	{r7}
    6102:	4770      	bx	lr

00006104 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    6104:	b480      	push	{r7}
    6106:	b085      	sub	sp, #20
    6108:	af00      	add	r7, sp, #0
    610a:	6078      	str	r0, [r7, #4]
    610c:	6039      	str	r1, [r7, #0]
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    610e:	683b      	ldr	r3, [r7, #0]
    6110:	681b      	ldr	r3, [r3, #0]
    6112:	60bb      	str	r3, [r7, #8]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    6114:	68bb      	ldr	r3, [r7, #8]
    6116:	f1b3 3fff 	cmp.w	r3, #4294967295
    611a:	d103      	bne.n	6124 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    611c:	687b      	ldr	r3, [r7, #4]
    611e:	691b      	ldr	r3, [r3, #16]
    6120:	60fb      	str	r3, [r7, #12]
    6122:	e00d      	b.n	6140 <vListInsert+0x3c>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    6124:	687b      	ldr	r3, [r7, #4]
    6126:	f103 0308 	add.w	r3, r3, #8
    612a:	60fb      	str	r3, [r7, #12]
    612c:	e002      	b.n	6134 <vListInsert+0x30>
    612e:	68fb      	ldr	r3, [r7, #12]
    6130:	685b      	ldr	r3, [r3, #4]
    6132:	60fb      	str	r3, [r7, #12]
    6134:	68fb      	ldr	r3, [r7, #12]
    6136:	685b      	ldr	r3, [r3, #4]
    6138:	681a      	ldr	r2, [r3, #0]
    613a:	68bb      	ldr	r3, [r7, #8]
    613c:	429a      	cmp	r2, r3
    613e:	d9f6      	bls.n	612e <vListInsert+0x2a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    6140:	68fb      	ldr	r3, [r7, #12]
    6142:	685a      	ldr	r2, [r3, #4]
    6144:	683b      	ldr	r3, [r7, #0]
    6146:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    6148:	683b      	ldr	r3, [r7, #0]
    614a:	685b      	ldr	r3, [r3, #4]
    614c:	683a      	ldr	r2, [r7, #0]
    614e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
    6150:	683b      	ldr	r3, [r7, #0]
    6152:	68fa      	ldr	r2, [r7, #12]
    6154:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    6156:	68fb      	ldr	r3, [r7, #12]
    6158:	683a      	ldr	r2, [r7, #0]
    615a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    615c:	683b      	ldr	r3, [r7, #0]
    615e:	687a      	ldr	r2, [r7, #4]
    6160:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
    6162:	687b      	ldr	r3, [r7, #4]
    6164:	681b      	ldr	r3, [r3, #0]
    6166:	f103 0201 	add.w	r2, r3, #1
    616a:	687b      	ldr	r3, [r7, #4]
    616c:	601a      	str	r2, [r3, #0]
}
    616e:	f107 0714 	add.w	r7, r7, #20
    6172:	46bd      	mov	sp, r7
    6174:	bc80      	pop	{r7}
    6176:	4770      	bx	lr

00006178 <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    6178:	b480      	push	{r7}
    617a:	b085      	sub	sp, #20
    617c:	af00      	add	r7, sp, #0
    617e:	6078      	str	r0, [r7, #4]
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    6180:	687b      	ldr	r3, [r7, #4]
    6182:	685b      	ldr	r3, [r3, #4]
    6184:	687a      	ldr	r2, [r7, #4]
    6186:	6892      	ldr	r2, [r2, #8]
    6188:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    618a:	687b      	ldr	r3, [r7, #4]
    618c:	689b      	ldr	r3, [r3, #8]
    618e:	687a      	ldr	r2, [r7, #4]
    6190:	6852      	ldr	r2, [r2, #4]
    6192:	605a      	str	r2, [r3, #4]
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    6194:	687b      	ldr	r3, [r7, #4]
    6196:	691b      	ldr	r3, [r3, #16]
    6198:	60fb      	str	r3, [r7, #12]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    619a:	68fb      	ldr	r3, [r7, #12]
    619c:	685a      	ldr	r2, [r3, #4]
    619e:	687b      	ldr	r3, [r7, #4]
    61a0:	429a      	cmp	r2, r3
    61a2:	d103      	bne.n	61ac <vListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    61a4:	687b      	ldr	r3, [r7, #4]
    61a6:	689a      	ldr	r2, [r3, #8]
    61a8:	68fb      	ldr	r3, [r7, #12]
    61aa:	605a      	str	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
    61ac:	687b      	ldr	r3, [r7, #4]
    61ae:	f04f 0200 	mov.w	r2, #0
    61b2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
    61b4:	68fb      	ldr	r3, [r7, #12]
    61b6:	681b      	ldr	r3, [r3, #0]
    61b8:	f103 32ff 	add.w	r2, r3, #4294967295
    61bc:	68fb      	ldr	r3, [r7, #12]
    61be:	601a      	str	r2, [r3, #0]
}
    61c0:	f107 0714 	add.w	r7, r7, #20
    61c4:	46bd      	mov	sp, r7
    61c6:	bc80      	pop	{r7}
    61c8:	4770      	bx	lr
    61ca:	bf00      	nop

000061cc <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
    61cc:	b580      	push	{r7, lr}
    61ce:	b084      	sub	sp, #16
    61d0:	af00      	add	r7, sp, #0
    61d2:	6078      	str	r0, [r7, #4]
    61d4:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn = pdPASS;
    61d6:	f04f 0301 	mov.w	r3, #1
    61da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );

	/* If the queue being reset has already been used (has not just been
	created), then only reset the queue if its event lists are empty. */
	if( xNewQueue != pdTRUE )
    61dc:	683b      	ldr	r3, [r7, #0]
    61de:	2b01      	cmp	r3, #1
    61e0:	d00d      	beq.n	61fe <xQueueGenericReset+0x32>
	{
		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    61e2:	687b      	ldr	r3, [r7, #4]
    61e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    61e6:	2b00      	cmp	r3, #0
    61e8:	d002      	beq.n	61f0 <xQueueGenericReset+0x24>
		{
			xReturn = pdFAIL;
    61ea:	f04f 0300 	mov.w	r3, #0
    61ee:	60fb      	str	r3, [r7, #12]
		}

		if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    61f0:	687b      	ldr	r3, [r7, #4]
    61f2:	691b      	ldr	r3, [r3, #16]
    61f4:	2b00      	cmp	r3, #0
    61f6:	d002      	beq.n	61fe <xQueueGenericReset+0x32>
		{
			xReturn = pdFAIL;
    61f8:	f04f 0300 	mov.w	r3, #0
    61fc:	60fb      	str	r3, [r7, #12]
		}
	}

	if( xReturn == pdPASS )
    61fe:	68fb      	ldr	r3, [r7, #12]
    6200:	2b01      	cmp	r3, #1
    6202:	d133      	bne.n	626c <xQueueGenericReset+0xa0>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
    6204:	687b      	ldr	r3, [r7, #4]
    6206:	681a      	ldr	r2, [r3, #0]
    6208:	687b      	ldr	r3, [r7, #4]
    620a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    620c:	6879      	ldr	r1, [r7, #4]
    620e:	6c09      	ldr	r1, [r1, #64]	; 0x40
    6210:	fb01 f303 	mul.w	r3, r1, r3
    6214:	18d2      	adds	r2, r2, r3
    6216:	687b      	ldr	r3, [r7, #4]
    6218:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    621a:	687b      	ldr	r3, [r7, #4]
    621c:	f04f 0200 	mov.w	r2, #0
    6220:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
    6222:	687b      	ldr	r3, [r7, #4]
    6224:	681a      	ldr	r2, [r3, #0]
    6226:	687b      	ldr	r3, [r7, #4]
    6228:	609a      	str	r2, [r3, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
    622a:	687b      	ldr	r3, [r7, #4]
    622c:	681a      	ldr	r2, [r3, #0]
    622e:	687b      	ldr	r3, [r7, #4]
    6230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6232:	f103 33ff 	add.w	r3, r3, #4294967295
    6236:	6879      	ldr	r1, [r7, #4]
    6238:	6c09      	ldr	r1, [r1, #64]	; 0x40
    623a:	fb01 f303 	mul.w	r3, r1, r3
    623e:	18d2      	adds	r2, r2, r3
    6240:	687b      	ldr	r3, [r7, #4]
    6242:	60da      	str	r2, [r3, #12]
		pxQueue->xRxLock = queueUNLOCKED;
    6244:	687b      	ldr	r3, [r7, #4]
    6246:	f04f 32ff 	mov.w	r2, #4294967295
    624a:	645a      	str	r2, [r3, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
    624c:	687b      	ldr	r3, [r7, #4]
    624e:	f04f 32ff 	mov.w	r2, #4294967295
    6252:	649a      	str	r2, [r3, #72]	; 0x48

		/* Ensure the event queues start with the correct state. */
		vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
    6254:	687b      	ldr	r3, [r7, #4]
    6256:	f103 0310 	add.w	r3, r3, #16
    625a:	4618      	mov	r0, r3
    625c:	f7ff fefc 	bl	6058 <vListInitialise>
		vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
    6260:	687b      	ldr	r3, [r7, #4]
    6262:	f103 0324 	add.w	r3, r3, #36	; 0x24
    6266:	4618      	mov	r0, r3
    6268:	f7ff fef6 	bl	6058 <vListInitialise>
	}

	return xReturn;
    626c:	68fb      	ldr	r3, [r7, #12]
}
    626e:	4618      	mov	r0, r3
    6270:	f107 0710 	add.w	r7, r7, #16
    6274:	46bd      	mov	sp, r7
    6276:	bd80      	pop	{r7, pc}

00006278 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
    6278:	b580      	push	{r7, lr}
    627a:	b088      	sub	sp, #32
    627c:	af00      	add	r7, sp, #0
    627e:	60f8      	str	r0, [r7, #12]
    6280:	60b9      	str	r1, [r7, #8]
    6282:	4613      	mov	r3, r2
    6284:	71fb      	strb	r3, [r7, #7]
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    6286:	f04f 0300 	mov.w	r3, #0
    628a:	61fb      	str	r3, [r7, #28]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    628c:	68fb      	ldr	r3, [r7, #12]
    628e:	2b00      	cmp	r3, #0
    6290:	d029      	beq.n	62e6 <xQueueGenericCreate+0x6e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    6292:	f04f 004c 	mov.w	r0, #76	; 0x4c
    6296:	f7f9 ff39 	bl	10c <pvPortMalloc>
    629a:	61b8      	str	r0, [r7, #24]
		if( pxNewQueue != NULL )
    629c:	69bb      	ldr	r3, [r7, #24]
    629e:	2b00      	cmp	r3, #0
    62a0:	d021      	beq.n	62e6 <xQueueGenericCreate+0x6e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    62a2:	68fb      	ldr	r3, [r7, #12]
    62a4:	68ba      	ldr	r2, [r7, #8]
    62a6:	fb02 f303 	mul.w	r3, r2, r3
    62aa:	f103 0301 	add.w	r3, r3, #1
    62ae:	617b      	str	r3, [r7, #20]

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    62b0:	6978      	ldr	r0, [r7, #20]
    62b2:	f7f9 ff2b 	bl	10c <pvPortMalloc>
    62b6:	4602      	mov	r2, r0
    62b8:	69bb      	ldr	r3, [r7, #24]
    62ba:	601a      	str	r2, [r3, #0]
			if( pxNewQueue->pcHead != NULL )
    62bc:	69bb      	ldr	r3, [r7, #24]
    62be:	681b      	ldr	r3, [r3, #0]
    62c0:	2b00      	cmp	r3, #0
    62c2:	d00d      	beq.n	62e0 <xQueueGenericCreate+0x68>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
    62c4:	69bb      	ldr	r3, [r7, #24]
    62c6:	68fa      	ldr	r2, [r7, #12]
    62c8:	63da      	str	r2, [r3, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
    62ca:	69bb      	ldr	r3, [r7, #24]
    62cc:	68ba      	ldr	r2, [r7, #8]
    62ce:	641a      	str	r2, [r3, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
    62d0:	69b8      	ldr	r0, [r7, #24]
    62d2:	f04f 0101 	mov.w	r1, #1
    62d6:	f7ff ff79 	bl	61cc <xQueueGenericReset>
					pxNewQueue->ucQueueType = ucQueueType;
				}
				#endif /* configUSE_TRACE_FACILITY */

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    62da:	69bb      	ldr	r3, [r7, #24]
    62dc:	61fb      	str	r3, [r7, #28]
    62de:	e002      	b.n	62e6 <xQueueGenericCreate+0x6e>
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
    62e0:	69b8      	ldr	r0, [r7, #24]
    62e2:	f7f9 ff5f 	bl	1a4 <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    62e6:	69fb      	ldr	r3, [r7, #28]
}
    62e8:	4618      	mov	r0, r3
    62ea:	f107 0720 	add.w	r7, r7, #32
    62ee:	46bd      	mov	sp, r7
    62f0:	bd80      	pop	{r7, pc}
    62f2:	bf00      	nop

000062f4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
    62f4:	b580      	push	{r7, lr}
    62f6:	b084      	sub	sp, #16
    62f8:	af00      	add	r7, sp, #0
    62fa:	4603      	mov	r3, r0
    62fc:	71fb      	strb	r3, [r7, #7]
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    62fe:	f04f 004c 	mov.w	r0, #76	; 0x4c
    6302:	f7f9 ff03 	bl	10c <pvPortMalloc>
    6306:	60f8      	str	r0, [r7, #12]
		if( pxNewQueue != NULL )
    6308:	68fb      	ldr	r3, [r7, #12]
    630a:	2b00      	cmp	r3, #0
    630c:	d038      	beq.n	6380 <xQueueCreateMutex+0x8c>
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
    630e:	68fb      	ldr	r3, [r7, #12]
    6310:	f04f 0200 	mov.w	r2, #0
    6314:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
    6316:	68fb      	ldr	r3, [r7, #12]
    6318:	f04f 0200 	mov.w	r2, #0
    631c:	601a      	str	r2, [r3, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
    631e:	68fb      	ldr	r3, [r7, #12]
    6320:	f04f 0200 	mov.w	r2, #0
    6324:	609a      	str	r2, [r3, #8]
			pxNewQueue->pcReadFrom = NULL;
    6326:	68fb      	ldr	r3, [r7, #12]
    6328:	f04f 0200 	mov.w	r2, #0
    632c:	60da      	str	r2, [r3, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    632e:	68fb      	ldr	r3, [r7, #12]
    6330:	f04f 0200 	mov.w	r2, #0
    6334:	639a      	str	r2, [r3, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
    6336:	68fb      	ldr	r3, [r7, #12]
    6338:	f04f 0201 	mov.w	r2, #1
    633c:	63da      	str	r2, [r3, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
    633e:	68fb      	ldr	r3, [r7, #12]
    6340:	f04f 0200 	mov.w	r2, #0
    6344:	641a      	str	r2, [r3, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
    6346:	68fb      	ldr	r3, [r7, #12]
    6348:	f04f 32ff 	mov.w	r2, #4294967295
    634c:	645a      	str	r2, [r3, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
    634e:	68fb      	ldr	r3, [r7, #12]
    6350:	f04f 32ff 	mov.w	r2, #4294967295
    6354:	649a      	str	r2, [r3, #72]	; 0x48
				pxNewQueue->ucQueueType = ucQueueType;
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    6356:	68fb      	ldr	r3, [r7, #12]
    6358:	f103 0310 	add.w	r3, r3, #16
    635c:	4618      	mov	r0, r3
    635e:	f7ff fe7b 	bl	6058 <vListInitialise>
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    6362:	68fb      	ldr	r3, [r7, #12]
    6364:	f103 0324 	add.w	r3, r3, #36	; 0x24
    6368:	4618      	mov	r0, r3
    636a:	f7ff fe75 	bl	6058 <vListInitialise>

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
    636e:	68f8      	ldr	r0, [r7, #12]
    6370:	f04f 0100 	mov.w	r1, #0
    6374:	f04f 0200 	mov.w	r2, #0
    6378:	f04f 0300 	mov.w	r3, #0
    637c:	f000 f820 	bl	63c0 <xQueueGenericSend>
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
    6380:	68fb      	ldr	r3, [r7, #12]
	}
    6382:	4618      	mov	r0, r3
    6384:	f107 0710 	add.w	r7, r7, #16
    6388:	46bd      	mov	sp, r7
    638a:	bd80      	pop	{r7, pc}

0000638c <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void* xQueueGetMutexHolder( xQueueHandle xSemaphore )
	{
    638c:	b580      	push	{r7, lr}
    638e:	b084      	sub	sp, #16
    6390:	af00      	add	r7, sp, #0
    6392:	6078      	str	r0, [r7, #4]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the 
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
    6394:	f001 fd72 	bl	7e7c <vPortEnterCritical>
		{
			if( xSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
    6398:	687b      	ldr	r3, [r7, #4]
    639a:	681b      	ldr	r3, [r3, #0]
    639c:	2b00      	cmp	r3, #0
    639e:	d103      	bne.n	63a8 <xQueueGetMutexHolder+0x1c>
			{
				pxReturn = ( void * ) xSemaphore->pxMutexHolder;
    63a0:	687b      	ldr	r3, [r7, #4]
    63a2:	685b      	ldr	r3, [r3, #4]
    63a4:	60fb      	str	r3, [r7, #12]
    63a6:	e002      	b.n	63ae <xQueueGetMutexHolder+0x22>
			}
			else
			{
				pxReturn = NULL;
    63a8:	f04f 0300 	mov.w	r3, #0
    63ac:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
    63ae:	f001 fd7b 	bl	7ea8 <vPortExitCritical>
		
		return pxReturn;
    63b2:	68fb      	ldr	r3, [r7, #12]
	}
    63b4:	4618      	mov	r0, r3
    63b6:	f107 0710 	add.w	r7, r7, #16
    63ba:	46bd      	mov	sp, r7
    63bc:	bd80      	pop	{r7, pc}
    63be:	bf00      	nop

000063c0 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    63c0:	b580      	push	{r7, lr}
    63c2:	b088      	sub	sp, #32
    63c4:	af00      	add	r7, sp, #0
    63c6:	60f8      	str	r0, [r7, #12]
    63c8:	60b9      	str	r1, [r7, #8]
    63ca:	607a      	str	r2, [r7, #4]
    63cc:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    63ce:	f04f 0300 	mov.w	r3, #0
    63d2:	61fb      	str	r3, [r7, #28]
    63d4:	e000      	b.n	63d8 <xQueueGenericSend+0x18>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    63d6:	bf00      	nop
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    63d8:	f001 fd50 	bl	7e7c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    63dc:	68fb      	ldr	r3, [r7, #12]
    63de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    63e0:	68fb      	ldr	r3, [r7, #12]
    63e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    63e4:	429a      	cmp	r2, r3
    63e6:	d218      	bcs.n	641a <xQueueGenericSend+0x5a>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    63e8:	68f8      	ldr	r0, [r7, #12]
    63ea:	68b9      	ldr	r1, [r7, #8]
    63ec:	683a      	ldr	r2, [r7, #0]
    63ee:	f000 f9fd 	bl	67ec <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    63f2:	68fb      	ldr	r3, [r7, #12]
    63f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    63f6:	2b00      	cmp	r3, #0
    63f8:	d00a      	beq.n	6410 <xQueueGenericSend+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    63fa:	68fb      	ldr	r3, [r7, #12]
    63fc:	f103 0324 	add.w	r3, r3, #36	; 0x24
    6400:	4618      	mov	r0, r3
    6402:	f001 f9a1 	bl	7748 <xTaskRemoveFromEventList>
    6406:	4603      	mov	r3, r0
    6408:	2b01      	cmp	r3, #1
    640a:	d101      	bne.n	6410 <xQueueGenericSend+0x50>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    640c:	f001 fd2a 	bl	7e64 <vPortYieldFromISR>
					}
				}

				taskEXIT_CRITICAL();
    6410:	f001 fd4a 	bl	7ea8 <vPortExitCritical>

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    6414:	f04f 0301 	mov.w	r3, #1
    6418:	e05d      	b.n	64d6 <xQueueGenericSend+0x116>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	2b00      	cmp	r3, #0
    641e:	d104      	bne.n	642a <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    6420:	f001 fd42 	bl	7ea8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    6424:	f04f 0300 	mov.w	r3, #0
    6428:	e055      	b.n	64d6 <xQueueGenericSend+0x116>
				}
				else if( xEntryTimeSet == pdFALSE )
    642a:	69fb      	ldr	r3, [r7, #28]
    642c:	2b00      	cmp	r3, #0
    642e:	d107      	bne.n	6440 <xQueueGenericSend+0x80>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    6430:	f107 0314 	add.w	r3, r7, #20
    6434:	4618      	mov	r0, r3
    6436:	f001 f9e9 	bl	780c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    643a:	f04f 0301 	mov.w	r3, #1
    643e:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    6440:	f001 fd32 	bl	7ea8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    6444:	f000 ff02 	bl	724c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    6448:	f001 fd18 	bl	7e7c <vPortEnterCritical>
    644c:	68fb      	ldr	r3, [r7, #12]
    644e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6450:	f1b3 3fff 	cmp.w	r3, #4294967295
    6454:	d103      	bne.n	645e <xQueueGenericSend+0x9e>
    6456:	68fb      	ldr	r3, [r7, #12]
    6458:	f04f 0200 	mov.w	r2, #0
    645c:	645a      	str	r2, [r3, #68]	; 0x44
    645e:	68fb      	ldr	r3, [r7, #12]
    6460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6462:	f1b3 3fff 	cmp.w	r3, #4294967295
    6466:	d103      	bne.n	6470 <xQueueGenericSend+0xb0>
    6468:	68fb      	ldr	r3, [r7, #12]
    646a:	f04f 0200 	mov.w	r2, #0
    646e:	649a      	str	r2, [r3, #72]	; 0x48
    6470:	f001 fd1a 	bl	7ea8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    6474:	f107 0314 	add.w	r3, r7, #20
    6478:	4618      	mov	r0, r3
    647a:	f107 0304 	add.w	r3, r7, #4
    647e:	4619      	mov	r1, r3
    6480:	f001 f9dc 	bl	783c <xTaskCheckForTimeOut>
    6484:	4603      	mov	r3, r0
    6486:	2b00      	cmp	r3, #0
    6488:	d11e      	bne.n	64c8 <xQueueGenericSend+0x108>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    648a:	68f8      	ldr	r0, [r7, #12]
    648c:	f000 fab2 	bl	69f4 <prvIsQueueFull>
    6490:	4603      	mov	r3, r0
    6492:	2b00      	cmp	r3, #0
    6494:	d012      	beq.n	64bc <xQueueGenericSend+0xfc>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    6496:	68fb      	ldr	r3, [r7, #12]
    6498:	f103 0210 	add.w	r2, r3, #16
    649c:	687b      	ldr	r3, [r7, #4]
    649e:	4610      	mov	r0, r2
    64a0:	4619      	mov	r1, r3
    64a2:	f001 f915 	bl	76d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    64a6:	68f8      	ldr	r0, [r7, #12]
    64a8:	f000 fa2c 	bl	6904 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    64ac:	f000 fee0 	bl	7270 <xTaskResumeAll>
    64b0:	4603      	mov	r3, r0
    64b2:	2b00      	cmp	r3, #0
    64b4:	d18f      	bne.n	63d6 <xQueueGenericSend+0x16>
				{
					portYIELD_WITHIN_API();
    64b6:	f001 fcd5 	bl	7e64 <vPortYieldFromISR>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    64ba:	e78c      	b.n	63d6 <xQueueGenericSend+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    64bc:	68f8      	ldr	r0, [r7, #12]
    64be:	f000 fa21 	bl	6904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    64c2:	f000 fed5 	bl	7270 <xTaskResumeAll>
			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
		}
	}
    64c6:	e786      	b.n	63d6 <xQueueGenericSend+0x16>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    64c8:	68f8      	ldr	r0, [r7, #12]
    64ca:	f000 fa1b 	bl	6904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    64ce:	f000 fecf 	bl	7270 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    64d2:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    64d6:	4618      	mov	r0, r3
    64d8:	f107 0720 	add.w	r7, r7, #32
    64dc:	46bd      	mov	sp, r7
    64de:	bd80      	pop	{r7, pc}

000064e0 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    64e0:	b580      	push	{r7, lr}
    64e2:	b086      	sub	sp, #24
    64e4:	af00      	add	r7, sp, #0
    64e6:	60f8      	str	r0, [r7, #12]
    64e8:	60b9      	str	r1, [r7, #8]
    64ea:	607a      	str	r2, [r7, #4]
    64ec:	603b      	str	r3, [r7, #0]
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    64ee:	f04f 0300 	mov.w	r3, #0
    64f2:	613b      	str	r3, [r7, #16]
    64f4:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    64f8:	f380 8811 	msr	BASEPRI, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    64fc:	68fb      	ldr	r3, [r7, #12]
    64fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6500:	68fb      	ldr	r3, [r7, #12]
    6502:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6504:	429a      	cmp	r2, r3
    6506:	d225      	bcs.n	6554 <xQueueGenericSendFromISR+0x74>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    6508:	68f8      	ldr	r0, [r7, #12]
    650a:	68b9      	ldr	r1, [r7, #8]
    650c:	683a      	ldr	r2, [r7, #0]
    650e:	f000 f96d 	bl	67ec <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    6512:	68fb      	ldr	r3, [r7, #12]
    6514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6516:	f1b3 3fff 	cmp.w	r3, #4294967295
    651a:	d111      	bne.n	6540 <xQueueGenericSendFromISR+0x60>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    651c:	68fb      	ldr	r3, [r7, #12]
    651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6520:	2b00      	cmp	r3, #0
    6522:	d013      	beq.n	654c <xQueueGenericSendFromISR+0x6c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    6524:	68fb      	ldr	r3, [r7, #12]
    6526:	f103 0324 	add.w	r3, r3, #36	; 0x24
    652a:	4618      	mov	r0, r3
    652c:	f001 f90c 	bl	7748 <xTaskRemoveFromEventList>
    6530:	4603      	mov	r3, r0
    6532:	2b00      	cmp	r3, #0
    6534:	d00a      	beq.n	654c <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    6536:	687b      	ldr	r3, [r7, #4]
    6538:	f04f 0201 	mov.w	r2, #1
    653c:	601a      	str	r2, [r3, #0]
    653e:	e005      	b.n	654c <xQueueGenericSendFromISR+0x6c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    6540:	68fb      	ldr	r3, [r7, #12]
    6542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6544:	f103 0201 	add.w	r2, r3, #1
    6548:	68fb      	ldr	r3, [r7, #12]
    654a:	649a      	str	r2, [r3, #72]	; 0x48
			}

			xReturn = pdPASS;
    654c:	f04f 0301 	mov.w	r3, #1
    6550:	617b      	str	r3, [r7, #20]
    6552:	e002      	b.n	655a <xQueueGenericSendFromISR+0x7a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    6554:	f04f 0300 	mov.w	r3, #0
    6558:	617b      	str	r3, [r7, #20]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    655a:	f04f 0000 	mov.w	r0, #0
    655e:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    6562:	697b      	ldr	r3, [r7, #20]
}
    6564:	4618      	mov	r0, r3
    6566:	f107 0718 	add.w	r7, r7, #24
    656a:	46bd      	mov	sp, r7
    656c:	bd80      	pop	{r7, pc}
    656e:	bf00      	nop

00006570 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    6570:	b580      	push	{r7, lr}
    6572:	b088      	sub	sp, #32
    6574:	af00      	add	r7, sp, #0
    6576:	60f8      	str	r0, [r7, #12]
    6578:	60b9      	str	r1, [r7, #8]
    657a:	607a      	str	r2, [r7, #4]
    657c:	603b      	str	r3, [r7, #0]
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    657e:	f04f 0300 	mov.w	r3, #0
    6582:	61fb      	str	r3, [r7, #28]
    6584:	e000      	b.n	6588 <xQueueGenericReceive+0x18>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    6586:	bf00      	nop
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    6588:	f001 fc78 	bl	7e7c <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    658c:	68fb      	ldr	r3, [r7, #12]
    658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6590:	2b00      	cmp	r3, #0
    6592:	d03f      	beq.n	6614 <xQueueGenericReceive+0xa4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    6594:	68fb      	ldr	r3, [r7, #12]
    6596:	68db      	ldr	r3, [r3, #12]
    6598:	61bb      	str	r3, [r7, #24]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    659a:	68f8      	ldr	r0, [r7, #12]
    659c:	68b9      	ldr	r1, [r7, #8]
    659e:	f000 f989 	bl	68b4 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    65a2:	683b      	ldr	r3, [r7, #0]
    65a4:	2b00      	cmp	r3, #0
    65a6:	d11e      	bne.n	65e6 <xQueueGenericReceive+0x76>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    65a8:	68fb      	ldr	r3, [r7, #12]
    65aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    65ac:	f103 32ff 	add.w	r2, r3, #4294967295
    65b0:	68fb      	ldr	r3, [r7, #12]
    65b2:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    65b4:	68fb      	ldr	r3, [r7, #12]
    65b6:	681b      	ldr	r3, [r3, #0]
    65b8:	2b00      	cmp	r3, #0
    65ba:	d104      	bne.n	65c6 <xQueueGenericReceive+0x56>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
    65bc:	f001 fb16 	bl	7bec <xTaskGetCurrentTaskHandle>
    65c0:	4602      	mov	r2, r0
    65c2:	68fb      	ldr	r3, [r7, #12]
    65c4:	605a      	str	r2, [r3, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    65c6:	68fb      	ldr	r3, [r7, #12]
    65c8:	691b      	ldr	r3, [r3, #16]
    65ca:	2b00      	cmp	r3, #0
    65cc:	d01d      	beq.n	660a <xQueueGenericReceive+0x9a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    65ce:	68fb      	ldr	r3, [r7, #12]
    65d0:	f103 0310 	add.w	r3, r3, #16
    65d4:	4618      	mov	r0, r3
    65d6:	f001 f8b7 	bl	7748 <xTaskRemoveFromEventList>
    65da:	4603      	mov	r3, r0
    65dc:	2b01      	cmp	r3, #1
    65de:	d114      	bne.n	660a <xQueueGenericReceive+0x9a>
						{
							portYIELD_WITHIN_API();
    65e0:	f001 fc40 	bl	7e64 <vPortYieldFromISR>
    65e4:	e011      	b.n	660a <xQueueGenericReceive+0x9a>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    65e6:	68fb      	ldr	r3, [r7, #12]
    65e8:	69ba      	ldr	r2, [r7, #24]
    65ea:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    65ec:	68fb      	ldr	r3, [r7, #12]
    65ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    65f0:	2b00      	cmp	r3, #0
    65f2:	d00a      	beq.n	660a <xQueueGenericReceive+0x9a>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    65f4:	68fb      	ldr	r3, [r7, #12]
    65f6:	f103 0324 	add.w	r3, r3, #36	; 0x24
    65fa:	4618      	mov	r0, r3
    65fc:	f001 f8a4 	bl	7748 <xTaskRemoveFromEventList>
    6600:	4603      	mov	r3, r0
    6602:	2b00      	cmp	r3, #0
    6604:	d001      	beq.n	660a <xQueueGenericReceive+0x9a>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    6606:	f001 fc2d 	bl	7e64 <vPortYieldFromISR>
						}
					}

				}

				taskEXIT_CRITICAL();
    660a:	f001 fc4d 	bl	7ea8 <vPortExitCritical>
				return pdPASS;
    660e:	f04f 0301 	mov.w	r3, #1
    6612:	e06b      	b.n	66ec <xQueueGenericReceive+0x17c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    6614:	687b      	ldr	r3, [r7, #4]
    6616:	2b00      	cmp	r3, #0
    6618:	d104      	bne.n	6624 <xQueueGenericReceive+0xb4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    661a:	f001 fc45 	bl	7ea8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    661e:	f04f 0300 	mov.w	r3, #0
    6622:	e063      	b.n	66ec <xQueueGenericReceive+0x17c>
				}
				else if( xEntryTimeSet == pdFALSE )
    6624:	69fb      	ldr	r3, [r7, #28]
    6626:	2b00      	cmp	r3, #0
    6628:	d107      	bne.n	663a <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    662a:	f107 0310 	add.w	r3, r7, #16
    662e:	4618      	mov	r0, r3
    6630:	f001 f8ec 	bl	780c <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    6634:	f04f 0301 	mov.w	r3, #1
    6638:	61fb      	str	r3, [r7, #28]
				}
			}
		}
		taskEXIT_CRITICAL();
    663a:	f001 fc35 	bl	7ea8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    663e:	f000 fe05 	bl	724c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    6642:	f001 fc1b 	bl	7e7c <vPortEnterCritical>
    6646:	68fb      	ldr	r3, [r7, #12]
    6648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    664a:	f1b3 3fff 	cmp.w	r3, #4294967295
    664e:	d103      	bne.n	6658 <xQueueGenericReceive+0xe8>
    6650:	68fb      	ldr	r3, [r7, #12]
    6652:	f04f 0200 	mov.w	r2, #0
    6656:	645a      	str	r2, [r3, #68]	; 0x44
    6658:	68fb      	ldr	r3, [r7, #12]
    665a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    665c:	f1b3 3fff 	cmp.w	r3, #4294967295
    6660:	d103      	bne.n	666a <xQueueGenericReceive+0xfa>
    6662:	68fb      	ldr	r3, [r7, #12]
    6664:	f04f 0200 	mov.w	r2, #0
    6668:	649a      	str	r2, [r3, #72]	; 0x48
    666a:	f001 fc1d 	bl	7ea8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    666e:	f107 0310 	add.w	r3, r7, #16
    6672:	4618      	mov	r0, r3
    6674:	f107 0304 	add.w	r3, r7, #4
    6678:	4619      	mov	r1, r3
    667a:	f001 f8df 	bl	783c <xTaskCheckForTimeOut>
    667e:	4603      	mov	r3, r0
    6680:	2b00      	cmp	r3, #0
    6682:	d12c      	bne.n	66de <xQueueGenericReceive+0x16e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    6684:	68f8      	ldr	r0, [r7, #12]
    6686:	f000 f98d 	bl	69a4 <prvIsQueueEmpty>
    668a:	4603      	mov	r3, r0
    668c:	2b00      	cmp	r3, #0
    668e:	d020      	beq.n	66d2 <xQueueGenericReceive+0x162>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    6690:	68fb      	ldr	r3, [r7, #12]
    6692:	681b      	ldr	r3, [r3, #0]
    6694:	2b00      	cmp	r3, #0
    6696:	d108      	bne.n	66aa <xQueueGenericReceive+0x13a>
					{
						portENTER_CRITICAL();
    6698:	f001 fbf0 	bl	7e7c <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    669c:	68fb      	ldr	r3, [r7, #12]
    669e:	685b      	ldr	r3, [r3, #4]
    66a0:	4618      	mov	r0, r3
    66a2:	f001 fab3 	bl	7c0c <vTaskPriorityInherit>
						}
						portEXIT_CRITICAL();
    66a6:	f001 fbff 	bl	7ea8 <vPortExitCritical>
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    66aa:	68fb      	ldr	r3, [r7, #12]
    66ac:	f103 0224 	add.w	r2, r3, #36	; 0x24
    66b0:	687b      	ldr	r3, [r7, #4]
    66b2:	4610      	mov	r0, r2
    66b4:	4619      	mov	r1, r3
    66b6:	f001 f80b 	bl	76d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    66ba:	68f8      	ldr	r0, [r7, #12]
    66bc:	f000 f922 	bl	6904 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    66c0:	f000 fdd6 	bl	7270 <xTaskResumeAll>
    66c4:	4603      	mov	r3, r0
    66c6:	2b00      	cmp	r3, #0
    66c8:	f47f af5d 	bne.w	6586 <xQueueGenericReceive+0x16>
				{
					portYIELD_WITHIN_API();
    66cc:	f001 fbca 	bl	7e64 <vPortYieldFromISR>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    66d0:	e759      	b.n	6586 <xQueueGenericReceive+0x16>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    66d2:	68f8      	ldr	r0, [r7, #12]
    66d4:	f000 f916 	bl	6904 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    66d8:	f000 fdca 	bl	7270 <xTaskResumeAll>
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
		}
	}
    66dc:	e753      	b.n	6586 <xQueueGenericReceive+0x16>
				( void ) xTaskResumeAll();
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    66de:	68f8      	ldr	r0, [r7, #12]
    66e0:	f000 f910 	bl	6904 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    66e4:	f000 fdc4 	bl	7270 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    66e8:	f04f 0300 	mov.w	r3, #0
		}
	}
}
    66ec:	4618      	mov	r0, r3
    66ee:	f107 0720 	add.w	r7, r7, #32
    66f2:	46bd      	mov	sp, r7
    66f4:	bd80      	pop	{r7, pc}
    66f6:	bf00      	nop

000066f8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    66f8:	b580      	push	{r7, lr}
    66fa:	b086      	sub	sp, #24
    66fc:	af00      	add	r7, sp, #0
    66fe:	60f8      	str	r0, [r7, #12]
    6700:	60b9      	str	r1, [r7, #8]
    6702:	607a      	str	r2, [r7, #4]

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    6704:	f04f 0300 	mov.w	r3, #0
    6708:	613b      	str	r3, [r7, #16]
    670a:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    670e:	f380 8811 	msr	BASEPRI, r0
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    6712:	68fb      	ldr	r3, [r7, #12]
    6714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6716:	2b00      	cmp	r3, #0
    6718:	d02a      	beq.n	6770 <xQueueReceiveFromISR+0x78>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    671a:	68f8      	ldr	r0, [r7, #12]
    671c:	68b9      	ldr	r1, [r7, #8]
    671e:	f000 f8c9 	bl	68b4 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    6722:	68fb      	ldr	r3, [r7, #12]
    6724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    6726:	f103 32ff 	add.w	r2, r3, #4294967295
    672a:	68fb      	ldr	r3, [r7, #12]
    672c:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    672e:	68fb      	ldr	r3, [r7, #12]
    6730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6732:	f1b3 3fff 	cmp.w	r3, #4294967295
    6736:	d111      	bne.n	675c <xQueueReceiveFromISR+0x64>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    6738:	68fb      	ldr	r3, [r7, #12]
    673a:	691b      	ldr	r3, [r3, #16]
    673c:	2b00      	cmp	r3, #0
    673e:	d013      	beq.n	6768 <xQueueReceiveFromISR+0x70>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6740:	68fb      	ldr	r3, [r7, #12]
    6742:	f103 0310 	add.w	r3, r3, #16
    6746:	4618      	mov	r0, r3
    6748:	f000 fffe 	bl	7748 <xTaskRemoveFromEventList>
    674c:	4603      	mov	r3, r0
    674e:	2b00      	cmp	r3, #0
    6750:	d00a      	beq.n	6768 <xQueueReceiveFromISR+0x70>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    6752:	687b      	ldr	r3, [r7, #4]
    6754:	f04f 0201 	mov.w	r2, #1
    6758:	601a      	str	r2, [r3, #0]
    675a:	e005      	b.n	6768 <xQueueReceiveFromISR+0x70>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    675c:	68fb      	ldr	r3, [r7, #12]
    675e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6760:	f103 0201 	add.w	r2, r3, #1
    6764:	68fb      	ldr	r3, [r7, #12]
    6766:	645a      	str	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
    6768:	f04f 0301 	mov.w	r3, #1
    676c:	617b      	str	r3, [r7, #20]
    676e:	e002      	b.n	6776 <xQueueReceiveFromISR+0x7e>
		}
		else
		{
			xReturn = pdFAIL;
    6770:	f04f 0300 	mov.w	r3, #0
    6774:	617b      	str	r3, [r7, #20]
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    6776:	f04f 0000 	mov.w	r0, #0
    677a:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    677e:	697b      	ldr	r3, [r7, #20]
}
    6780:	4618      	mov	r0, r3
    6782:	f107 0718 	add.w	r7, r7, #24
    6786:	46bd      	mov	sp, r7
    6788:	bd80      	pop	{r7, pc}
    678a:	bf00      	nop

0000678c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    678c:	b580      	push	{r7, lr}
    678e:	b084      	sub	sp, #16
    6790:	af00      	add	r7, sp, #0
    6792:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    6794:	f001 fb72 	bl	7e7c <vPortEnterCritical>
		uxReturn = pxQueue->uxMessagesWaiting;
    6798:	687b      	ldr	r3, [r7, #4]
    679a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    679c:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    679e:	f001 fb83 	bl	7ea8 <vPortExitCritical>

	return uxReturn;
    67a2:	68fb      	ldr	r3, [r7, #12]
}
    67a4:	4618      	mov	r0, r3
    67a6:	f107 0710 	add.w	r7, r7, #16
    67aa:	46bd      	mov	sp, r7
    67ac:	bd80      	pop	{r7, pc}
    67ae:	bf00      	nop

000067b0 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    67b0:	b480      	push	{r7}
    67b2:	b085      	sub	sp, #20
    67b4:	af00      	add	r7, sp, #0
    67b6:	6078      	str	r0, [r7, #4]
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    67b8:	687b      	ldr	r3, [r7, #4]
    67ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    67bc:	60fb      	str	r3, [r7, #12]

	return uxReturn;
    67be:	68fb      	ldr	r3, [r7, #12]
}
    67c0:	4618      	mov	r0, r3
    67c2:	f107 0714 	add.w	r7, r7, #20
    67c6:	46bd      	mov	sp, r7
    67c8:	bc80      	pop	{r7}
    67ca:	4770      	bx	lr

000067cc <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    67cc:	b580      	push	{r7, lr}
    67ce:	b082      	sub	sp, #8
    67d0:	af00      	add	r7, sp, #0
    67d2:	6078      	str	r0, [r7, #4]
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    67d4:	687b      	ldr	r3, [r7, #4]
    67d6:	681b      	ldr	r3, [r3, #0]
    67d8:	4618      	mov	r0, r3
    67da:	f7f9 fce3 	bl	1a4 <vPortFree>
	vPortFree( pxQueue );
    67de:	6878      	ldr	r0, [r7, #4]
    67e0:	f7f9 fce0 	bl	1a4 <vPortFree>
}
    67e4:	f107 0708 	add.w	r7, r7, #8
    67e8:	46bd      	mov	sp, r7
    67ea:	bd80      	pop	{r7, pc}

000067ec <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    67ec:	b580      	push	{r7, lr}
    67ee:	b084      	sub	sp, #16
    67f0:	af00      	add	r7, sp, #0
    67f2:	60f8      	str	r0, [r7, #12]
    67f4:	60b9      	str	r1, [r7, #8]
    67f6:	607a      	str	r2, [r7, #4]
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    67f8:	68fb      	ldr	r3, [r7, #12]
    67fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    67fc:	2b00      	cmp	r3, #0
    67fe:	d10d      	bne.n	681c <prvCopyDataToQueue+0x30>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    6800:	68fb      	ldr	r3, [r7, #12]
    6802:	681b      	ldr	r3, [r3, #0]
    6804:	2b00      	cmp	r3, #0
    6806:	d14a      	bne.n	689e <prvCopyDataToQueue+0xb2>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
    6808:	68fb      	ldr	r3, [r7, #12]
    680a:	685b      	ldr	r3, [r3, #4]
    680c:	4618      	mov	r0, r3
    680e:	f001 fa69 	bl	7ce4 <vTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
    6812:	68fb      	ldr	r3, [r7, #12]
    6814:	f04f 0200 	mov.w	r2, #0
    6818:	605a      	str	r2, [r3, #4]
    681a:	e040      	b.n	689e <prvCopyDataToQueue+0xb2>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    681c:	687b      	ldr	r3, [r7, #4]
    681e:	2b00      	cmp	r3, #0
    6820:	d11b      	bne.n	685a <prvCopyDataToQueue+0x6e>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    6822:	68fb      	ldr	r3, [r7, #12]
    6824:	6899      	ldr	r1, [r3, #8]
    6826:	68fb      	ldr	r3, [r7, #12]
    6828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    682a:	68ba      	ldr	r2, [r7, #8]
    682c:	4608      	mov	r0, r1
    682e:	4611      	mov	r1, r2
    6830:	461a      	mov	r2, r3
    6832:	f001 fba7 	bl	7f84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    6836:	68fb      	ldr	r3, [r7, #12]
    6838:	689a      	ldr	r2, [r3, #8]
    683a:	68fb      	ldr	r3, [r7, #12]
    683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    683e:	18d2      	adds	r2, r2, r3
    6840:	68fb      	ldr	r3, [r7, #12]
    6842:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    6844:	68fb      	ldr	r3, [r7, #12]
    6846:	689a      	ldr	r2, [r3, #8]
    6848:	68fb      	ldr	r3, [r7, #12]
    684a:	685b      	ldr	r3, [r3, #4]
    684c:	429a      	cmp	r2, r3
    684e:	d326      	bcc.n	689e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    6850:	68fb      	ldr	r3, [r7, #12]
    6852:	681a      	ldr	r2, [r3, #0]
    6854:	68fb      	ldr	r3, [r7, #12]
    6856:	609a      	str	r2, [r3, #8]
    6858:	e021      	b.n	689e <prvCopyDataToQueue+0xb2>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    685a:	68fb      	ldr	r3, [r7, #12]
    685c:	68d9      	ldr	r1, [r3, #12]
    685e:	68fb      	ldr	r3, [r7, #12]
    6860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6862:	68ba      	ldr	r2, [r7, #8]
    6864:	4608      	mov	r0, r1
    6866:	4611      	mov	r1, r2
    6868:	461a      	mov	r2, r3
    686a:	f001 fb8b 	bl	7f84 <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    686e:	68fb      	ldr	r3, [r7, #12]
    6870:	68da      	ldr	r2, [r3, #12]
    6872:	68fb      	ldr	r3, [r7, #12]
    6874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6876:	f1c3 0300 	rsb	r3, r3, #0
    687a:	18d2      	adds	r2, r2, r3
    687c:	68fb      	ldr	r3, [r7, #12]
    687e:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    6880:	68fb      	ldr	r3, [r7, #12]
    6882:	68da      	ldr	r2, [r3, #12]
    6884:	68fb      	ldr	r3, [r7, #12]
    6886:	681b      	ldr	r3, [r3, #0]
    6888:	429a      	cmp	r2, r3
    688a:	d208      	bcs.n	689e <prvCopyDataToQueue+0xb2>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    688c:	68fb      	ldr	r3, [r7, #12]
    688e:	685a      	ldr	r2, [r3, #4]
    6890:	68fb      	ldr	r3, [r7, #12]
    6892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6894:	f1c3 0300 	rsb	r3, r3, #0
    6898:	18d2      	adds	r2, r2, r3
    689a:	68fb      	ldr	r3, [r7, #12]
    689c:	60da      	str	r2, [r3, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
    689e:	68fb      	ldr	r3, [r7, #12]
    68a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    68a2:	f103 0201 	add.w	r2, r3, #1
    68a6:	68fb      	ldr	r3, [r7, #12]
    68a8:	639a      	str	r2, [r3, #56]	; 0x38
}
    68aa:	f107 0710 	add.w	r7, r7, #16
    68ae:	46bd      	mov	sp, r7
    68b0:	bd80      	pop	{r7, pc}
    68b2:	bf00      	nop

000068b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    68b4:	b580      	push	{r7, lr}
    68b6:	b082      	sub	sp, #8
    68b8:	af00      	add	r7, sp, #0
    68ba:	6078      	str	r0, [r7, #4]
    68bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    68be:	687b      	ldr	r3, [r7, #4]
    68c0:	681b      	ldr	r3, [r3, #0]
    68c2:	2b00      	cmp	r3, #0
    68c4:	d01a      	beq.n	68fc <prvCopyDataFromQueue+0x48>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    68c6:	687b      	ldr	r3, [r7, #4]
    68c8:	68da      	ldr	r2, [r3, #12]
    68ca:	687b      	ldr	r3, [r7, #4]
    68cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    68ce:	18d2      	adds	r2, r2, r3
    68d0:	687b      	ldr	r3, [r7, #4]
    68d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    68d4:	687b      	ldr	r3, [r7, #4]
    68d6:	68da      	ldr	r2, [r3, #12]
    68d8:	687b      	ldr	r3, [r7, #4]
    68da:	685b      	ldr	r3, [r3, #4]
    68dc:	429a      	cmp	r2, r3
    68de:	d303      	bcc.n	68e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    68e0:	687b      	ldr	r3, [r7, #4]
    68e2:	681a      	ldr	r2, [r3, #0]
    68e4:	687b      	ldr	r3, [r7, #4]
    68e6:	60da      	str	r2, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    68e8:	687b      	ldr	r3, [r7, #4]
    68ea:	68da      	ldr	r2, [r3, #12]
    68ec:	687b      	ldr	r3, [r7, #4]
    68ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    68f0:	6839      	ldr	r1, [r7, #0]
    68f2:	4608      	mov	r0, r1
    68f4:	4611      	mov	r1, r2
    68f6:	461a      	mov	r2, r3
    68f8:	f001 fb44 	bl	7f84 <memcpy>
	}
}
    68fc:	f107 0708 	add.w	r7, r7, #8
    6900:	46bd      	mov	sp, r7
    6902:	bd80      	pop	{r7, pc}

00006904 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    6904:	b580      	push	{r7, lr}
    6906:	b082      	sub	sp, #8
    6908:	af00      	add	r7, sp, #0
    690a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    690c:	f001 fab6 	bl	7e7c <vPortEnterCritical>
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    6910:	e014      	b.n	693c <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    6912:	687b      	ldr	r3, [r7, #4]
    6914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6916:	2b00      	cmp	r3, #0
    6918:	d015      	beq.n	6946 <prvUnlockQueue+0x42>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    691a:	687b      	ldr	r3, [r7, #4]
    691c:	f103 0324 	add.w	r3, r3, #36	; 0x24
    6920:	4618      	mov	r0, r3
    6922:	f000 ff11 	bl	7748 <xTaskRemoveFromEventList>
    6926:	4603      	mov	r3, r0
    6928:	2b00      	cmp	r3, #0
    692a:	d001      	beq.n	6930 <prvUnlockQueue+0x2c>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    692c:	f000 ffd8 	bl	78e0 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    6930:	687b      	ldr	r3, [r7, #4]
    6932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6934:	f103 32ff 	add.w	r2, r3, #4294967295
    6938:	687b      	ldr	r3, [r7, #4]
    693a:	649a      	str	r2, [r3, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    693c:	687b      	ldr	r3, [r7, #4]
    693e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    6940:	2b00      	cmp	r3, #0
    6942:	dce6      	bgt.n	6912 <prvUnlockQueue+0xe>
    6944:	e000      	b.n	6948 <prvUnlockQueue+0x44>

				--( pxQueue->xTxLock );
			}
			else
			{
				break;
    6946:	bf00      	nop
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    6948:	687b      	ldr	r3, [r7, #4]
    694a:	f04f 32ff 	mov.w	r2, #4294967295
    694e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
    6950:	f001 faaa 	bl	7ea8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    6954:	f001 fa92 	bl	7e7c <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    6958:	e014      	b.n	6984 <prvUnlockQueue+0x80>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    695a:	687b      	ldr	r3, [r7, #4]
    695c:	691b      	ldr	r3, [r3, #16]
    695e:	2b00      	cmp	r3, #0
    6960:	d015      	beq.n	698e <prvUnlockQueue+0x8a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    6962:	687b      	ldr	r3, [r7, #4]
    6964:	f103 0310 	add.w	r3, r3, #16
    6968:	4618      	mov	r0, r3
    696a:	f000 feed 	bl	7748 <xTaskRemoveFromEventList>
    696e:	4603      	mov	r3, r0
    6970:	2b00      	cmp	r3, #0
    6972:	d001      	beq.n	6978 <prvUnlockQueue+0x74>
				{
					vTaskMissedYield();
    6974:	f000 ffb4 	bl	78e0 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    6978:	687b      	ldr	r3, [r7, #4]
    697a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    697c:	f103 32ff 	add.w	r2, r3, #4294967295
    6980:	687b      	ldr	r3, [r7, #4]
    6982:	645a      	str	r2, [r3, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    6984:	687b      	ldr	r3, [r7, #4]
    6986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6988:	2b00      	cmp	r3, #0
    698a:	dce6      	bgt.n	695a <prvUnlockQueue+0x56>
    698c:	e000      	b.n	6990 <prvUnlockQueue+0x8c>

				--( pxQueue->xRxLock );
			}
			else
			{
				break;
    698e:	bf00      	nop
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    6990:	687b      	ldr	r3, [r7, #4]
    6992:	f04f 32ff 	mov.w	r2, #4294967295
    6996:	645a      	str	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
    6998:	f001 fa86 	bl	7ea8 <vPortExitCritical>
}
    699c:	f107 0708 	add.w	r7, r7, #8
    69a0:	46bd      	mov	sp, r7
    69a2:	bd80      	pop	{r7, pc}

000069a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    69a4:	b580      	push	{r7, lr}
    69a6:	b084      	sub	sp, #16
    69a8:	af00      	add	r7, sp, #0
    69aa:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    69ac:	f001 fa66 	bl	7e7c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    69b0:	687b      	ldr	r3, [r7, #4]
    69b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    69b4:	2b00      	cmp	r3, #0
    69b6:	bf14      	ite	ne
    69b8:	2300      	movne	r3, #0
    69ba:	2301      	moveq	r3, #1
    69bc:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    69be:	f001 fa73 	bl	7ea8 <vPortExitCritical>

	return xReturn;
    69c2:	68fb      	ldr	r3, [r7, #12]
}
    69c4:	4618      	mov	r0, r3
    69c6:	f107 0710 	add.w	r7, r7, #16
    69ca:	46bd      	mov	sp, r7
    69cc:	bd80      	pop	{r7, pc}
    69ce:	bf00      	nop

000069d0 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    69d0:	b480      	push	{r7}
    69d2:	b085      	sub	sp, #20
    69d4:	af00      	add	r7, sp, #0
    69d6:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    69d8:	687b      	ldr	r3, [r7, #4]
    69da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    69dc:	2b00      	cmp	r3, #0
    69de:	bf14      	ite	ne
    69e0:	2300      	movne	r3, #0
    69e2:	2301      	moveq	r3, #1
    69e4:	60fb      	str	r3, [r7, #12]

	return xReturn;
    69e6:	68fb      	ldr	r3, [r7, #12]
}
    69e8:	4618      	mov	r0, r3
    69ea:	f107 0714 	add.w	r7, r7, #20
    69ee:	46bd      	mov	sp, r7
    69f0:	bc80      	pop	{r7}
    69f2:	4770      	bx	lr

000069f4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    69f4:	b580      	push	{r7, lr}
    69f6:	b084      	sub	sp, #16
    69f8:	af00      	add	r7, sp, #0
    69fa:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    69fc:	f001 fa3e 	bl	7e7c <vPortEnterCritical>
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    6a00:	687b      	ldr	r3, [r7, #4]
    6a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6a04:	687b      	ldr	r3, [r7, #4]
    6a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6a08:	429a      	cmp	r2, r3
    6a0a:	bf14      	ite	ne
    6a0c:	2300      	movne	r3, #0
    6a0e:	2301      	moveq	r3, #1
    6a10:	60fb      	str	r3, [r7, #12]
	taskEXIT_CRITICAL();
    6a12:	f001 fa49 	bl	7ea8 <vPortExitCritical>

	return xReturn;
    6a16:	68fb      	ldr	r3, [r7, #12]
}
    6a18:	4618      	mov	r0, r3
    6a1a:	f107 0710 	add.w	r7, r7, #16
    6a1e:	46bd      	mov	sp, r7
    6a20:	bd80      	pop	{r7, pc}
    6a22:	bf00      	nop

00006a24 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    6a24:	b480      	push	{r7}
    6a26:	b085      	sub	sp, #20
    6a28:	af00      	add	r7, sp, #0
    6a2a:	6078      	str	r0, [r7, #4]
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    6a2c:	687b      	ldr	r3, [r7, #4]
    6a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    6a30:	687b      	ldr	r3, [r7, #4]
    6a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6a34:	429a      	cmp	r2, r3
    6a36:	bf14      	ite	ne
    6a38:	2300      	movne	r3, #0
    6a3a:	2301      	moveq	r3, #1
    6a3c:	60fb      	str	r3, [r7, #12]

	return xReturn;
    6a3e:	68fb      	ldr	r3, [r7, #12]
}
    6a40:	4618      	mov	r0, r3
    6a42:	f107 0714 	add.w	r7, r7, #20
    6a46:	46bd      	mov	sp, r7
    6a48:	bc80      	pop	{r7}
    6a4a:	4770      	bx	lr

00006a4c <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    6a4c:	b580      	push	{r7, lr}
    6a4e:	b08a      	sub	sp, #40	; 0x28
    6a50:	af02      	add	r7, sp, #8
    6a52:	60f8      	str	r0, [r7, #12]
    6a54:	60b9      	str	r1, [r7, #8]
    6a56:	603b      	str	r3, [r7, #0]
    6a58:	4613      	mov	r3, r2
    6a5a:	80fb      	strh	r3, [r7, #6]
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    6a5c:	88fb      	ldrh	r3, [r7, #6]
    6a5e:	4618      	mov	r0, r3
    6a60:	6b39      	ldr	r1, [r7, #48]	; 0x30
    6a62:	f001 f87b 	bl	7b5c <prvAllocateTCBAndStack>
    6a66:	61b8      	str	r0, [r7, #24]

	if( pxNewTCB != NULL )
    6a68:	69bb      	ldr	r3, [r7, #24]
    6a6a:	2b00      	cmp	r3, #0
    6a6c:	f000 80a5 	beq.w	6bba <xTaskGenericCreate+0x16e>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    6a70:	69bb      	ldr	r3, [r7, #24]
    6a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    6a74:	88fb      	ldrh	r3, [r7, #6]
    6a76:	f103 33ff 	add.w	r3, r3, #4294967295
    6a7a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6a7e:	18d3      	adds	r3, r2, r3
    6a80:	617b      	str	r3, [r7, #20]
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
    6a82:	697b      	ldr	r3, [r7, #20]
    6a84:	f023 0307 	bic.w	r3, r3, #7
    6a88:	617b      	str	r3, [r7, #20]
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    6a8a:	88fb      	ldrh	r3, [r7, #6]
    6a8c:	9300      	str	r3, [sp, #0]
    6a8e:	69b8      	ldr	r0, [r7, #24]
    6a90:	68b9      	ldr	r1, [r7, #8]
    6a92:	6aba      	ldr	r2, [r7, #40]	; 0x28
    6a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6a96:	f000 ff41 	bl	791c <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    6a9a:	6978      	ldr	r0, [r7, #20]
    6a9c:	68f9      	ldr	r1, [r7, #12]
    6a9e:	683a      	ldr	r2, [r7, #0]
    6aa0:	f001 f968 	bl	7d74 <pxPortInitialiseStack>
    6aa4:	4602      	mov	r2, r0
    6aa6:	69bb      	ldr	r3, [r7, #24]
    6aa8:	601a      	str	r2, [r3, #0]
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    6aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6aac:	2b00      	cmp	r3, #0
    6aae:	d002      	beq.n	6ab6 <xTaskGenericCreate+0x6a>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    6ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6ab2:	69ba      	ldr	r2, [r7, #24]
    6ab4:	601a      	str	r2, [r3, #0]
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    6ab6:	f001 f9e1 	bl	7e7c <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
    6aba:	f244 53a0 	movw	r3, #17824	; 0x45a0
    6abe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ac2:	681b      	ldr	r3, [r3, #0]
    6ac4:	f103 0201 	add.w	r2, r3, #1
    6ac8:	f244 53a0 	movw	r3, #17824	; 0x45a0
    6acc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ad0:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
    6ad2:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6ad6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ada:	681b      	ldr	r3, [r3, #0]
    6adc:	2b00      	cmp	r3, #0
    6ade:	d10f      	bne.n	6b00 <xTaskGenericCreate+0xb4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    6ae0:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6ae4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ae8:	69ba      	ldr	r2, [r7, #24]
    6aea:	601a      	str	r2, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    6aec:	f244 53a0 	movw	r3, #17824	; 0x45a0
    6af0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6af4:	681b      	ldr	r3, [r3, #0]
    6af6:	2b01      	cmp	r3, #1
    6af8:	d118      	bne.n	6b2c <xTaskGenericCreate+0xe0>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    6afa:	f000 ff4b 	bl	7994 <prvInitialiseTaskLists>
    6afe:	e015      	b.n	6b2c <xTaskGenericCreate+0xe0>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    6b00:	f244 53b0 	movw	r3, #17840	; 0x45b0
    6b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b08:	681b      	ldr	r3, [r3, #0]
    6b0a:	2b00      	cmp	r3, #0
    6b0c:	d10e      	bne.n	6b2c <xTaskGenericCreate+0xe0>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    6b0e:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6b12:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b16:	681b      	ldr	r3, [r3, #0]
    6b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6b1c:	429a      	cmp	r2, r3
    6b1e:	d805      	bhi.n	6b2c <xTaskGenericCreate+0xe0>
					{
						pxCurrentTCB = pxNewTCB;
    6b20:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6b24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b28:	69ba      	ldr	r2, [r7, #24]
    6b2a:	601a      	str	r2, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    6b2c:	69bb      	ldr	r3, [r7, #24]
    6b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6b30:	f244 53a8 	movw	r3, #17832	; 0x45a8
    6b34:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b38:	681b      	ldr	r3, [r3, #0]
    6b3a:	429a      	cmp	r2, r3
    6b3c:	d906      	bls.n	6b4c <xTaskGenericCreate+0x100>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    6b3e:	69bb      	ldr	r3, [r7, #24]
    6b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6b42:	f244 53a8 	movw	r3, #17832	; 0x45a8
    6b46:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b4a:	601a      	str	r2, [r3, #0]
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    6b4c:	f244 53c4 	movw	r3, #17860	; 0x45c4
    6b50:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b54:	681b      	ldr	r3, [r3, #0]
    6b56:	f103 0201 	add.w	r2, r3, #1
    6b5a:	f244 53c4 	movw	r3, #17860	; 0x45c4
    6b5e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b62:	601a      	str	r2, [r3, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
    6b64:	69bb      	ldr	r3, [r7, #24]
    6b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6b68:	f244 53ac 	movw	r3, #17836	; 0x45ac
    6b6c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b70:	681b      	ldr	r3, [r3, #0]
    6b72:	429a      	cmp	r2, r3
    6b74:	d906      	bls.n	6b84 <xTaskGenericCreate+0x138>
    6b76:	69bb      	ldr	r3, [r7, #24]
    6b78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6b7a:	f244 53ac 	movw	r3, #17836	; 0x45ac
    6b7e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b82:	601a      	str	r2, [r3, #0]
    6b84:	69bb      	ldr	r3, [r7, #24]
    6b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6b88:	4613      	mov	r3, r2
    6b8a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6b8e:	189b      	adds	r3, r3, r2
    6b90:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6b94:	461a      	mov	r2, r3
    6b96:	f244 43cc 	movw	r3, #17612	; 0x44cc
    6b9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6b9e:	18d2      	adds	r2, r2, r3
    6ba0:	69bb      	ldr	r3, [r7, #24]
    6ba2:	f103 0304 	add.w	r3, r3, #4
    6ba6:	4610      	mov	r0, r2
    6ba8:	4619      	mov	r1, r3
    6baa:	f7ff fa83 	bl	60b4 <vListInsertEnd>

			xReturn = pdPASS;
    6bae:	f04f 0301 	mov.w	r3, #1
    6bb2:	61fb      	str	r3, [r7, #28]
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    6bb4:	f001 f978 	bl	7ea8 <vPortExitCritical>
    6bb8:	e002      	b.n	6bc0 <xTaskGenericCreate+0x174>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    6bba:	f04f 33ff 	mov.w	r3, #4294967295
    6bbe:	61fb      	str	r3, [r7, #28]
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    6bc0:	69fb      	ldr	r3, [r7, #28]
    6bc2:	2b01      	cmp	r3, #1
    6bc4:	d111      	bne.n	6bea <xTaskGenericCreate+0x19e>
	{
		if( xSchedulerRunning != pdFALSE )
    6bc6:	f244 53b0 	movw	r3, #17840	; 0x45b0
    6bca:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bce:	681b      	ldr	r3, [r3, #0]
    6bd0:	2b00      	cmp	r3, #0
    6bd2:	d00a      	beq.n	6bea <xTaskGenericCreate+0x19e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    6bd4:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6bdc:	681b      	ldr	r3, [r3, #0]
    6bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6be2:	429a      	cmp	r2, r3
    6be4:	d201      	bcs.n	6bea <xTaskGenericCreate+0x19e>
			{
				portYIELD_WITHIN_API();
    6be6:	f001 f93d 	bl	7e64 <vPortYieldFromISR>
			}
		}
	}

	return xReturn;
    6bea:	69fb      	ldr	r3, [r7, #28]
}
    6bec:	4618      	mov	r0, r3
    6bee:	f107 0720 	add.w	r7, r7, #32
    6bf2:	46bd      	mov	sp, r7
    6bf4:	bd80      	pop	{r7, pc}
    6bf6:	bf00      	nop

00006bf8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    6bf8:	b580      	push	{r7, lr}
    6bfa:	b084      	sub	sp, #16
    6bfc:	af00      	add	r7, sp, #0
    6bfe:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    6c00:	f001 f93c 	bl	7e7c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    6c04:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6c08:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c0c:	681b      	ldr	r3, [r3, #0]
    6c0e:	687a      	ldr	r2, [r7, #4]
    6c10:	429a      	cmp	r2, r3
    6c12:	d102      	bne.n	6c1a <vTaskDelete+0x22>
			{
				pxTaskToDelete = NULL;
    6c14:	f04f 0300 	mov.w	r3, #0
    6c18:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    6c1a:	687b      	ldr	r3, [r7, #4]
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d105      	bne.n	6c2c <vTaskDelete+0x34>
    6c20:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6c24:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c28:	681b      	ldr	r3, [r3, #0]
    6c2a:	e000      	b.n	6c2e <vTaskDelete+0x36>
    6c2c:	687b      	ldr	r3, [r7, #4]
    6c2e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    6c30:	68fb      	ldr	r3, [r7, #12]
    6c32:	f103 0304 	add.w	r3, r3, #4
    6c36:	4618      	mov	r0, r3
    6c38:	f7ff fa9e 	bl	6178 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    6c3c:	68fb      	ldr	r3, [r7, #12]
    6c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6c40:	2b00      	cmp	r3, #0
    6c42:	d005      	beq.n	6c50 <vTaskDelete+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    6c44:	68fb      	ldr	r3, [r7, #12]
    6c46:	f103 0318 	add.w	r3, r3, #24
    6c4a:	4618      	mov	r0, r3
    6c4c:	f7ff fa94 	bl	6178 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    6c50:	68fb      	ldr	r3, [r7, #12]
    6c52:	f103 0304 	add.w	r3, r3, #4
    6c56:	f244 5074 	movw	r0, #17780	; 0x4574
    6c5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    6c5e:	4619      	mov	r1, r3
    6c60:	f7ff fa28 	bl	60b4 <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    6c64:	f244 5388 	movw	r3, #17800	; 0x4588
    6c68:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c6c:	681b      	ldr	r3, [r3, #0]
    6c6e:	f103 0201 	add.w	r2, r3, #1
    6c72:	f244 5388 	movw	r3, #17800	; 0x4588
    6c76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c7a:	601a      	str	r2, [r3, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    6c7c:	f244 53c4 	movw	r3, #17860	; 0x45c4
    6c80:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c84:	681b      	ldr	r3, [r3, #0]
    6c86:	f103 0201 	add.w	r2, r3, #1
    6c8a:	f244 53c4 	movw	r3, #17860	; 0x45c4
    6c8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6c92:	601a      	str	r2, [r3, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    6c94:	f001 f908 	bl	7ea8 <vPortExitCritical>

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    6c98:	f244 53b0 	movw	r3, #17840	; 0x45b0
    6c9c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ca0:	681b      	ldr	r3, [r3, #0]
    6ca2:	2b00      	cmp	r3, #0
    6ca4:	d004      	beq.n	6cb0 <vTaskDelete+0xb8>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    6ca6:	687b      	ldr	r3, [r7, #4]
    6ca8:	2b00      	cmp	r3, #0
    6caa:	d101      	bne.n	6cb0 <vTaskDelete+0xb8>
			{
				portYIELD_WITHIN_API();
    6cac:	f001 f8da 	bl	7e64 <vPortYieldFromISR>
			}
		}
	}
    6cb0:	f107 0710 	add.w	r7, r7, #16
    6cb4:	46bd      	mov	sp, r7
    6cb6:	bd80      	pop	{r7, pc}

00006cb8 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    6cb8:	b580      	push	{r7, lr}
    6cba:	b086      	sub	sp, #24
    6cbc:	af00      	add	r7, sp, #0
    6cbe:	6078      	str	r0, [r7, #4]
    6cc0:	6039      	str	r1, [r7, #0]
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    6cc2:	f04f 0300 	mov.w	r3, #0
    6cc6:	617b      	str	r3, [r7, #20]

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    6cc8:	f000 fac0 	bl	724c <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    6ccc:	687b      	ldr	r3, [r7, #4]
    6cce:	681a      	ldr	r2, [r3, #0]
    6cd0:	683b      	ldr	r3, [r7, #0]
    6cd2:	18d3      	adds	r3, r2, r3
    6cd4:	613b      	str	r3, [r7, #16]

			if( xTickCount < *pxPreviousWakeTime )
    6cd6:	687b      	ldr	r3, [r7, #4]
    6cd8:	681a      	ldr	r2, [r3, #0]
    6cda:	f244 53a4 	movw	r3, #17828	; 0x45a4
    6cde:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ce2:	681b      	ldr	r3, [r3, #0]
    6ce4:	429a      	cmp	r2, r3
    6ce6:	d910      	bls.n	6d0a <vTaskDelayUntil+0x52>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    6ce8:	687b      	ldr	r3, [r7, #4]
    6cea:	681a      	ldr	r2, [r3, #0]
    6cec:	693b      	ldr	r3, [r7, #16]
    6cee:	429a      	cmp	r2, r3
    6cf0:	d91b      	bls.n	6d2a <vTaskDelayUntil+0x72>
    6cf2:	f244 53a4 	movw	r3, #17828	; 0x45a4
    6cf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6cfa:	681b      	ldr	r3, [r3, #0]
    6cfc:	693a      	ldr	r2, [r7, #16]
    6cfe:	429a      	cmp	r2, r3
    6d00:	d913      	bls.n	6d2a <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
    6d02:	f04f 0301 	mov.w	r3, #1
    6d06:	617b      	str	r3, [r7, #20]
    6d08:	e00f      	b.n	6d2a <vTaskDelayUntil+0x72>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    6d0a:	687b      	ldr	r3, [r7, #4]
    6d0c:	681a      	ldr	r2, [r3, #0]
    6d0e:	693b      	ldr	r3, [r7, #16]
    6d10:	429a      	cmp	r2, r3
    6d12:	d807      	bhi.n	6d24 <vTaskDelayUntil+0x6c>
    6d14:	f244 53a4 	movw	r3, #17828	; 0x45a4
    6d18:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d1c:	681b      	ldr	r3, [r3, #0]
    6d1e:	693a      	ldr	r2, [r7, #16]
    6d20:	429a      	cmp	r2, r3
    6d22:	d902      	bls.n	6d2a <vTaskDelayUntil+0x72>
				{
					xShouldDelay = pdTRUE;
    6d24:	f04f 0301 	mov.w	r3, #1
    6d28:	617b      	str	r3, [r7, #20]
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    6d2a:	687b      	ldr	r3, [r7, #4]
    6d2c:	693a      	ldr	r2, [r7, #16]
    6d2e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
    6d30:	697b      	ldr	r3, [r7, #20]
    6d32:	2b00      	cmp	r3, #0
    6d34:	d00c      	beq.n	6d50 <vTaskDelayUntil+0x98>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    6d36:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6d3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d3e:	681b      	ldr	r3, [r3, #0]
    6d40:	f103 0304 	add.w	r3, r3, #4
    6d44:	4618      	mov	r0, r3
    6d46:	f7ff fa17 	bl	6178 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    6d4a:	6938      	ldr	r0, [r7, #16]
    6d4c:	f000 fec0 	bl	7ad0 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    6d50:	f000 fa8e 	bl	7270 <xTaskResumeAll>
    6d54:	60f8      	str	r0, [r7, #12]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    6d56:	68fb      	ldr	r3, [r7, #12]
    6d58:	2b00      	cmp	r3, #0
    6d5a:	d101      	bne.n	6d60 <vTaskDelayUntil+0xa8>
		{
			portYIELD_WITHIN_API();
    6d5c:	f001 f882 	bl	7e64 <vPortYieldFromISR>
		}
	}
    6d60:	f107 0718 	add.w	r7, r7, #24
    6d64:	46bd      	mov	sp, r7
    6d66:	bd80      	pop	{r7, pc}

00006d68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    6d68:	b580      	push	{r7, lr}
    6d6a:	b084      	sub	sp, #16
    6d6c:	af00      	add	r7, sp, #0
    6d6e:	6078      	str	r0, [r7, #4]
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    6d70:	f04f 0300 	mov.w	r3, #0
    6d74:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    6d76:	687b      	ldr	r3, [r7, #4]
    6d78:	2b00      	cmp	r3, #0
    6d7a:	d019      	beq.n	6db0 <vTaskDelay+0x48>
		{
			vTaskSuspendAll();
    6d7c:	f000 fa66 	bl	724c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    6d80:	f244 53a4 	movw	r3, #17828	; 0x45a4
    6d84:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d88:	681a      	ldr	r2, [r3, #0]
    6d8a:	687b      	ldr	r3, [r7, #4]
    6d8c:	18d3      	adds	r3, r2, r3
    6d8e:	60bb      	str	r3, [r7, #8]

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    6d90:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6d94:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6d98:	681b      	ldr	r3, [r3, #0]
    6d9a:	f103 0304 	add.w	r3, r3, #4
    6d9e:	4618      	mov	r0, r3
    6da0:	f7ff f9ea 	bl	6178 <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    6da4:	68b8      	ldr	r0, [r7, #8]
    6da6:	f000 fe93 	bl	7ad0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    6daa:	f000 fa61 	bl	7270 <xTaskResumeAll>
    6dae:	60f8      	str	r0, [r7, #12]
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    6db0:	68fb      	ldr	r3, [r7, #12]
    6db2:	2b00      	cmp	r3, #0
    6db4:	d101      	bne.n	6dba <vTaskDelay+0x52>
		{
			portYIELD_WITHIN_API();
    6db6:	f001 f855 	bl	7e64 <vPortYieldFromISR>
		}
	}
    6dba:	f107 0710 	add.w	r7, r7, #16
    6dbe:	46bd      	mov	sp, r7
    6dc0:	bd80      	pop	{r7, pc}
    6dc2:	bf00      	nop

00006dc4 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	unsigned portBASE_TYPE uxTaskPriorityGet( xTaskHandle pxTask )
	{
    6dc4:	b580      	push	{r7, lr}
    6dc6:	b084      	sub	sp, #16
    6dc8:	af00      	add	r7, sp, #0
    6dca:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxReturn;

		taskENTER_CRITICAL();
    6dcc:	f001 f856 	bl	7e7c <vPortEnterCritical>
		{
			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    6dd0:	687b      	ldr	r3, [r7, #4]
    6dd2:	2b00      	cmp	r3, #0
    6dd4:	d105      	bne.n	6de2 <uxTaskPriorityGet+0x1e>
    6dd6:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6dda:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6dde:	681b      	ldr	r3, [r3, #0]
    6de0:	e000      	b.n	6de4 <uxTaskPriorityGet+0x20>
    6de2:	687b      	ldr	r3, [r7, #4]
    6de4:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
    6de6:	68fb      	ldr	r3, [r7, #12]
    6de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6dea:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
    6dec:	f001 f85c 	bl	7ea8 <vPortExitCritical>

		return uxReturn;
    6df0:	68bb      	ldr	r3, [r7, #8]
	}
    6df2:	4618      	mov	r0, r3
    6df4:	f107 0710 	add.w	r7, r7, #16
    6df8:	46bd      	mov	sp, r7
    6dfa:	bd80      	pop	{r7, pc}

00006dfc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( xTaskHandle pxTask, unsigned portBASE_TYPE uxNewPriority )
	{
    6dfc:	b580      	push	{r7, lr}
    6dfe:	b086      	sub	sp, #24
    6e00:	af00      	add	r7, sp, #0
    6e02:	6078      	str	r0, [r7, #4]
    6e04:	6039      	str	r1, [r7, #0]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxCurrentPriority;
	portBASE_TYPE xYieldRequired = pdFALSE;
    6e06:	f04f 0300 	mov.w	r3, #0
    6e0a:	617b      	str	r3, [r7, #20]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= configMAX_PRIORITIES )
    6e0c:	683b      	ldr	r3, [r7, #0]
    6e0e:	2b04      	cmp	r3, #4
    6e10:	d902      	bls.n	6e18 <vTaskPrioritySet+0x1c>
		{
			uxNewPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    6e12:	f04f 0304 	mov.w	r3, #4
    6e16:	603b      	str	r3, [r7, #0]
		}

		taskENTER_CRITICAL();
    6e18:	f001 f830 	bl	7e7c <vPortEnterCritical>
		{
			if( pxTask == pxCurrentTCB )
    6e1c:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6e20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e24:	681b      	ldr	r3, [r3, #0]
    6e26:	687a      	ldr	r2, [r7, #4]
    6e28:	429a      	cmp	r2, r3
    6e2a:	d102      	bne.n	6e32 <vTaskPrioritySet+0x36>
			{
				pxTask = NULL;
    6e2c:	f04f 0300 	mov.w	r3, #0
    6e30:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are changing the
			priority of the calling function. */
			pxTCB = prvGetTCBFromHandle( pxTask );
    6e32:	687b      	ldr	r3, [r7, #4]
    6e34:	2b00      	cmp	r3, #0
    6e36:	d105      	bne.n	6e44 <vTaskPrioritySet+0x48>
    6e38:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6e40:	681b      	ldr	r3, [r3, #0]
    6e42:	e000      	b.n	6e46 <vTaskPrioritySet+0x4a>
    6e44:	687b      	ldr	r3, [r7, #4]
    6e46:	613b      	str	r3, [r7, #16]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentPriority = pxTCB->uxBasePriority;
    6e48:	693b      	ldr	r3, [r7, #16]
    6e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6e4c:	60fb      	str	r3, [r7, #12]
			{
				uxCurrentPriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentPriority != uxNewPriority )
    6e4e:	68fa      	ldr	r2, [r7, #12]
    6e50:	683b      	ldr	r3, [r7, #0]
    6e52:	429a      	cmp	r2, r3
    6e54:	d062      	beq.n	6f1c <vTaskPrioritySet+0x120>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentPriority )
    6e56:	683a      	ldr	r2, [r7, #0]
    6e58:	68fb      	ldr	r3, [r7, #12]
    6e5a:	429a      	cmp	r2, r3
    6e5c:	d906      	bls.n	6e6c <vTaskPrioritySet+0x70>
				{
					if( pxTask != NULL )
    6e5e:	687b      	ldr	r3, [r7, #4]
    6e60:	2b00      	cmp	r3, #0
    6e62:	d009      	beq.n	6e78 <vTaskPrioritySet+0x7c>
					{
						/* The priority of another task is being raised.  If we
						were raising the priority of the currently running task
						there would be no need to switch as it must have already
						been the highest priority task. */
						xYieldRequired = pdTRUE;
    6e64:	f04f 0301 	mov.w	r3, #1
    6e68:	617b      	str	r3, [r7, #20]
    6e6a:	e005      	b.n	6e78 <vTaskPrioritySet+0x7c>
					}
				}
				else if( pxTask == NULL )
    6e6c:	687b      	ldr	r3, [r7, #4]
    6e6e:	2b00      	cmp	r3, #0
    6e70:	d102      	bne.n	6e78 <vTaskPrioritySet+0x7c>
				{
					/* Setting our own priority down means there may now be another
					task of higher priority that is ready to execute. */
					xYieldRequired = pdTRUE;
    6e72:	f04f 0301 	mov.w	r3, #1
    6e76:	617b      	str	r3, [r7, #20]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
    6e78:	693b      	ldr	r3, [r7, #16]
    6e7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    6e7c:	693b      	ldr	r3, [r7, #16]
    6e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    6e80:	429a      	cmp	r2, r3
    6e82:	d102      	bne.n	6e8a <vTaskPrioritySet+0x8e>
					{
						pxTCB->uxPriority = uxNewPriority;
    6e84:	693b      	ldr	r3, [r7, #16]
    6e86:	683a      	ldr	r2, [r7, #0]
    6e88:	62da      	str	r2, [r3, #44]	; 0x2c
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
    6e8a:	693b      	ldr	r3, [r7, #16]
    6e8c:	683a      	ldr	r2, [r7, #0]
    6e8e:	645a      	str	r2, [r3, #68]	; 0x44
				{
					pxTCB->uxPriority = uxNewPriority;
				}
				#endif

				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( configMAX_PRIORITIES - ( portTickType ) uxNewPriority ) );
    6e90:	683b      	ldr	r3, [r7, #0]
    6e92:	f1c3 0205 	rsb	r2, r3, #5
    6e96:	693b      	ldr	r3, [r7, #16]
    6e98:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change it's priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the queue appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxCurrentPriority ] ), &( pxTCB->xGenericListItem ) ) )
    6e9a:	693b      	ldr	r3, [r7, #16]
    6e9c:	6959      	ldr	r1, [r3, #20]
    6e9e:	68fa      	ldr	r2, [r7, #12]
    6ea0:	4613      	mov	r3, r2
    6ea2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6ea6:	189b      	adds	r3, r3, r2
    6ea8:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6eac:	461a      	mov	r2, r3
    6eae:	f244 43cc 	movw	r3, #17612	; 0x44cc
    6eb2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6eb6:	18d3      	adds	r3, r2, r3
    6eb8:	4299      	cmp	r1, r3
    6eba:	d12a      	bne.n	6f12 <vTaskPrioritySet+0x116>
				{
					/* The task is currently in its ready list - remove before adding
					it to it's new ready list.  As we are in a critical section we
					can do this even if the scheduler is suspended. */
					vListRemove( &( pxTCB->xGenericListItem ) );
    6ebc:	693b      	ldr	r3, [r7, #16]
    6ebe:	f103 0304 	add.w	r3, r3, #4
    6ec2:	4618      	mov	r0, r3
    6ec4:	f7ff f958 	bl	6178 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    6ec8:	693b      	ldr	r3, [r7, #16]
    6eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6ecc:	f244 53ac 	movw	r3, #17836	; 0x45ac
    6ed0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ed4:	681b      	ldr	r3, [r3, #0]
    6ed6:	429a      	cmp	r2, r3
    6ed8:	d906      	bls.n	6ee8 <vTaskPrioritySet+0xec>
    6eda:	693b      	ldr	r3, [r7, #16]
    6edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6ede:	f244 53ac 	movw	r3, #17836	; 0x45ac
    6ee2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6ee6:	601a      	str	r2, [r3, #0]
    6ee8:	693b      	ldr	r3, [r7, #16]
    6eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    6eec:	4613      	mov	r3, r2
    6eee:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6ef2:	189b      	adds	r3, r3, r2
    6ef4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    6ef8:	461a      	mov	r2, r3
    6efa:	f244 43cc 	movw	r3, #17612	; 0x44cc
    6efe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f02:	18d2      	adds	r2, r2, r3
    6f04:	693b      	ldr	r3, [r7, #16]
    6f06:	f103 0304 	add.w	r3, r3, #4
    6f0a:	4610      	mov	r0, r2
    6f0c:	4619      	mov	r1, r3
    6f0e:	f7ff f8d1 	bl	60b4 <vListInsertEnd>
				}

				if( xYieldRequired == pdTRUE )
    6f12:	697b      	ldr	r3, [r7, #20]
    6f14:	2b01      	cmp	r3, #1
    6f16:	d101      	bne.n	6f1c <vTaskPrioritySet+0x120>
				{
					portYIELD_WITHIN_API();
    6f18:	f000 ffa4 	bl	7e64 <vPortYieldFromISR>
				}
			}
		}
		taskEXIT_CRITICAL();
    6f1c:	f000 ffc4 	bl	7ea8 <vPortExitCritical>
	}
    6f20:	f107 0718 	add.w	r7, r7, #24
    6f24:	46bd      	mov	sp, r7
    6f26:	bd80      	pop	{r7, pc}

00006f28 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    6f28:	b580      	push	{r7, lr}
    6f2a:	b084      	sub	sp, #16
    6f2c:	af00      	add	r7, sp, #0
    6f2e:	6078      	str	r0, [r7, #4]
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    6f30:	f000 ffa4 	bl	7e7c <vPortEnterCritical>
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    6f34:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f3c:	681b      	ldr	r3, [r3, #0]
    6f3e:	687a      	ldr	r2, [r7, #4]
    6f40:	429a      	cmp	r2, r3
    6f42:	d102      	bne.n	6f4a <vTaskSuspend+0x22>
			{
				pxTaskToSuspend = NULL;
    6f44:	f04f 0300 	mov.w	r3, #0
    6f48:	607b      	str	r3, [r7, #4]
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    6f4a:	687b      	ldr	r3, [r7, #4]
    6f4c:	2b00      	cmp	r3, #0
    6f4e:	d105      	bne.n	6f5c <vTaskSuspend+0x34>
    6f50:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6f54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6f58:	681b      	ldr	r3, [r3, #0]
    6f5a:	e000      	b.n	6f5e <vTaskSuspend+0x36>
    6f5c:	687b      	ldr	r3, [r7, #4]
    6f5e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    6f60:	68fb      	ldr	r3, [r7, #12]
    6f62:	f103 0304 	add.w	r3, r3, #4
    6f66:	4618      	mov	r0, r3
    6f68:	f7ff f906 	bl	6178 <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    6f6c:	68fb      	ldr	r3, [r7, #12]
    6f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f70:	2b00      	cmp	r3, #0
    6f72:	d005      	beq.n	6f80 <vTaskSuspend+0x58>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    6f74:	68fb      	ldr	r3, [r7, #12]
    6f76:	f103 0318 	add.w	r3, r3, #24
    6f7a:	4618      	mov	r0, r3
    6f7c:	f7ff f8fc 	bl	6178 <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    6f80:	68fb      	ldr	r3, [r7, #12]
    6f82:	f103 0304 	add.w	r3, r3, #4
    6f86:	f244 508c 	movw	r0, #17804	; 0x458c
    6f8a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    6f8e:	4619      	mov	r1, r3
    6f90:	f7ff f890 	bl	60b4 <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    6f94:	f000 ff88 	bl	7ea8 <vPortExitCritical>

		if( ( void * ) pxTaskToSuspend == NULL )
    6f98:	687b      	ldr	r3, [r7, #4]
    6f9a:	2b00      	cmp	r3, #0
    6f9c:	d11f      	bne.n	6fde <vTaskSuspend+0xb6>
		{
			if( xSchedulerRunning != pdFALSE )
    6f9e:	f244 53b0 	movw	r3, #17840	; 0x45b0
    6fa2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fa6:	681b      	ldr	r3, [r3, #0]
    6fa8:	2b00      	cmp	r3, #0
    6faa:	d002      	beq.n	6fb2 <vTaskSuspend+0x8a>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    6fac:	f000 ff5a 	bl	7e64 <vPortYieldFromISR>
    6fb0:	e015      	b.n	6fde <vTaskSuspend+0xb6>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    6fb2:	f244 538c 	movw	r3, #17804	; 0x458c
    6fb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fba:	681a      	ldr	r2, [r3, #0]
    6fbc:	f244 53a0 	movw	r3, #17824	; 0x45a0
    6fc0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fc4:	681b      	ldr	r3, [r3, #0]
    6fc6:	429a      	cmp	r2, r3
    6fc8:	d107      	bne.n	6fda <vTaskSuspend+0xb2>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    6fca:	f244 43c8 	movw	r3, #17608	; 0x44c8
    6fce:	f2c2 0300 	movt	r3, #8192	; 0x2000
    6fd2:	f04f 0200 	mov.w	r2, #0
    6fd6:	601a      	str	r2, [r3, #0]
    6fd8:	e001      	b.n	6fde <vTaskSuspend+0xb6>
				}
				else
				{
					vTaskSwitchContext();
    6fda:	f000 fb15 	bl	7608 <vTaskSwitchContext>
				}
			}
		}
	}
    6fde:	f107 0710 	add.w	r7, r7, #16
    6fe2:	46bd      	mov	sp, r7
    6fe4:	bd80      	pop	{r7, pc}
    6fe6:	bf00      	nop

00006fe8 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    6fe8:	b480      	push	{r7}
    6fea:	b085      	sub	sp, #20
    6fec:	af00      	add	r7, sp, #0
    6fee:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xReturn = pdFALSE;
    6ff0:	f04f 0300 	mov.w	r3, #0
    6ff4:	60fb      	str	r3, [r7, #12]
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    6ff6:	687b      	ldr	r3, [r7, #4]
    6ff8:	60bb      	str	r3, [r7, #8]
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    6ffa:	68bb      	ldr	r3, [r7, #8]
    6ffc:	695a      	ldr	r2, [r3, #20]
    6ffe:	f244 538c 	movw	r3, #17804	; 0x458c
    7002:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7006:	429a      	cmp	r2, r3
    7008:	d10e      	bne.n	7028 <xTaskIsTaskSuspended+0x40>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    700a:	68bb      	ldr	r3, [r7, #8]
    700c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    700e:	f244 5360 	movw	r3, #17760	; 0x4560
    7012:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7016:	429a      	cmp	r2, r3
    7018:	d006      	beq.n	7028 <xTaskIsTaskSuspended+0x40>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    701a:	68bb      	ldr	r3, [r7, #8]
    701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    701e:	2b00      	cmp	r3, #0
    7020:	d102      	bne.n	7028 <xTaskIsTaskSuspended+0x40>
				{
					xReturn = pdTRUE;
    7022:	f04f 0301 	mov.w	r3, #1
    7026:	60fb      	str	r3, [r7, #12]
				}
			}
		}

		return xReturn;
    7028:	68fb      	ldr	r3, [r7, #12]
	}
    702a:	4618      	mov	r0, r3
    702c:	f107 0714 	add.w	r7, r7, #20
    7030:	46bd      	mov	sp, r7
    7032:	bc80      	pop	{r7}
    7034:	4770      	bx	lr
    7036:	bf00      	nop

00007038 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    7038:	b580      	push	{r7, lr}
    703a:	b084      	sub	sp, #16
    703c:	af00      	add	r7, sp, #0
    703e:	6078      	str	r0, [r7, #4]
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    7040:	687b      	ldr	r3, [r7, #4]
    7042:	60fb      	str	r3, [r7, #12]

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    7044:	68fb      	ldr	r3, [r7, #12]
    7046:	2b00      	cmp	r3, #0
    7048:	d048      	beq.n	70dc <vTaskResume+0xa4>
    704a:	f244 43c8 	movw	r3, #17608	; 0x44c8
    704e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7052:	681b      	ldr	r3, [r3, #0]
    7054:	68fa      	ldr	r2, [r7, #12]
    7056:	429a      	cmp	r2, r3
    7058:	d040      	beq.n	70dc <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
    705a:	f000 ff0f 	bl	7e7c <vPortEnterCritical>
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    705e:	68f8      	ldr	r0, [r7, #12]
    7060:	f7ff ffc2 	bl	6fe8 <xTaskIsTaskSuspended>
    7064:	4603      	mov	r3, r0
    7066:	2b01      	cmp	r3, #1
    7068:	d136      	bne.n	70d8 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    706a:	68fb      	ldr	r3, [r7, #12]
    706c:	f103 0304 	add.w	r3, r3, #4
    7070:	4618      	mov	r0, r3
    7072:	f7ff f881 	bl	6178 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    7076:	68fb      	ldr	r3, [r7, #12]
    7078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    707a:	f244 53ac 	movw	r3, #17836	; 0x45ac
    707e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7082:	681b      	ldr	r3, [r3, #0]
    7084:	429a      	cmp	r2, r3
    7086:	d906      	bls.n	7096 <vTaskResume+0x5e>
    7088:	68fb      	ldr	r3, [r7, #12]
    708a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    708c:	f244 53ac 	movw	r3, #17836	; 0x45ac
    7090:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7094:	601a      	str	r2, [r3, #0]
    7096:	68fb      	ldr	r3, [r7, #12]
    7098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    709a:	4613      	mov	r3, r2
    709c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    70a0:	189b      	adds	r3, r3, r2
    70a2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    70a6:	461a      	mov	r2, r3
    70a8:	f244 43cc 	movw	r3, #17612	; 0x44cc
    70ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70b0:	18d2      	adds	r2, r2, r3
    70b2:	68fb      	ldr	r3, [r7, #12]
    70b4:	f103 0304 	add.w	r3, r3, #4
    70b8:	4610      	mov	r0, r2
    70ba:	4619      	mov	r1, r3
    70bc:	f7fe fffa 	bl	60b4 <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    70c0:	68fb      	ldr	r3, [r7, #12]
    70c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    70c4:	f244 43c8 	movw	r3, #17608	; 0x44c8
    70c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    70cc:	681b      	ldr	r3, [r3, #0]
    70ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    70d0:	429a      	cmp	r2, r3
    70d2:	d301      	bcc.n	70d8 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    70d4:	f000 fec6 	bl	7e64 <vPortYieldFromISR>
					}
				}
			}
			taskEXIT_CRITICAL();
    70d8:	f000 fee6 	bl	7ea8 <vPortExitCritical>
		}
	}
    70dc:	f107 0710 	add.w	r7, r7, #16
    70e0:	46bd      	mov	sp, r7
    70e2:	bd80      	pop	{r7, pc}

000070e4 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    70e4:	b580      	push	{r7, lr}
    70e6:	b086      	sub	sp, #24
    70e8:	af00      	add	r7, sp, #0
    70ea:	6078      	str	r0, [r7, #4]
	portBASE_TYPE xYieldRequired = pdFALSE;
    70ec:	f04f 0300 	mov.w	r3, #0
    70f0:	617b      	str	r3, [r7, #20]
	tskTCB *pxTCB;
	unsigned portBASE_TYPE uxSavedInterruptStatus;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    70f2:	687b      	ldr	r3, [r7, #4]
    70f4:	613b      	str	r3, [r7, #16]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    70f6:	f04f 0300 	mov.w	r3, #0
    70fa:	60fb      	str	r3, [r7, #12]
    70fc:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    7100:	f380 8811 	msr	BASEPRI, r0
		{
			if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    7104:	6938      	ldr	r0, [r7, #16]
    7106:	f7ff ff6f 	bl	6fe8 <xTaskIsTaskSuspended>
    710a:	4603      	mov	r3, r0
    710c:	2b01      	cmp	r3, #1
    710e:	d149      	bne.n	71a4 <xTaskResumeFromISR+0xc0>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    7110:	f244 53b4 	movw	r3, #17844	; 0x45b4
    7114:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7118:	681b      	ldr	r3, [r3, #0]
    711a:	2b00      	cmp	r3, #0
    711c:	d138      	bne.n	7190 <xTaskResumeFromISR+0xac>
				{
					xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    711e:	693b      	ldr	r3, [r7, #16]
    7120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7122:	f244 43c8 	movw	r3, #17608	; 0x44c8
    7126:	f2c2 0300 	movt	r3, #8192	; 0x2000
    712a:	681b      	ldr	r3, [r3, #0]
    712c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    712e:	429a      	cmp	r2, r3
    7130:	bf34      	ite	cc
    7132:	2300      	movcc	r3, #0
    7134:	2301      	movcs	r3, #1
    7136:	617b      	str	r3, [r7, #20]
					vListRemove(  &( pxTCB->xGenericListItem ) );
    7138:	693b      	ldr	r3, [r7, #16]
    713a:	f103 0304 	add.w	r3, r3, #4
    713e:	4618      	mov	r0, r3
    7140:	f7ff f81a 	bl	6178 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    7144:	693b      	ldr	r3, [r7, #16]
    7146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7148:	f244 53ac 	movw	r3, #17836	; 0x45ac
    714c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7150:	681b      	ldr	r3, [r3, #0]
    7152:	429a      	cmp	r2, r3
    7154:	d906      	bls.n	7164 <xTaskResumeFromISR+0x80>
    7156:	693b      	ldr	r3, [r7, #16]
    7158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    715a:	f244 53ac 	movw	r3, #17836	; 0x45ac
    715e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7162:	601a      	str	r2, [r3, #0]
    7164:	693b      	ldr	r3, [r7, #16]
    7166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7168:	4613      	mov	r3, r2
    716a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    716e:	189b      	adds	r3, r3, r2
    7170:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7174:	461a      	mov	r2, r3
    7176:	f244 43cc 	movw	r3, #17612	; 0x44cc
    717a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    717e:	18d2      	adds	r2, r2, r3
    7180:	693b      	ldr	r3, [r7, #16]
    7182:	f103 0304 	add.w	r3, r3, #4
    7186:	4610      	mov	r0, r2
    7188:	4619      	mov	r1, r3
    718a:	f7fe ff93 	bl	60b4 <vListInsertEnd>
    718e:	e009      	b.n	71a4 <xTaskResumeFromISR+0xc0>
				else
				{
					/* We cannot access the delayed or ready lists, so will hold this
					task pending until the scheduler is resumed, at which point a
					yield will be performed if necessary. */
					vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    7190:	693b      	ldr	r3, [r7, #16]
    7192:	f103 0318 	add.w	r3, r3, #24
    7196:	f244 5060 	movw	r0, #17760	; 0x4560
    719a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    719e:	4619      	mov	r1, r3
    71a0:	f7fe ff88 	bl	60b4 <vListInsertEnd>
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    71a4:	f04f 0000 	mov.w	r0, #0
    71a8:	f380 8811 	msr	BASEPRI, r0

		return xYieldRequired;
    71ac:	697b      	ldr	r3, [r7, #20]
	}
    71ae:	4618      	mov	r0, r3
    71b0:	f107 0718 	add.w	r7, r7, #24
    71b4:	46bd      	mov	sp, r7
    71b6:	bd80      	pop	{r7, pc}

000071b8 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    71b8:	b580      	push	{r7, lr}
    71ba:	b086      	sub	sp, #24
    71bc:	af04      	add	r7, sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    71be:	f04f 0300 	mov.w	r3, #0
    71c2:	9300      	str	r3, [sp, #0]
    71c4:	f04f 0300 	mov.w	r3, #0
    71c8:	9301      	str	r3, [sp, #4]
    71ca:	f04f 0300 	mov.w	r3, #0
    71ce:	9302      	str	r3, [sp, #8]
    71d0:	f04f 0300 	mov.w	r3, #0
    71d4:	9303      	str	r3, [sp, #12]
    71d6:	f647 00f9 	movw	r0, #30969	; 0x78f9
    71da:	f2c0 0000 	movt	r0, #0
    71de:	f248 21f0 	movw	r1, #33520	; 0x82f0
    71e2:	f2c0 0100 	movt	r1, #0
    71e6:	f04f 0280 	mov.w	r2, #128	; 0x80
    71ea:	f04f 0300 	mov.w	r3, #0
    71ee:	f7ff fc2d 	bl	6a4c <xTaskGenericCreate>
    71f2:	6078      	str	r0, [r7, #4]
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    71f4:	687b      	ldr	r3, [r7, #4]
    71f6:	2b01      	cmp	r3, #1
    71f8:	d113      	bne.n	7222 <vTaskStartScheduler+0x6a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    71fa:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    71fe:	f380 8811 	msr	BASEPRI, r0

		xSchedulerRunning = pdTRUE;
    7202:	f244 53b0 	movw	r3, #17840	; 0x45b0
    7206:	f2c2 0300 	movt	r3, #8192	; 0x2000
    720a:	f04f 0201 	mov.w	r2, #1
    720e:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
    7210:	f244 53a4 	movw	r3, #17828	; 0x45a4
    7214:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7218:	f04f 0200 	mov.w	r2, #0
    721c:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    721e:	f000 fdf1 	bl	7e04 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    7222:	f107 0708 	add.w	r7, r7, #8
    7226:	46bd      	mov	sp, r7
    7228:	bd80      	pop	{r7, pc}
    722a:	bf00      	nop

0000722c <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    722c:	b580      	push	{r7, lr}
    722e:	af00      	add	r7, sp, #0
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    7230:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    7234:	f380 8811 	msr	BASEPRI, r0
	xSchedulerRunning = pdFALSE;
    7238:	f244 53b0 	movw	r3, #17840	; 0x45b0
    723c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7240:	f04f 0200 	mov.w	r2, #0
    7244:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
    7246:	f000 fe07 	bl	7e58 <vPortEndScheduler>
}
    724a:	bd80      	pop	{r7, pc}

0000724c <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    724c:	b480      	push	{r7}
    724e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    7250:	f244 53b4 	movw	r3, #17844	; 0x45b4
    7254:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7258:	681b      	ldr	r3, [r3, #0]
    725a:	f103 0201 	add.w	r2, r3, #1
    725e:	f244 53b4 	movw	r3, #17844	; 0x45b4
    7262:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7266:	601a      	str	r2, [r3, #0]
}
    7268:	46bd      	mov	sp, r7
    726a:	bc80      	pop	{r7}
    726c:	4770      	bx	lr
    726e:	bf00      	nop

00007270 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    7270:	b590      	push	{r4, r7, lr}
    7272:	b083      	sub	sp, #12
    7274:	af00      	add	r7, sp, #0
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    7276:	f04f 0300 	mov.w	r3, #0
    727a:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    727c:	f000 fdfe 	bl	7e7c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
    7280:	f244 53b4 	movw	r3, #17844	; 0x45b4
    7284:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7288:	681b      	ldr	r3, [r3, #0]
    728a:	f103 32ff 	add.w	r2, r3, #4294967295
    728e:	f244 53b4 	movw	r3, #17844	; 0x45b4
    7292:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7296:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    7298:	f244 53b4 	movw	r3, #17844	; 0x45b4
    729c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72a0:	681b      	ldr	r3, [r3, #0]
    72a2:	2b00      	cmp	r3, #0
    72a4:	f040 8085 	bne.w	73b2 <xTaskResumeAll+0x142>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    72a8:	f244 53a0 	movw	r3, #17824	; 0x45a0
    72ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72b0:	681b      	ldr	r3, [r3, #0]
    72b2:	2b00      	cmp	r3, #0
    72b4:	d07d      	beq.n	73b2 <xTaskResumeAll+0x142>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    72b6:	f04f 0300 	mov.w	r3, #0
    72ba:	603b      	str	r3, [r7, #0]

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    72bc:	e03c      	b.n	7338 <xTaskResumeAll+0xc8>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    72be:	f244 5360 	movw	r3, #17760	; 0x4560
    72c2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72c6:	68db      	ldr	r3, [r3, #12]
    72c8:	68dc      	ldr	r4, [r3, #12]
					vListRemove( &( pxTCB->xEventListItem ) );
    72ca:	f104 0318 	add.w	r3, r4, #24
    72ce:	4618      	mov	r0, r3
    72d0:	f7fe ff52 	bl	6178 <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    72d4:	f104 0304 	add.w	r3, r4, #4
    72d8:	4618      	mov	r0, r3
    72da:	f7fe ff4d 	bl	6178 <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    72de:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    72e0:	f244 53ac 	movw	r3, #17836	; 0x45ac
    72e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72e8:	681b      	ldr	r3, [r3, #0]
    72ea:	429a      	cmp	r2, r3
    72ec:	d905      	bls.n	72fa <xTaskResumeAll+0x8a>
    72ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    72f0:	f244 53ac 	movw	r3, #17836	; 0x45ac
    72f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    72f8:	601a      	str	r2, [r3, #0]
    72fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    72fc:	4613      	mov	r3, r2
    72fe:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7302:	189b      	adds	r3, r3, r2
    7304:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7308:	461a      	mov	r2, r3
    730a:	f244 43cc 	movw	r3, #17612	; 0x44cc
    730e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7312:	18d2      	adds	r2, r2, r3
    7314:	f104 0304 	add.w	r3, r4, #4
    7318:	4610      	mov	r0, r2
    731a:	4619      	mov	r1, r3
    731c:	f7fe feca 	bl	60b4 <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    7320:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7322:	f244 43c8 	movw	r3, #17608	; 0x44c8
    7326:	f2c2 0300 	movt	r3, #8192	; 0x2000
    732a:	681b      	ldr	r3, [r3, #0]
    732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    732e:	429a      	cmp	r2, r3
    7330:	d302      	bcc.n	7338 <xTaskResumeAll+0xc8>
					{
						xYieldRequired = pdTRUE;
    7332:	f04f 0301 	mov.w	r3, #1
    7336:	603b      	str	r3, [r7, #0]
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    7338:	f244 5360 	movw	r3, #17760	; 0x4560
    733c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7340:	681b      	ldr	r3, [r3, #0]
    7342:	2b00      	cmp	r3, #0
    7344:	d1bb      	bne.n	72be <xTaskResumeAll+0x4e>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    7346:	f244 53b8 	movw	r3, #17848	; 0x45b8
    734a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    734e:	681b      	ldr	r3, [r3, #0]
    7350:	2b00      	cmp	r3, #0
    7352:	d018      	beq.n	7386 <xTaskResumeAll+0x116>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    7354:	e00d      	b.n	7372 <xTaskResumeAll+0x102>
					{
						vTaskIncrementTick();
    7356:	f000 f871 	bl	743c <vTaskIncrementTick>
						--uxMissedTicks;
    735a:	f244 53b8 	movw	r3, #17848	; 0x45b8
    735e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7362:	681b      	ldr	r3, [r3, #0]
    7364:	f103 32ff 	add.w	r2, r3, #4294967295
    7368:	f244 53b8 	movw	r3, #17848	; 0x45b8
    736c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7370:	601a      	str	r2, [r3, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    7372:	f244 53b8 	movw	r3, #17848	; 0x45b8
    7376:	f2c2 0300 	movt	r3, #8192	; 0x2000
    737a:	681b      	ldr	r3, [r3, #0]
    737c:	2b00      	cmp	r3, #0
    737e:	d1ea      	bne.n	7356 <xTaskResumeAll+0xe6>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    7380:	f04f 0301 	mov.w	r3, #1
    7384:	603b      	str	r3, [r7, #0]
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    7386:	683b      	ldr	r3, [r7, #0]
    7388:	2b01      	cmp	r3, #1
    738a:	d006      	beq.n	739a <xTaskResumeAll+0x12a>
    738c:	f244 53bc 	movw	r3, #17852	; 0x45bc
    7390:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7394:	681b      	ldr	r3, [r3, #0]
    7396:	2b01      	cmp	r3, #1
    7398:	d10b      	bne.n	73b2 <xTaskResumeAll+0x142>
				{
					xAlreadyYielded = pdTRUE;
    739a:	f04f 0301 	mov.w	r3, #1
    739e:	607b      	str	r3, [r7, #4]
					xMissedYield = pdFALSE;
    73a0:	f244 53bc 	movw	r3, #17852	; 0x45bc
    73a4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73a8:	f04f 0200 	mov.w	r2, #0
    73ac:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
    73ae:	f000 fd59 	bl	7e64 <vPortYieldFromISR>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    73b2:	f000 fd79 	bl	7ea8 <vPortExitCritical>

	return xAlreadyYielded;
    73b6:	687b      	ldr	r3, [r7, #4]
}
    73b8:	4618      	mov	r0, r3
    73ba:	f107 070c 	add.w	r7, r7, #12
    73be:	46bd      	mov	sp, r7
    73c0:	bd90      	pop	{r4, r7, pc}
    73c2:	bf00      	nop

000073c4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    73c4:	b580      	push	{r7, lr}
    73c6:	b082      	sub	sp, #8
    73c8:	af00      	add	r7, sp, #0
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    73ca:	f000 fd57 	bl	7e7c <vPortEnterCritical>
	{
		xTicks = xTickCount;
    73ce:	f244 53a4 	movw	r3, #17828	; 0x45a4
    73d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    73d6:	681b      	ldr	r3, [r3, #0]
    73d8:	607b      	str	r3, [r7, #4]
	}
	taskEXIT_CRITICAL();
    73da:	f000 fd65 	bl	7ea8 <vPortExitCritical>

	return xTicks;
    73de:	687b      	ldr	r3, [r7, #4]
}
    73e0:	4618      	mov	r0, r3
    73e2:	f107 0708 	add.w	r7, r7, #8
    73e6:	46bd      	mov	sp, r7
    73e8:	bd80      	pop	{r7, pc}
    73ea:	bf00      	nop

000073ec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    73ec:	b480      	push	{r7}
    73ee:	b083      	sub	sp, #12
    73f0:	af00      	add	r7, sp, #0
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    73f2:	f04f 0300 	mov.w	r3, #0
    73f6:	607b      	str	r3, [r7, #4]
    73f8:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    73fc:	f380 8811 	msr	BASEPRI, r0
	xReturn = xTickCount;
    7400:	f244 53a4 	movw	r3, #17828	; 0x45a4
    7404:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7408:	681b      	ldr	r3, [r3, #0]
    740a:	603b      	str	r3, [r7, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    740c:	f04f 0000 	mov.w	r0, #0
    7410:	f380 8811 	msr	BASEPRI, r0

	return xReturn;
    7414:	683b      	ldr	r3, [r7, #0]
}
    7416:	4618      	mov	r0, r3
    7418:	f107 070c 	add.w	r7, r7, #12
    741c:	46bd      	mov	sp, r7
    741e:	bc80      	pop	{r7}
    7420:	4770      	bx	lr
    7422:	bf00      	nop

00007424 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    7424:	b480      	push	{r7}
    7426:	af00      	add	r7, sp, #0
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    7428:	f244 53a0 	movw	r3, #17824	; 0x45a0
    742c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7430:	681b      	ldr	r3, [r3, #0]
}
    7432:	4618      	mov	r0, r3
    7434:	46bd      	mov	sp, r7
    7436:	bc80      	pop	{r7}
    7438:	4770      	bx	lr
    743a:	bf00      	nop

0000743c <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    743c:	b580      	push	{r7, lr}
    743e:	b084      	sub	sp, #16
    7440:	af00      	add	r7, sp, #0
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    7442:	f244 53b4 	movw	r3, #17844	; 0x45b4
    7446:	f2c2 0300 	movt	r3, #8192	; 0x2000
    744a:	681b      	ldr	r3, [r3, #0]
    744c:	2b00      	cmp	r3, #0
    744e:	f040 80c0 	bne.w	75d2 <vTaskIncrementTick+0x196>
	{
		++xTickCount;
    7452:	f244 53a4 	movw	r3, #17828	; 0x45a4
    7456:	f2c2 0300 	movt	r3, #8192	; 0x2000
    745a:	681b      	ldr	r3, [r3, #0]
    745c:	f103 0201 	add.w	r2, r3, #1
    7460:	f244 53a4 	movw	r3, #17828	; 0x45a4
    7464:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7468:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
    746a:	f244 53a4 	movw	r3, #17828	; 0x45a4
    746e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7472:	681b      	ldr	r3, [r3, #0]
    7474:	2b00      	cmp	r3, #0
    7476:	d140      	bne.n	74fa <vTaskIncrementTick+0xbe>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    7478:	f244 5358 	movw	r3, #17752	; 0x4558
    747c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7480:	681b      	ldr	r3, [r3, #0]
    7482:	60fb      	str	r3, [r7, #12]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    7484:	f244 535c 	movw	r3, #17756	; 0x455c
    7488:	f2c2 0300 	movt	r3, #8192	; 0x2000
    748c:	681a      	ldr	r2, [r3, #0]
    748e:	f244 5358 	movw	r3, #17752	; 0x4558
    7492:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7496:	601a      	str	r2, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
    7498:	f244 535c 	movw	r3, #17756	; 0x455c
    749c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74a0:	68fa      	ldr	r2, [r7, #12]
    74a2:	601a      	str	r2, [r3, #0]
			xNumOfOverflows++;
    74a4:	f244 53c0 	movw	r3, #17856	; 0x45c0
    74a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ac:	681b      	ldr	r3, [r3, #0]
    74ae:	f103 0201 	add.w	r2, r3, #1
    74b2:	f244 53c0 	movw	r3, #17856	; 0x45c0
    74b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74ba:	601a      	str	r2, [r3, #0]
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    74bc:	f244 5358 	movw	r3, #17752	; 0x4558
    74c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74c4:	681b      	ldr	r3, [r3, #0]
    74c6:	681b      	ldr	r3, [r3, #0]
    74c8:	2b00      	cmp	r3, #0
    74ca:	d107      	bne.n	74dc <vTaskIncrementTick+0xa0>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    74cc:	f240 0328 	movw	r3, #40	; 0x28
    74d0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74d4:	f04f 32ff 	mov.w	r2, #4294967295
    74d8:	601a      	str	r2, [r3, #0]
    74da:	e00e      	b.n	74fa <vTaskIncrementTick+0xbe>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    74dc:	f244 5358 	movw	r3, #17752	; 0x4558
    74e0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74e4:	681b      	ldr	r3, [r3, #0]
    74e6:	68db      	ldr	r3, [r3, #12]
    74e8:	68db      	ldr	r3, [r3, #12]
    74ea:	60bb      	str	r3, [r7, #8]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    74ec:	68bb      	ldr	r3, [r7, #8]
    74ee:	685a      	ldr	r2, [r3, #4]
    74f0:	f240 0328 	movw	r3, #40	; 0x28
    74f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    74f8:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    74fa:	f244 53a4 	movw	r3, #17828	; 0x45a4
    74fe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7502:	681a      	ldr	r2, [r3, #0]
    7504:	f240 0328 	movw	r3, #40	; 0x28
    7508:	f2c2 0300 	movt	r3, #8192	; 0x2000
    750c:	681b      	ldr	r3, [r3, #0]
    750e:	429a      	cmp	r2, r3
    7510:	d36d      	bcc.n	75ee <vTaskIncrementTick+0x1b2>
    7512:	f244 5358 	movw	r3, #17752	; 0x4558
    7516:	f2c2 0300 	movt	r3, #8192	; 0x2000
    751a:	681b      	ldr	r3, [r3, #0]
    751c:	681b      	ldr	r3, [r3, #0]
    751e:	2b00      	cmp	r3, #0
    7520:	d107      	bne.n	7532 <vTaskIncrementTick+0xf6>
    7522:	f240 0328 	movw	r3, #40	; 0x28
    7526:	f2c2 0300 	movt	r3, #8192	; 0x2000
    752a:	f04f 32ff 	mov.w	r2, #4294967295
    752e:	601a      	str	r2, [r3, #0]
    7530:	e05d      	b.n	75ee <vTaskIncrementTick+0x1b2>
    7532:	f244 5358 	movw	r3, #17752	; 0x4558
    7536:	f2c2 0300 	movt	r3, #8192	; 0x2000
    753a:	681b      	ldr	r3, [r3, #0]
    753c:	68db      	ldr	r3, [r3, #12]
    753e:	68db      	ldr	r3, [r3, #12]
    7540:	60bb      	str	r3, [r7, #8]
    7542:	68bb      	ldr	r3, [r7, #8]
    7544:	685b      	ldr	r3, [r3, #4]
    7546:	607b      	str	r3, [r7, #4]
    7548:	f244 53a4 	movw	r3, #17828	; 0x45a4
    754c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7550:	681a      	ldr	r2, [r3, #0]
    7552:	687b      	ldr	r3, [r7, #4]
    7554:	429a      	cmp	r2, r3
    7556:	d206      	bcs.n	7566 <vTaskIncrementTick+0x12a>
    7558:	f240 0328 	movw	r3, #40	; 0x28
    755c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7560:	687a      	ldr	r2, [r7, #4]
    7562:	601a      	str	r2, [r3, #0]
    7564:	e043      	b.n	75ee <vTaskIncrementTick+0x1b2>
    7566:	68bb      	ldr	r3, [r7, #8]
    7568:	f103 0304 	add.w	r3, r3, #4
    756c:	4618      	mov	r0, r3
    756e:	f7fe fe03 	bl	6178 <vListRemove>
    7572:	68bb      	ldr	r3, [r7, #8]
    7574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7576:	2b00      	cmp	r3, #0
    7578:	d005      	beq.n	7586 <vTaskIncrementTick+0x14a>
    757a:	68bb      	ldr	r3, [r7, #8]
    757c:	f103 0318 	add.w	r3, r3, #24
    7580:	4618      	mov	r0, r3
    7582:	f7fe fdf9 	bl	6178 <vListRemove>
    7586:	68bb      	ldr	r3, [r7, #8]
    7588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    758a:	f244 53ac 	movw	r3, #17836	; 0x45ac
    758e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7592:	681b      	ldr	r3, [r3, #0]
    7594:	429a      	cmp	r2, r3
    7596:	d906      	bls.n	75a6 <vTaskIncrementTick+0x16a>
    7598:	68bb      	ldr	r3, [r7, #8]
    759a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    759c:	f244 53ac 	movw	r3, #17836	; 0x45ac
    75a0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75a4:	601a      	str	r2, [r3, #0]
    75a6:	68bb      	ldr	r3, [r7, #8]
    75a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    75aa:	4613      	mov	r3, r2
    75ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
    75b0:	189b      	adds	r3, r3, r2
    75b2:	ea4f 0383 	mov.w	r3, r3, lsl #2
    75b6:	461a      	mov	r2, r3
    75b8:	f244 43cc 	movw	r3, #17612	; 0x44cc
    75bc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75c0:	18d2      	adds	r2, r2, r3
    75c2:	68bb      	ldr	r3, [r7, #8]
    75c4:	f103 0304 	add.w	r3, r3, #4
    75c8:	4610      	mov	r0, r2
    75ca:	4619      	mov	r1, r3
    75cc:	f7fe fd72 	bl	60b4 <vListInsertEnd>
    75d0:	e79f      	b.n	7512 <vTaskIncrementTick+0xd6>
	}
	else
	{
		++uxMissedTicks;
    75d2:	f244 53b8 	movw	r3, #17848	; 0x45b8
    75d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75da:	681b      	ldr	r3, [r3, #0]
    75dc:	f103 0201 	add.w	r2, r3, #1
    75e0:	f244 53b8 	movw	r3, #17848	; 0x45b8
    75e4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75e8:	601a      	str	r2, [r3, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
    75ea:	f7f9 f865 	bl	6b8 <vApplicationTickHook>

	#if ( configUSE_TICK_HOOK == 1 )
	{
		/* Guard against the tick hook being called when the missed tick
		count is being unwound (when the scheduler is being unlocked. */
		if( uxMissedTicks == ( unsigned portBASE_TYPE ) 0U )
    75ee:	f244 53b8 	movw	r3, #17848	; 0x45b8
    75f2:	f2c2 0300 	movt	r3, #8192	; 0x2000
    75f6:	681b      	ldr	r3, [r3, #0]
    75f8:	2b00      	cmp	r3, #0
    75fa:	d101      	bne.n	7600 <vTaskIncrementTick+0x1c4>
		{
			vApplicationTickHook();
    75fc:	f7f9 f85c 	bl	6b8 <vApplicationTickHook>
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    7600:	f107 0710 	add.w	r7, r7, #16
    7604:	46bd      	mov	sp, r7
    7606:	bd80      	pop	{r7, pc}

00007608 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    7608:	b480      	push	{r7}
    760a:	b083      	sub	sp, #12
    760c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    760e:	f244 53b4 	movw	r3, #17844	; 0x45b4
    7612:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7616:	681b      	ldr	r3, [r3, #0]
    7618:	2b00      	cmp	r3, #0
    761a:	d014      	beq.n	7646 <vTaskSwitchContext+0x3e>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    761c:	f244 53bc 	movw	r3, #17852	; 0x45bc
    7620:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7624:	f04f 0201 	mov.w	r2, #1
    7628:	601a      	str	r2, [r3, #0]
    762a:	e04c      	b.n	76c6 <vTaskSwitchContext+0xbe>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    762c:	f244 53ac 	movw	r3, #17836	; 0x45ac
    7630:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7634:	681b      	ldr	r3, [r3, #0]
    7636:	f103 32ff 	add.w	r2, r3, #4294967295
    763a:	f244 53ac 	movw	r3, #17836	; 0x45ac
    763e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7642:	601a      	str	r2, [r3, #0]
    7644:	e000      	b.n	7648 <vTaskSwitchContext+0x40>
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    7646:	bf00      	nop
    7648:	f244 53ac 	movw	r3, #17836	; 0x45ac
    764c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7650:	681a      	ldr	r2, [r3, #0]
    7652:	4613      	mov	r3, r2
    7654:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7658:	189b      	adds	r3, r3, r2
    765a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    765e:	461a      	mov	r2, r3
    7660:	f244 43cc 	movw	r3, #17612	; 0x44cc
    7664:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7668:	18d3      	adds	r3, r2, r3
    766a:	681b      	ldr	r3, [r3, #0]
    766c:	2b00      	cmp	r3, #0
    766e:	d0dd      	beq.n	762c <vTaskSwitchContext+0x24>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    7670:	f244 53ac 	movw	r3, #17836	; 0x45ac
    7674:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7678:	681a      	ldr	r2, [r3, #0]
    767a:	4613      	mov	r3, r2
    767c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7680:	189b      	adds	r3, r3, r2
    7682:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7686:	461a      	mov	r2, r3
    7688:	f244 43cc 	movw	r3, #17612	; 0x44cc
    768c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7690:	18d3      	adds	r3, r2, r3
    7692:	607b      	str	r3, [r7, #4]
    7694:	687b      	ldr	r3, [r7, #4]
    7696:	685b      	ldr	r3, [r3, #4]
    7698:	685a      	ldr	r2, [r3, #4]
    769a:	687b      	ldr	r3, [r7, #4]
    769c:	605a      	str	r2, [r3, #4]
    769e:	687b      	ldr	r3, [r7, #4]
    76a0:	685a      	ldr	r2, [r3, #4]
    76a2:	687b      	ldr	r3, [r7, #4]
    76a4:	f103 0308 	add.w	r3, r3, #8
    76a8:	429a      	cmp	r2, r3
    76aa:	d104      	bne.n	76b6 <vTaskSwitchContext+0xae>
    76ac:	687b      	ldr	r3, [r7, #4]
    76ae:	685b      	ldr	r3, [r3, #4]
    76b0:	685a      	ldr	r2, [r3, #4]
    76b2:	687b      	ldr	r3, [r7, #4]
    76b4:	605a      	str	r2, [r3, #4]
    76b6:	687b      	ldr	r3, [r7, #4]
    76b8:	685b      	ldr	r3, [r3, #4]
    76ba:	68da      	ldr	r2, [r3, #12]
    76bc:	f244 43c8 	movw	r3, #17608	; 0x44c8
    76c0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76c4:	601a      	str	r2, [r3, #0]
	
		traceTASK_SWITCHED_IN();
	}
}
    76c6:	f107 070c 	add.w	r7, r7, #12
    76ca:	46bd      	mov	sp, r7
    76cc:	bc80      	pop	{r7}
    76ce:	4770      	bx	lr

000076d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    76d0:	b580      	push	{r7, lr}
    76d2:	b084      	sub	sp, #16
    76d4:	af00      	add	r7, sp, #0
    76d6:	6078      	str	r0, [r7, #4]
    76d8:	6039      	str	r1, [r7, #0]
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    76da:	f244 43c8 	movw	r3, #17608	; 0x44c8
    76de:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76e2:	681b      	ldr	r3, [r3, #0]
    76e4:	f103 0318 	add.w	r3, r3, #24
    76e8:	6878      	ldr	r0, [r7, #4]
    76ea:	4619      	mov	r1, r3
    76ec:	f7fe fd0a 	bl	6104 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    76f0:	f244 43c8 	movw	r3, #17608	; 0x44c8
    76f4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    76f8:	681b      	ldr	r3, [r3, #0]
    76fa:	f103 0304 	add.w	r3, r3, #4
    76fe:	4618      	mov	r0, r3
    7700:	f7fe fd3a 	bl	6178 <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    7704:	683b      	ldr	r3, [r7, #0]
    7706:	f1b3 3fff 	cmp.w	r3, #4294967295
    770a:	d10e      	bne.n	772a <vTaskPlaceOnEventList+0x5a>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    770c:	f244 43c8 	movw	r3, #17608	; 0x44c8
    7710:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7714:	681b      	ldr	r3, [r3, #0]
    7716:	f103 0304 	add.w	r3, r3, #4
    771a:	f244 508c 	movw	r0, #17804	; 0x458c
    771e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    7722:	4619      	mov	r1, r3
    7724:	f7fe fcc6 	bl	60b4 <vListInsertEnd>
    7728:	e00a      	b.n	7740 <vTaskPlaceOnEventList+0x70>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    772a:	f244 53a4 	movw	r3, #17828	; 0x45a4
    772e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7732:	681a      	ldr	r2, [r3, #0]
    7734:	683b      	ldr	r3, [r7, #0]
    7736:	18d3      	adds	r3, r2, r3
    7738:	60fb      	str	r3, [r7, #12]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    773a:	68f8      	ldr	r0, [r7, #12]
    773c:	f000 f9c8 	bl	7ad0 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    7740:	f107 0710 	add.w	r7, r7, #16
    7744:	46bd      	mov	sp, r7
    7746:	bd80      	pop	{r7, pc}

00007748 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    7748:	b580      	push	{r7, lr}
    774a:	b084      	sub	sp, #16
    774c:	af00      	add	r7, sp, #0
    774e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    7750:	687b      	ldr	r3, [r7, #4]
    7752:	68db      	ldr	r3, [r3, #12]
    7754:	68db      	ldr	r3, [r3, #12]
    7756:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    7758:	68bb      	ldr	r3, [r7, #8]
    775a:	f103 0318 	add.w	r3, r3, #24
    775e:	4618      	mov	r0, r3
    7760:	f7fe fd0a 	bl	6178 <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    7764:	f244 53b4 	movw	r3, #17844	; 0x45b4
    7768:	f2c2 0300 	movt	r3, #8192	; 0x2000
    776c:	681b      	ldr	r3, [r3, #0]
    776e:	2b00      	cmp	r3, #0
    7770:	d12b      	bne.n	77ca <xTaskRemoveFromEventList+0x82>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    7772:	68bb      	ldr	r3, [r7, #8]
    7774:	f103 0304 	add.w	r3, r3, #4
    7778:	4618      	mov	r0, r3
    777a:	f7fe fcfd 	bl	6178 <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    777e:	68bb      	ldr	r3, [r7, #8]
    7780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7782:	f244 53ac 	movw	r3, #17836	; 0x45ac
    7786:	f2c2 0300 	movt	r3, #8192	; 0x2000
    778a:	681b      	ldr	r3, [r3, #0]
    778c:	429a      	cmp	r2, r3
    778e:	d906      	bls.n	779e <xTaskRemoveFromEventList+0x56>
    7790:	68bb      	ldr	r3, [r7, #8]
    7792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7794:	f244 53ac 	movw	r3, #17836	; 0x45ac
    7798:	f2c2 0300 	movt	r3, #8192	; 0x2000
    779c:	601a      	str	r2, [r3, #0]
    779e:	68bb      	ldr	r3, [r7, #8]
    77a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    77a2:	4613      	mov	r3, r2
    77a4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    77a8:	189b      	adds	r3, r3, r2
    77aa:	ea4f 0383 	mov.w	r3, r3, lsl #2
    77ae:	461a      	mov	r2, r3
    77b0:	f244 43cc 	movw	r3, #17612	; 0x44cc
    77b4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77b8:	18d2      	adds	r2, r2, r3
    77ba:	68bb      	ldr	r3, [r7, #8]
    77bc:	f103 0304 	add.w	r3, r3, #4
    77c0:	4610      	mov	r0, r2
    77c2:	4619      	mov	r1, r3
    77c4:	f7fe fc76 	bl	60b4 <vListInsertEnd>
    77c8:	e009      	b.n	77de <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    77ca:	68bb      	ldr	r3, [r7, #8]
    77cc:	f103 0318 	add.w	r3, r3, #24
    77d0:	f244 5060 	movw	r0, #17760	; 0x4560
    77d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    77d8:	4619      	mov	r1, r3
    77da:	f7fe fc6b 	bl	60b4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    77de:	68bb      	ldr	r3, [r7, #8]
    77e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    77e2:	f244 43c8 	movw	r3, #17608	; 0x44c8
    77e6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    77ea:	681b      	ldr	r3, [r3, #0]
    77ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    77ee:	429a      	cmp	r2, r3
    77f0:	d303      	bcc.n	77fa <xTaskRemoveFromEventList+0xb2>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    77f2:	f04f 0301 	mov.w	r3, #1
    77f6:	60fb      	str	r3, [r7, #12]
    77f8:	e002      	b.n	7800 <xTaskRemoveFromEventList+0xb8>
	}
	else
	{
		xReturn = pdFALSE;
    77fa:	f04f 0300 	mov.w	r3, #0
    77fe:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
    7800:	68fb      	ldr	r3, [r7, #12]
}
    7802:	4618      	mov	r0, r3
    7804:	f107 0710 	add.w	r7, r7, #16
    7808:	46bd      	mov	sp, r7
    780a:	bd80      	pop	{r7, pc}

0000780c <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    780c:	b480      	push	{r7}
    780e:	b083      	sub	sp, #12
    7810:	af00      	add	r7, sp, #0
    7812:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    7814:	f244 53c0 	movw	r3, #17856	; 0x45c0
    7818:	f2c2 0300 	movt	r3, #8192	; 0x2000
    781c:	681a      	ldr	r2, [r3, #0]
    781e:	687b      	ldr	r3, [r7, #4]
    7820:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
    7822:	f244 53a4 	movw	r3, #17828	; 0x45a4
    7826:	f2c2 0300 	movt	r3, #8192	; 0x2000
    782a:	681a      	ldr	r2, [r3, #0]
    782c:	687b      	ldr	r3, [r7, #4]
    782e:	605a      	str	r2, [r3, #4]
}
    7830:	f107 070c 	add.w	r7, r7, #12
    7834:	46bd      	mov	sp, r7
    7836:	bc80      	pop	{r7}
    7838:	4770      	bx	lr
    783a:	bf00      	nop

0000783c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    783c:	b580      	push	{r7, lr}
    783e:	b084      	sub	sp, #16
    7840:	af00      	add	r7, sp, #0
    7842:	6078      	str	r0, [r7, #4]
    7844:	6039      	str	r1, [r7, #0]
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    7846:	f000 fb19 	bl	7e7c <vPortEnterCritical>
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    784a:	683b      	ldr	r3, [r7, #0]
    784c:	681b      	ldr	r3, [r3, #0]
    784e:	f1b3 3fff 	cmp.w	r3, #4294967295
    7852:	d103      	bne.n	785c <xTaskCheckForTimeOut+0x20>
			{
				xReturn = pdFALSE;
    7854:	f04f 0300 	mov.w	r3, #0
    7858:	60fb      	str	r3, [r7, #12]
    785a:	e038      	b.n	78ce <xTaskCheckForTimeOut+0x92>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    785c:	687b      	ldr	r3, [r7, #4]
    785e:	681a      	ldr	r2, [r3, #0]
    7860:	f244 53c0 	movw	r3, #17856	; 0x45c0
    7864:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7868:	681b      	ldr	r3, [r3, #0]
    786a:	429a      	cmp	r2, r3
    786c:	d00c      	beq.n	7888 <xTaskCheckForTimeOut+0x4c>
    786e:	687b      	ldr	r3, [r7, #4]
    7870:	685a      	ldr	r2, [r3, #4]
    7872:	f244 53a4 	movw	r3, #17828	; 0x45a4
    7876:	f2c2 0300 	movt	r3, #8192	; 0x2000
    787a:	681b      	ldr	r3, [r3, #0]
    787c:	429a      	cmp	r2, r3
    787e:	d803      	bhi.n	7888 <xTaskCheckForTimeOut+0x4c>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    7880:	f04f 0301 	mov.w	r3, #1
    7884:	60fb      	str	r3, [r7, #12]
    7886:	e022      	b.n	78ce <xTaskCheckForTimeOut+0x92>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    7888:	f244 53a4 	movw	r3, #17828	; 0x45a4
    788c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7890:	681a      	ldr	r2, [r3, #0]
    7892:	687b      	ldr	r3, [r7, #4]
    7894:	685b      	ldr	r3, [r3, #4]
    7896:	1ad2      	subs	r2, r2, r3
    7898:	683b      	ldr	r3, [r7, #0]
    789a:	681b      	ldr	r3, [r3, #0]
    789c:	429a      	cmp	r2, r3
    789e:	d213      	bcs.n	78c8 <xTaskCheckForTimeOut+0x8c>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    78a0:	683b      	ldr	r3, [r7, #0]
    78a2:	681a      	ldr	r2, [r3, #0]
    78a4:	687b      	ldr	r3, [r7, #4]
    78a6:	6859      	ldr	r1, [r3, #4]
    78a8:	f244 53a4 	movw	r3, #17828	; 0x45a4
    78ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78b0:	681b      	ldr	r3, [r3, #0]
    78b2:	1acb      	subs	r3, r1, r3
    78b4:	18d2      	adds	r2, r2, r3
    78b6:	683b      	ldr	r3, [r7, #0]
    78b8:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
    78ba:	6878      	ldr	r0, [r7, #4]
    78bc:	f7ff ffa6 	bl	780c <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    78c0:	f04f 0300 	mov.w	r3, #0
    78c4:	60fb      	str	r3, [r7, #12]
    78c6:	e002      	b.n	78ce <xTaskCheckForTimeOut+0x92>
		}
		else
		{
			xReturn = pdTRUE;
    78c8:	f04f 0301 	mov.w	r3, #1
    78cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
    78ce:	f000 faeb 	bl	7ea8 <vPortExitCritical>

	return xReturn;
    78d2:	68fb      	ldr	r3, [r7, #12]
}
    78d4:	4618      	mov	r0, r3
    78d6:	f107 0710 	add.w	r7, r7, #16
    78da:	46bd      	mov	sp, r7
    78dc:	bd80      	pop	{r7, pc}
    78de:	bf00      	nop

000078e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    78e0:	b480      	push	{r7}
    78e2:	af00      	add	r7, sp, #0
	xMissedYield = pdTRUE;
    78e4:	f244 53bc 	movw	r3, #17852	; 0x45bc
    78e8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    78ec:	f04f 0201 	mov.w	r2, #1
    78f0:	601a      	str	r2, [r3, #0]
}
    78f2:	46bd      	mov	sp, r7
    78f4:	bc80      	pop	{r7}
    78f6:	4770      	bx	lr

000078f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    78f8:	b580      	push	{r7, lr}
    78fa:	b082      	sub	sp, #8
    78fc:	af00      	add	r7, sp, #0
    78fe:	6078      	str	r0, [r7, #4]
    7900:	e000      	b.n	7904 <prvIdleTask+0xc>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    7902:	bf00      	nop
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    7904:	f000 f898 	bl	7a38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
    7908:	f244 43cc 	movw	r3, #17612	; 0x44cc
    790c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7910:	681b      	ldr	r3, [r3, #0]
    7912:	2b01      	cmp	r3, #1
    7914:	d9f5      	bls.n	7902 <prvIdleTask+0xa>
			{
				taskYIELD();
    7916:	f000 faa5 	bl	7e64 <vPortYieldFromISR>
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
		}
		#endif
	}
    791a:	e7f2      	b.n	7902 <prvIdleTask+0xa>

0000791c <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    791c:	b580      	push	{r7, lr}
    791e:	b084      	sub	sp, #16
    7920:	af00      	add	r7, sp, #0
    7922:	60f8      	str	r0, [r7, #12]
    7924:	60b9      	str	r1, [r7, #8]
    7926:	607a      	str	r2, [r7, #4]
    7928:	603b      	str	r3, [r7, #0]
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    792a:	68fb      	ldr	r3, [r7, #12]
    792c:	f103 0334 	add.w	r3, r3, #52	; 0x34
    7930:	4618      	mov	r0, r3
    7932:	68b9      	ldr	r1, [r7, #8]
    7934:	f04f 0210 	mov.w	r2, #16
    7938:	f000 fc40 	bl	81bc <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    793c:	68fb      	ldr	r3, [r7, #12]
    793e:	f04f 0200 	mov.w	r2, #0
    7942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    7946:	687b      	ldr	r3, [r7, #4]
    7948:	2b04      	cmp	r3, #4
    794a:	d902      	bls.n	7952 <prvInitialiseTCBVariables+0x36>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    794c:	f04f 0304 	mov.w	r3, #4
    7950:	607b      	str	r3, [r7, #4]
	}

	pxTCB->uxPriority = uxPriority;
    7952:	68fb      	ldr	r3, [r7, #12]
    7954:	687a      	ldr	r2, [r7, #4]
    7956:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
    7958:	68fb      	ldr	r3, [r7, #12]
    795a:	687a      	ldr	r2, [r7, #4]
    795c:	645a      	str	r2, [r3, #68]	; 0x44
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    795e:	68fb      	ldr	r3, [r7, #12]
    7960:	f103 0304 	add.w	r3, r3, #4
    7964:	4618      	mov	r0, r3
    7966:	f7fe fb97 	bl	6098 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    796a:	68fb      	ldr	r3, [r7, #12]
    796c:	f103 0318 	add.w	r3, r3, #24
    7970:	4618      	mov	r0, r3
    7972:	f7fe fb91 	bl	6098 <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    7976:	68fb      	ldr	r3, [r7, #12]
    7978:	68fa      	ldr	r2, [r7, #12]
    797a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    797c:	687b      	ldr	r3, [r7, #4]
    797e:	f1c3 0205 	rsb	r2, r3, #5
    7982:	68fb      	ldr	r3, [r7, #12]
    7984:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    7986:	68fb      	ldr	r3, [r7, #12]
    7988:	68fa      	ldr	r2, [r7, #12]
    798a:	625a      	str	r2, [r3, #36]	; 0x24
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    798c:	f107 0710 	add.w	r7, r7, #16
    7990:	46bd      	mov	sp, r7
    7992:	bd80      	pop	{r7, pc}

00007994 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    7994:	b580      	push	{r7, lr}
    7996:	b082      	sub	sp, #8
    7998:	af00      	add	r7, sp, #0
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    799a:	f04f 0300 	mov.w	r3, #0
    799e:	607b      	str	r3, [r7, #4]
    79a0:	e013      	b.n	79ca <prvInitialiseTaskLists+0x36>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    79a2:	687a      	ldr	r2, [r7, #4]
    79a4:	4613      	mov	r3, r2
    79a6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    79aa:	189b      	adds	r3, r3, r2
    79ac:	ea4f 0383 	mov.w	r3, r3, lsl #2
    79b0:	461a      	mov	r2, r3
    79b2:	f244 43cc 	movw	r3, #17612	; 0x44cc
    79b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    79ba:	18d3      	adds	r3, r2, r3
    79bc:	4618      	mov	r0, r3
    79be:	f7fe fb4b 	bl	6058 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    79c2:	687b      	ldr	r3, [r7, #4]
    79c4:	f103 0301 	add.w	r3, r3, #1
    79c8:	607b      	str	r3, [r7, #4]
    79ca:	687b      	ldr	r3, [r7, #4]
    79cc:	2b04      	cmp	r3, #4
    79ce:	d9e8      	bls.n	79a2 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    79d0:	f244 5030 	movw	r0, #17712	; 0x4530
    79d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    79d8:	f7fe fb3e 	bl	6058 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    79dc:	f244 5044 	movw	r0, #17732	; 0x4544
    79e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    79e4:	f7fe fb38 	bl	6058 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    79e8:	f244 5060 	movw	r0, #17760	; 0x4560
    79ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
    79f0:	f7fe fb32 	bl	6058 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    79f4:	f244 5074 	movw	r0, #17780	; 0x4574
    79f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    79fc:	f7fe fb2c 	bl	6058 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    7a00:	f244 508c 	movw	r0, #17804	; 0x458c
    7a04:	f2c2 0000 	movt	r0, #8192	; 0x2000
    7a08:	f7fe fb26 	bl	6058 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    7a0c:	f244 5358 	movw	r3, #17752	; 0x4558
    7a10:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a14:	f244 5230 	movw	r2, #17712	; 0x4530
    7a18:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7a1c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    7a1e:	f244 535c 	movw	r3, #17756	; 0x455c
    7a22:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a26:	f244 5244 	movw	r2, #17732	; 0x4544
    7a2a:	f2c2 0200 	movt	r2, #8192	; 0x2000
    7a2e:	601a      	str	r2, [r3, #0]
}
    7a30:	f107 0708 	add.w	r7, r7, #8
    7a34:	46bd      	mov	sp, r7
    7a36:	bd80      	pop	{r7, pc}

00007a38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    7a38:	b580      	push	{r7, lr}
    7a3a:	b082      	sub	sp, #8
    7a3c:	af00      	add	r7, sp, #0
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    7a3e:	f244 5388 	movw	r3, #17800	; 0x4588
    7a42:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a46:	681b      	ldr	r3, [r3, #0]
    7a48:	2b00      	cmp	r3, #0
    7a4a:	d03c      	beq.n	7ac6 <prvCheckTasksWaitingTermination+0x8e>
		{
			vTaskSuspendAll();
    7a4c:	f7ff fbfe 	bl	724c <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    7a50:	f244 5374 	movw	r3, #17780	; 0x4574
    7a54:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a58:	681b      	ldr	r3, [r3, #0]
    7a5a:	2b00      	cmp	r3, #0
    7a5c:	bf14      	ite	ne
    7a5e:	2300      	movne	r3, #0
    7a60:	2301      	moveq	r3, #1
    7a62:	607b      	str	r3, [r7, #4]
			xTaskResumeAll();
    7a64:	f7ff fc04 	bl	7270 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    7a68:	687b      	ldr	r3, [r7, #4]
    7a6a:	2b00      	cmp	r3, #0
    7a6c:	d12b      	bne.n	7ac6 <prvCheckTasksWaitingTermination+0x8e>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    7a6e:	f000 fa05 	bl	7e7c <vPortEnterCritical>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    7a72:	f244 5374 	movw	r3, #17780	; 0x4574
    7a76:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a7a:	68db      	ldr	r3, [r3, #12]
    7a7c:	68db      	ldr	r3, [r3, #12]
    7a7e:	603b      	str	r3, [r7, #0]
					vListRemove( &( pxTCB->xGenericListItem ) );
    7a80:	683b      	ldr	r3, [r7, #0]
    7a82:	f103 0304 	add.w	r3, r3, #4
    7a86:	4618      	mov	r0, r3
    7a88:	f7fe fb76 	bl	6178 <vListRemove>
					--uxCurrentNumberOfTasks;
    7a8c:	f244 53a0 	movw	r3, #17824	; 0x45a0
    7a90:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7a94:	681b      	ldr	r3, [r3, #0]
    7a96:	f103 32ff 	add.w	r2, r3, #4294967295
    7a9a:	f244 53a0 	movw	r3, #17824	; 0x45a0
    7a9e:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aa2:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
    7aa4:	f244 5388 	movw	r3, #17800	; 0x4588
    7aa8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aac:	681b      	ldr	r3, [r3, #0]
    7aae:	f103 32ff 	add.w	r2, r3, #4294967295
    7ab2:	f244 5388 	movw	r3, #17800	; 0x4588
    7ab6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aba:	601a      	str	r2, [r3, #0]
				}
				taskEXIT_CRITICAL();
    7abc:	f000 f9f4 	bl	7ea8 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
    7ac0:	6838      	ldr	r0, [r7, #0]
    7ac2:	f000 f883 	bl	7bcc <prvDeleteTCB>
			}
		}
	}
	#endif
}
    7ac6:	f107 0708 	add.w	r7, r7, #8
    7aca:	46bd      	mov	sp, r7
    7acc:	bd80      	pop	{r7, pc}
    7ace:	bf00      	nop

00007ad0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    7ad0:	b580      	push	{r7, lr}
    7ad2:	b082      	sub	sp, #8
    7ad4:	af00      	add	r7, sp, #0
    7ad6:	6078      	str	r0, [r7, #4]
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    7ad8:	f244 43c8 	movw	r3, #17608	; 0x44c8
    7adc:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ae0:	681b      	ldr	r3, [r3, #0]
    7ae2:	687a      	ldr	r2, [r7, #4]
    7ae4:	605a      	str	r2, [r3, #4]

	if( xTimeToWake < xTickCount )
    7ae6:	f244 53a4 	movw	r3, #17828	; 0x45a4
    7aea:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7aee:	681b      	ldr	r3, [r3, #0]
    7af0:	687a      	ldr	r2, [r7, #4]
    7af2:	429a      	cmp	r2, r3
    7af4:	d210      	bcs.n	7b18 <prvAddCurrentTaskToDelayedList+0x48>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    7af6:	f244 535c 	movw	r3, #17756	; 0x455c
    7afa:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7afe:	681a      	ldr	r2, [r3, #0]
    7b00:	f244 43c8 	movw	r3, #17608	; 0x44c8
    7b04:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b08:	681b      	ldr	r3, [r3, #0]
    7b0a:	f103 0304 	add.w	r3, r3, #4
    7b0e:	4610      	mov	r0, r2
    7b10:	4619      	mov	r1, r3
    7b12:	f7fe faf7 	bl	6104 <vListInsert>
    7b16:	e01d      	b.n	7b54 <prvAddCurrentTaskToDelayedList+0x84>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    7b18:	f244 5358 	movw	r3, #17752	; 0x4558
    7b1c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b20:	681a      	ldr	r2, [r3, #0]
    7b22:	f244 43c8 	movw	r3, #17608	; 0x44c8
    7b26:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b2a:	681b      	ldr	r3, [r3, #0]
    7b2c:	f103 0304 	add.w	r3, r3, #4
    7b30:	4610      	mov	r0, r2
    7b32:	4619      	mov	r1, r3
    7b34:	f7fe fae6 	bl	6104 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    7b38:	f240 0328 	movw	r3, #40	; 0x28
    7b3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b40:	681b      	ldr	r3, [r3, #0]
    7b42:	687a      	ldr	r2, [r7, #4]
    7b44:	429a      	cmp	r2, r3
    7b46:	d205      	bcs.n	7b54 <prvAddCurrentTaskToDelayedList+0x84>
		{
			xNextTaskUnblockTime = xTimeToWake;
    7b48:	f240 0328 	movw	r3, #40	; 0x28
    7b4c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7b50:	687a      	ldr	r2, [r7, #4]
    7b52:	601a      	str	r2, [r3, #0]
		}
	}
}
    7b54:	f107 0708 	add.w	r7, r7, #8
    7b58:	46bd      	mov	sp, r7
    7b5a:	bd80      	pop	{r7, pc}

00007b5c <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    7b5c:	b580      	push	{r7, lr}
    7b5e:	b084      	sub	sp, #16
    7b60:	af00      	add	r7, sp, #0
    7b62:	4603      	mov	r3, r0
    7b64:	6039      	str	r1, [r7, #0]
    7b66:	80fb      	strh	r3, [r7, #6]
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    7b68:	f04f 0048 	mov.w	r0, #72	; 0x48
    7b6c:	f7f8 face 	bl	10c <pvPortMalloc>
    7b70:	60f8      	str	r0, [r7, #12]

	if( pxNewTCB != NULL )
    7b72:	68fb      	ldr	r3, [r7, #12]
    7b74:	2b00      	cmp	r3, #0
    7b76:	d023      	beq.n	7bc0 <prvAllocateTCBAndStack+0x64>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    7b78:	683b      	ldr	r3, [r7, #0]
    7b7a:	2b00      	cmp	r3, #0
    7b7c:	d107      	bne.n	7b8e <prvAllocateTCBAndStack+0x32>
    7b7e:	88fb      	ldrh	r3, [r7, #6]
    7b80:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7b84:	4618      	mov	r0, r3
    7b86:	f7f8 fac1 	bl	10c <pvPortMalloc>
    7b8a:	4603      	mov	r3, r0
    7b8c:	e000      	b.n	7b90 <prvAllocateTCBAndStack+0x34>
    7b8e:	683b      	ldr	r3, [r7, #0]
    7b90:	68fa      	ldr	r2, [r7, #12]
    7b92:	6313      	str	r3, [r2, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
    7b94:	68fb      	ldr	r3, [r7, #12]
    7b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7b98:	2b00      	cmp	r3, #0
    7b9a:	d106      	bne.n	7baa <prvAllocateTCBAndStack+0x4e>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    7b9c:	68f8      	ldr	r0, [r7, #12]
    7b9e:	f7f8 fb01 	bl	1a4 <vPortFree>
			pxNewTCB = NULL;
    7ba2:	f04f 0300 	mov.w	r3, #0
    7ba6:	60fb      	str	r3, [r7, #12]
    7ba8:	e00a      	b.n	7bc0 <prvAllocateTCBAndStack+0x64>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    7baa:	68fb      	ldr	r3, [r7, #12]
    7bac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    7bae:	88fb      	ldrh	r3, [r7, #6]
    7bb0:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7bb4:	4610      	mov	r0, r2
    7bb6:	f04f 01a5 	mov.w	r1, #165	; 0xa5
    7bba:	461a      	mov	r2, r3
    7bbc:	f000 fa5a 	bl	8074 <memset>
		}
	}

	return pxNewTCB;
    7bc0:	68fb      	ldr	r3, [r7, #12]
}
    7bc2:	4618      	mov	r0, r3
    7bc4:	f107 0710 	add.w	r7, r7, #16
    7bc8:	46bd      	mov	sp, r7
    7bca:	bd80      	pop	{r7, pc}

00007bcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    7bcc:	b580      	push	{r7, lr}
    7bce:	b082      	sub	sp, #8
    7bd0:	af00      	add	r7, sp, #0
    7bd2:	6078      	str	r0, [r7, #4]
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    7bd4:	687b      	ldr	r3, [r7, #4]
    7bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7bd8:	4618      	mov	r0, r3
    7bda:	f7f8 fae3 	bl	1a4 <vPortFree>
		vPortFree( pxTCB );
    7bde:	6878      	ldr	r0, [r7, #4]
    7be0:	f7f8 fae0 	bl	1a4 <vPortFree>
	}
    7be4:	f107 0708 	add.w	r7, r7, #8
    7be8:	46bd      	mov	sp, r7
    7bea:	bd80      	pop	{r7, pc}

00007bec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	xTaskHandle xTaskGetCurrentTaskHandle( void )
	{
    7bec:	b480      	push	{r7}
    7bee:	b083      	sub	sp, #12
    7bf0:	af00      	add	r7, sp, #0
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
    7bf2:	f244 43c8 	movw	r3, #17608	; 0x44c8
    7bf6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7bfa:	681b      	ldr	r3, [r3, #0]
    7bfc:	607b      	str	r3, [r7, #4]

		return xReturn;
    7bfe:	687b      	ldr	r3, [r7, #4]
	}
    7c00:	4618      	mov	r0, r3
    7c02:	f107 070c 	add.w	r7, r7, #12
    7c06:	46bd      	mov	sp, r7
    7c08:	bc80      	pop	{r7}
    7c0a:	4770      	bx	lr

00007c0c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
    7c0c:	b580      	push	{r7, lr}
    7c0e:	b084      	sub	sp, #16
    7c10:	af00      	add	r7, sp, #0
    7c12:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    7c14:	687b      	ldr	r3, [r7, #4]
    7c16:	60fb      	str	r3, [r7, #12]

		configASSERT( pxMutexHolder );

		if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
    7c18:	68fb      	ldr	r3, [r7, #12]
    7c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c1c:	f244 43c8 	movw	r3, #17608	; 0x44c8
    7c20:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c24:	681b      	ldr	r3, [r3, #0]
    7c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7c28:	429a      	cmp	r2, r3
    7c2a:	d257      	bcs.n	7cdc <vTaskPriorityInherit+0xd0>
		{
			/* Adjust the mutex holder state to account for its new priority. */
			listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
    7c2c:	f244 43c8 	movw	r3, #17608	; 0x44c8
    7c30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c34:	681b      	ldr	r3, [r3, #0]
    7c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7c38:	f1c3 0205 	rsb	r2, r3, #5
    7c3c:	68fb      	ldr	r3, [r7, #12]
    7c3e:	619a      	str	r2, [r3, #24]

			/* If the task being modified is in the ready state it will need to
			be moved in to a new list. */
			if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
    7c40:	68fb      	ldr	r3, [r7, #12]
    7c42:	6959      	ldr	r1, [r3, #20]
    7c44:	68fb      	ldr	r3, [r7, #12]
    7c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c48:	4613      	mov	r3, r2
    7c4a:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7c4e:	189b      	adds	r3, r3, r2
    7c50:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7c54:	461a      	mov	r2, r3
    7c56:	f244 43cc 	movw	r3, #17612	; 0x44cc
    7c5a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c5e:	18d3      	adds	r3, r2, r3
    7c60:	4299      	cmp	r1, r3
    7c62:	d133      	bne.n	7ccc <vTaskPriorityInherit+0xc0>
			{
				vListRemove( &( pxTCB->xGenericListItem ) );
    7c64:	68fb      	ldr	r3, [r7, #12]
    7c66:	f103 0304 	add.w	r3, r3, #4
    7c6a:	4618      	mov	r0, r3
    7c6c:	f7fe fa84 	bl	6178 <vListRemove>

				/* Inherit the priority before being moved into the new list. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    7c70:	f244 43c8 	movw	r3, #17608	; 0x44c8
    7c74:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c78:	681b      	ldr	r3, [r3, #0]
    7c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c7c:	68fb      	ldr	r3, [r7, #12]
    7c7e:	62da      	str	r2, [r3, #44]	; 0x2c
				prvAddTaskToReadyQueue( pxTCB );
    7c80:	68fb      	ldr	r3, [r7, #12]
    7c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c84:	f244 53ac 	movw	r3, #17836	; 0x45ac
    7c88:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c8c:	681b      	ldr	r3, [r3, #0]
    7c8e:	429a      	cmp	r2, r3
    7c90:	d906      	bls.n	7ca0 <vTaskPriorityInherit+0x94>
    7c92:	68fb      	ldr	r3, [r7, #12]
    7c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7c96:	f244 53ac 	movw	r3, #17836	; 0x45ac
    7c9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7c9e:	601a      	str	r2, [r3, #0]
    7ca0:	68fb      	ldr	r3, [r7, #12]
    7ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7ca4:	4613      	mov	r3, r2
    7ca6:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7caa:	189b      	adds	r3, r3, r2
    7cac:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7cb0:	461a      	mov	r2, r3
    7cb2:	f244 43cc 	movw	r3, #17612	; 0x44cc
    7cb6:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cba:	18d2      	adds	r2, r2, r3
    7cbc:	68fb      	ldr	r3, [r7, #12]
    7cbe:	f103 0304 	add.w	r3, r3, #4
    7cc2:	4610      	mov	r0, r2
    7cc4:	4619      	mov	r1, r3
    7cc6:	f7fe f9f5 	bl	60b4 <vListInsertEnd>
    7cca:	e007      	b.n	7cdc <vTaskPriorityInherit+0xd0>
			}
			else
			{
				/* Just inherit the priority. */
				pxTCB->uxPriority = pxCurrentTCB->uxPriority;
    7ccc:	f244 43c8 	movw	r3, #17608	; 0x44c8
    7cd0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7cd4:	681b      	ldr	r3, [r3, #0]
    7cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7cd8:	68fb      	ldr	r3, [r7, #12]
    7cda:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			traceTASK_PRIORITY_INHERIT( pxTCB, pxCurrentTCB->uxPriority );
		}
	}
    7cdc:	f107 0710 	add.w	r7, r7, #16
    7ce0:	46bd      	mov	sp, r7
    7ce2:	bd80      	pop	{r7, pc}

00007ce4 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
    7ce4:	b580      	push	{r7, lr}
    7ce6:	b084      	sub	sp, #16
    7ce8:	af00      	add	r7, sp, #0
    7cea:	6078      	str	r0, [r7, #4]
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;
    7cec:	687b      	ldr	r3, [r7, #4]
    7cee:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
    7cf0:	687b      	ldr	r3, [r7, #4]
    7cf2:	2b00      	cmp	r3, #0
    7cf4:	d03a      	beq.n	7d6c <vTaskPriorityDisinherit+0x88>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    7cf6:	68fb      	ldr	r3, [r7, #12]
    7cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7cfa:	68fb      	ldr	r3, [r7, #12]
    7cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    7cfe:	429a      	cmp	r2, r3
    7d00:	d034      	beq.n	7d6c <vTaskPriorityDisinherit+0x88>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				vListRemove( &( pxTCB->xGenericListItem ) );
    7d02:	68fb      	ldr	r3, [r7, #12]
    7d04:	f103 0304 	add.w	r3, r3, #4
    7d08:	4618      	mov	r0, r3
    7d0a:	f7fe fa35 	bl	6178 <vListRemove>

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
    7d0e:	68fb      	ldr	r3, [r7, #12]
    7d10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    7d12:	68fb      	ldr	r3, [r7, #12]
    7d14:	62da      	str	r2, [r3, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
    7d16:	68fb      	ldr	r3, [r7, #12]
    7d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    7d1a:	f1c3 0205 	rsb	r2, r3, #5
    7d1e:	68fb      	ldr	r3, [r7, #12]
    7d20:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyQueue( pxTCB );
    7d22:	68fb      	ldr	r3, [r7, #12]
    7d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7d26:	f244 53ac 	movw	r3, #17836	; 0x45ac
    7d2a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d2e:	681b      	ldr	r3, [r3, #0]
    7d30:	429a      	cmp	r2, r3
    7d32:	d906      	bls.n	7d42 <vTaskPriorityDisinherit+0x5e>
    7d34:	68fb      	ldr	r3, [r7, #12]
    7d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7d38:	f244 53ac 	movw	r3, #17836	; 0x45ac
    7d3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d40:	601a      	str	r2, [r3, #0]
    7d42:	68fb      	ldr	r3, [r7, #12]
    7d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    7d46:	4613      	mov	r3, r2
    7d48:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7d4c:	189b      	adds	r3, r3, r2
    7d4e:	ea4f 0383 	mov.w	r3, r3, lsl #2
    7d52:	461a      	mov	r2, r3
    7d54:	f244 43cc 	movw	r3, #17612	; 0x44cc
    7d58:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7d5c:	18d2      	adds	r2, r2, r3
    7d5e:	68fb      	ldr	r3, [r7, #12]
    7d60:	f103 0304 	add.w	r3, r3, #4
    7d64:	4610      	mov	r0, r2
    7d66:	4619      	mov	r1, r3
    7d68:	f7fe f9a4 	bl	60b4 <vListInsertEnd>
			}
		}
	}
    7d6c:	f107 0710 	add.w	r7, r7, #16
    7d70:	46bd      	mov	sp, r7
    7d72:	bd80      	pop	{r7, pc}

00007d74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    7d74:	b480      	push	{r7}
    7d76:	b085      	sub	sp, #20
    7d78:	af00      	add	r7, sp, #0
    7d7a:	60f8      	str	r0, [r7, #12]
    7d7c:	60b9      	str	r1, [r7, #8]
    7d7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
    7d80:	68fb      	ldr	r3, [r7, #12]
    7d82:	f1a3 0304 	sub.w	r3, r3, #4
    7d86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
    7d88:	68fb      	ldr	r3, [r7, #12]
    7d8a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7d8e:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    7d90:	68fb      	ldr	r3, [r7, #12]
    7d92:	f1a3 0304 	sub.w	r3, r3, #4
    7d96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
    7d98:	68ba      	ldr	r2, [r7, #8]
    7d9a:	68fb      	ldr	r3, [r7, #12]
    7d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
    7d9e:	68fb      	ldr	r3, [r7, #12]
    7da0:	f1a3 0304 	sub.w	r3, r3, #4
    7da4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = 0;	/* LR */
    7da6:	68fb      	ldr	r3, [r7, #12]
    7da8:	f04f 0200 	mov.w	r2, #0
    7dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
    7dae:	68fb      	ldr	r3, [r7, #12]
    7db0:	f1a3 0314 	sub.w	r3, r3, #20
    7db4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
    7db6:	687a      	ldr	r2, [r7, #4]
    7db8:	68fb      	ldr	r3, [r7, #12]
    7dba:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
    7dbc:	68fb      	ldr	r3, [r7, #12]
    7dbe:	f1a3 0320 	sub.w	r3, r3, #32
    7dc2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
    7dc4:	68fb      	ldr	r3, [r7, #12]
}
    7dc6:	4618      	mov	r0, r3
    7dc8:	f107 0714 	add.w	r7, r7, #20
    7dcc:	46bd      	mov	sp, r7
    7dce:	bc80      	pop	{r7}
    7dd0:	4770      	bx	lr
    7dd2:	bf00      	nop

00007dd4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    7dd4:	4b06      	ldr	r3, [pc, #24]	; (7df0 <pxCurrentTCBConst2>)
    7dd6:	6819      	ldr	r1, [r3, #0]
    7dd8:	6808      	ldr	r0, [r1, #0]
    7dda:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    7dde:	f380 8809 	msr	PSP, r0
    7de2:	f04f 0000 	mov.w	r0, #0
    7de6:	f380 8811 	msr	BASEPRI, r0
    7dea:	f04e 0e0d 	orr.w	lr, lr, #13
    7dee:	4770      	bx	lr

00007df0 <pxCurrentTCBConst2>:
    7df0:	200044c8 	.word	0x200044c8

00007df4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
    7df4:	4862      	ldr	r0, [pc, #392]	; (7f80 <prvSetupTimerInterrupt+0x2c>)
    7df6:	6800      	ldr	r0, [r0, #0]
    7df8:	6800      	ldr	r0, [r0, #0]
    7dfa:	f380 8808 	msr	MSP, r0
    7dfe:	b662      	cpsie	i
    7e00:	df00      	svc	0
    7e02:	bf00      	nop

00007e04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
    7e04:	b580      	push	{r7, lr}
    7e06:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
    7e08:	f64e 5320 	movw	r3, #60704	; 0xed20
    7e0c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    7e10:	f64e 5220 	movw	r2, #60704	; 0xed20
    7e14:	f2ce 0200 	movt	r2, #57344	; 0xe000
    7e18:	6812      	ldr	r2, [r2, #0]
    7e1a:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
    7e1e:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
    7e20:	f64e 5320 	movw	r3, #60704	; 0xed20
    7e24:	f2ce 0300 	movt	r3, #57344	; 0xe000
    7e28:	f64e 5220 	movw	r2, #60704	; 0xed20
    7e2c:	f2ce 0200 	movt	r2, #57344	; 0xe000
    7e30:	6812      	ldr	r2, [r2, #0]
    7e32:	f042 42fe 	orr.w	r2, r2, #2130706432	; 0x7f000000
    7e36:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
    7e38:	f000 f88c 	bl	7f54 <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
    7e3c:	f240 032c 	movw	r3, #44	; 0x2c
    7e40:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e44:	f04f 0200 	mov.w	r2, #0
    7e48:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
    7e4a:	f7ff ffd3 	bl	7df4 <prvPortStartFirstTask>

	/* Should not get here! */
	return 0;
    7e4e:	f04f 0300 	mov.w	r3, #0
}
    7e52:	4618      	mov	r0, r3
    7e54:	bd80      	pop	{r7, pc}
    7e56:	bf00      	nop

00007e58 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    7e58:	b480      	push	{r7}
    7e5a:	af00      	add	r7, sp, #0
	/* It is unlikely that the CM3 port will require this function as there
	is nothing to return to.  */
}
    7e5c:	46bd      	mov	sp, r7
    7e5e:	bc80      	pop	{r7}
    7e60:	4770      	bx	lr
    7e62:	bf00      	nop

00007e64 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
    7e64:	b480      	push	{r7}
    7e66:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    7e68:	f64e 5304 	movw	r3, #60676	; 0xed04
    7e6c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    7e70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7e74:	601a      	str	r2, [r3, #0]
}
    7e76:	46bd      	mov	sp, r7
    7e78:	bc80      	pop	{r7}
    7e7a:	4770      	bx	lr

00007e7c <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    7e7c:	b480      	push	{r7}
    7e7e:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
    7e80:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    7e84:	f380 8811 	msr	BASEPRI, r0
	uxCriticalNesting++;
    7e88:	f240 032c 	movw	r3, #44	; 0x2c
    7e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e90:	681b      	ldr	r3, [r3, #0]
    7e92:	f103 0201 	add.w	r2, r3, #1
    7e96:	f240 032c 	movw	r3, #44	; 0x2c
    7e9a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7e9e:	601a      	str	r2, [r3, #0]
}
    7ea0:	46bd      	mov	sp, r7
    7ea2:	bc80      	pop	{r7}
    7ea4:	4770      	bx	lr
    7ea6:	bf00      	nop

00007ea8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    7ea8:	b480      	push	{r7}
    7eaa:	af00      	add	r7, sp, #0
	uxCriticalNesting--;
    7eac:	f240 032c 	movw	r3, #44	; 0x2c
    7eb0:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7eb4:	681b      	ldr	r3, [r3, #0]
    7eb6:	f103 32ff 	add.w	r2, r3, #4294967295
    7eba:	f240 032c 	movw	r3, #44	; 0x2c
    7ebe:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ec2:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
    7ec4:	f240 032c 	movw	r3, #44	; 0x2c
    7ec8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    7ecc:	681b      	ldr	r3, [r3, #0]
    7ece:	2b00      	cmp	r3, #0
    7ed0:	d103      	bne.n	7eda <vPortExitCritical+0x32>
	{
		portENABLE_INTERRUPTS();
    7ed2:	f04f 0000 	mov.w	r0, #0
    7ed6:	f380 8811 	msr	BASEPRI, r0
	}
}
    7eda:	46bd      	mov	sp, r7
    7edc:	bc80      	pop	{r7}
    7ede:	4770      	bx	lr

00007ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    7ee0:	f3ef 8009 	mrs	r0, PSP
    7ee4:	4b0c      	ldr	r3, [pc, #48]	; (7f18 <pxCurrentTCBConst>)
    7ee6:	681a      	ldr	r2, [r3, #0]
    7ee8:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    7eec:	6010      	str	r0, [r2, #0]
    7eee:	e92d 4008 	stmdb	sp!, {r3, lr}
    7ef2:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    7ef6:	f380 8811 	msr	BASEPRI, r0
    7efa:	f7ff fb85 	bl	7608 <vTaskSwitchContext>
    7efe:	f04f 0000 	mov.w	r0, #0
    7f02:	f380 8811 	msr	BASEPRI, r0
    7f06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    7f0a:	6819      	ldr	r1, [r3, #0]
    7f0c:	6808      	ldr	r0, [r1, #0]
    7f0e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    7f12:	f380 8809 	msr	PSP, r0
    7f16:	4770      	bx	lr

00007f18 <pxCurrentTCBConst>:
    7f18:	200044c8 	.word	0x200044c8

00007f1c <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
    7f1c:	b580      	push	{r7, lr}
    7f1e:	b082      	sub	sp, #8
    7f20:	af00      	add	r7, sp, #0
unsigned long ulDummy;

	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
    7f22:	f64e 5304 	movw	r3, #60676	; 0xed04
    7f26:	f2ce 0300 	movt	r3, #57344	; 0xe000
    7f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    7f2e:	601a      	str	r2, [r3, #0]
	#endif

	ulDummy = portSET_INTERRUPT_MASK_FROM_ISR();
    7f30:	f04f 0300 	mov.w	r3, #0
    7f34:	607b      	str	r3, [r7, #4]
    7f36:	f04f 00bf 	mov.w	r0, #191	; 0xbf
    7f3a:	f380 8811 	msr	BASEPRI, r0
	{
		vTaskIncrementTick();
    7f3e:	f7ff fa7d 	bl	743c <vTaskIncrementTick>
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulDummy );
    7f42:	f04f 0000 	mov.w	r0, #0
    7f46:	f380 8811 	msr	BASEPRI, r0
}
    7f4a:	f107 0708 	add.w	r7, r7, #8
    7f4e:	46bd      	mov	sp, r7
    7f50:	bd80      	pop	{r7, pc}
    7f52:	bf00      	nop

00007f54 <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
    7f54:	b480      	push	{r7}
    7f56:	af00      	add	r7, sp, #0
	/* Configure SysTick to interrupt at the requested rate. */
	*(portNVIC_SYSTICK_LOAD) = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
    7f58:	f24e 0314 	movw	r3, #57364	; 0xe014
    7f5c:	f2ce 0300 	movt	r3, #57344	; 0xe000
    7f60:	f64f 427f 	movw	r2, #64639	; 0xfc7f
    7f64:	f2c0 020a 	movt	r2, #10
    7f68:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSTICK_CTRL) = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
    7f6a:	f24e 0310 	movw	r3, #57360	; 0xe010
    7f6e:	f2ce 0300 	movt	r3, #57344	; 0xe000
    7f72:	f04f 0207 	mov.w	r2, #7
    7f76:	601a      	str	r2, [r3, #0]
}
    7f78:	46bd      	mov	sp, r7
    7f7a:	bc80      	pop	{r7}
    7f7c:	4770      	bx	lr
    7f7e:	0000      	.short	0x0000
    7f80:	e000ed08 	.word	0xe000ed08

00007f84 <memcpy>:
    7f84:	2a03      	cmp	r2, #3
    7f86:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
    7f8a:	d809      	bhi.n	7fa0 <memcpy+0x1c>
    7f8c:	b12a      	cbz	r2, 7f9a <memcpy+0x16>
    7f8e:	2300      	movs	r3, #0
    7f90:	5ccc      	ldrb	r4, [r1, r3]
    7f92:	54c4      	strb	r4, [r0, r3]
    7f94:	3301      	adds	r3, #1
    7f96:	4293      	cmp	r3, r2
    7f98:	d1fa      	bne.n	7f90 <memcpy+0xc>
    7f9a:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
    7f9e:	4770      	bx	lr
    7fa0:	0785      	lsls	r5, r0, #30
    7fa2:	4402      	add	r2, r0
    7fa4:	4603      	mov	r3, r0
    7fa6:	d005      	beq.n	7fb4 <memcpy+0x30>
    7fa8:	f811 4b01 	ldrb.w	r4, [r1], #1
    7fac:	f803 4b01 	strb.w	r4, [r3], #1
    7fb0:	079c      	lsls	r4, r3, #30
    7fb2:	d1f9      	bne.n	7fa8 <memcpy+0x24>
    7fb4:	f011 0503 	ands.w	r5, r1, #3
    7fb8:	d042      	beq.n	8040 <memcpy+0xbc>
    7fba:	1ad4      	subs	r4, r2, r3
    7fbc:	426e      	negs	r6, r5
    7fbe:	2c03      	cmp	r4, #3
    7fc0:	598f      	ldr	r7, [r1, r6]
    7fc2:	dd12      	ble.n	7fea <memcpy+0x66>
    7fc4:	f1c5 0c04 	rsb	ip, r5, #4
    7fc8:	00ed      	lsls	r5, r5, #3
    7fca:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    7fce:	3104      	adds	r1, #4
    7fd0:	fa27 f805 	lsr.w	r8, r7, r5
    7fd4:	598c      	ldr	r4, [r1, r6]
    7fd6:	4627      	mov	r7, r4
    7fd8:	fa04 f40c 	lsl.w	r4, r4, ip
    7fdc:	ea44 0408 	orr.w	r4, r4, r8
    7fe0:	f843 4b04 	str.w	r4, [r3], #4
    7fe4:	1ad4      	subs	r4, r2, r3
    7fe6:	2c03      	cmp	r4, #3
    7fe8:	dcf1      	bgt.n	7fce <memcpy+0x4a>
    7fea:	429a      	cmp	r2, r3
    7fec:	d9d5      	bls.n	7f9a <memcpy+0x16>
    7fee:	2200      	movs	r2, #0
    7ff0:	5c8d      	ldrb	r5, [r1, r2]
    7ff2:	549d      	strb	r5, [r3, r2]
    7ff4:	3201      	adds	r2, #1
    7ff6:	42a2      	cmp	r2, r4
    7ff8:	d1fa      	bne.n	7ff0 <memcpy+0x6c>
    7ffa:	e7ce      	b.n	7f9a <memcpy+0x16>
    7ffc:	680c      	ldr	r4, [r1, #0]
    7ffe:	601c      	str	r4, [r3, #0]
    8000:	684c      	ldr	r4, [r1, #4]
    8002:	605c      	str	r4, [r3, #4]
    8004:	688c      	ldr	r4, [r1, #8]
    8006:	609c      	str	r4, [r3, #8]
    8008:	68cc      	ldr	r4, [r1, #12]
    800a:	60dc      	str	r4, [r3, #12]
    800c:	690c      	ldr	r4, [r1, #16]
    800e:	611c      	str	r4, [r3, #16]
    8010:	694c      	ldr	r4, [r1, #20]
    8012:	615c      	str	r4, [r3, #20]
    8014:	698c      	ldr	r4, [r1, #24]
    8016:	619c      	str	r4, [r3, #24]
    8018:	69cc      	ldr	r4, [r1, #28]
    801a:	61dc      	str	r4, [r3, #28]
    801c:	6a0c      	ldr	r4, [r1, #32]
    801e:	621c      	str	r4, [r3, #32]
    8020:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    8022:	625c      	str	r4, [r3, #36]	; 0x24
    8024:	6a8c      	ldr	r4, [r1, #40]	; 0x28
    8026:	629c      	str	r4, [r3, #40]	; 0x28
    8028:	6acc      	ldr	r4, [r1, #44]	; 0x2c
    802a:	62dc      	str	r4, [r3, #44]	; 0x2c
    802c:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    802e:	631c      	str	r4, [r3, #48]	; 0x30
    8030:	6b4c      	ldr	r4, [r1, #52]	; 0x34
    8032:	635c      	str	r4, [r3, #52]	; 0x34
    8034:	6b8c      	ldr	r4, [r1, #56]	; 0x38
    8036:	639c      	str	r4, [r3, #56]	; 0x38
    8038:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
    803a:	3140      	adds	r1, #64	; 0x40
    803c:	63dc      	str	r4, [r3, #60]	; 0x3c
    803e:	3340      	adds	r3, #64	; 0x40
    8040:	1ad4      	subs	r4, r2, r3
    8042:	2c3f      	cmp	r4, #63	; 0x3f
    8044:	dcda      	bgt.n	7ffc <memcpy+0x78>
    8046:	e00a      	b.n	805e <memcpy+0xda>
    8048:	680c      	ldr	r4, [r1, #0]
    804a:	601c      	str	r4, [r3, #0]
    804c:	684c      	ldr	r4, [r1, #4]
    804e:	605c      	str	r4, [r3, #4]
    8050:	688c      	ldr	r4, [r1, #8]
    8052:	609c      	str	r4, [r3, #8]
    8054:	68cc      	ldr	r4, [r1, #12]
    8056:	3110      	adds	r1, #16
    8058:	60dc      	str	r4, [r3, #12]
    805a:	3310      	adds	r3, #16
    805c:	1ad4      	subs	r4, r2, r3
    805e:	2c0f      	cmp	r4, #15
    8060:	dcf2      	bgt.n	8048 <memcpy+0xc4>
    8062:	e004      	b.n	806e <memcpy+0xea>
    8064:	f851 4b04 	ldr.w	r4, [r1], #4
    8068:	f843 4b04 	str.w	r4, [r3], #4
    806c:	1ad4      	subs	r4, r2, r3
    806e:	2c03      	cmp	r4, #3
    8070:	dcf8      	bgt.n	8064 <memcpy+0xe0>
    8072:	e7ba      	b.n	7fea <memcpy+0x66>

00008074 <memset>:
    8074:	2a03      	cmp	r2, #3
    8076:	b2c9      	uxtb	r1, r1
    8078:	b470      	push	{r4, r5, r6}
    807a:	d807      	bhi.n	808c <memset+0x18>
    807c:	b122      	cbz	r2, 8088 <memset+0x14>
    807e:	2300      	movs	r3, #0
    8080:	54c1      	strb	r1, [r0, r3]
    8082:	3301      	adds	r3, #1
    8084:	4293      	cmp	r3, r2
    8086:	d1fb      	bne.n	8080 <memset+0xc>
    8088:	bc70      	pop	{r4, r5, r6}
    808a:	4770      	bx	lr
    808c:	0785      	lsls	r5, r0, #30
    808e:	4402      	add	r2, r0
    8090:	4603      	mov	r3, r0
    8092:	d003      	beq.n	809c <memset+0x28>
    8094:	f803 1b01 	strb.w	r1, [r3], #1
    8098:	079c      	lsls	r4, r3, #30
    809a:	d1fb      	bne.n	8094 <memset+0x20>
    809c:	020c      	lsls	r4, r1, #8
    809e:	1ad5      	subs	r5, r2, r3
    80a0:	1864      	adds	r4, r4, r1
    80a2:	0426      	lsls	r6, r4, #16
    80a4:	2d3f      	cmp	r5, #63	; 0x3f
    80a6:	4434      	add	r4, r6
    80a8:	dd1a      	ble.n	80e0 <memset+0x6c>
    80aa:	601c      	str	r4, [r3, #0]
    80ac:	605c      	str	r4, [r3, #4]
    80ae:	609c      	str	r4, [r3, #8]
    80b0:	60dc      	str	r4, [r3, #12]
    80b2:	611c      	str	r4, [r3, #16]
    80b4:	615c      	str	r4, [r3, #20]
    80b6:	619c      	str	r4, [r3, #24]
    80b8:	61dc      	str	r4, [r3, #28]
    80ba:	621c      	str	r4, [r3, #32]
    80bc:	625c      	str	r4, [r3, #36]	; 0x24
    80be:	629c      	str	r4, [r3, #40]	; 0x28
    80c0:	62dc      	str	r4, [r3, #44]	; 0x2c
    80c2:	631c      	str	r4, [r3, #48]	; 0x30
    80c4:	635c      	str	r4, [r3, #52]	; 0x34
    80c6:	639c      	str	r4, [r3, #56]	; 0x38
    80c8:	63dc      	str	r4, [r3, #60]	; 0x3c
    80ca:	3340      	adds	r3, #64	; 0x40
    80cc:	1ad5      	subs	r5, r2, r3
    80ce:	2d3f      	cmp	r5, #63	; 0x3f
    80d0:	dceb      	bgt.n	80aa <memset+0x36>
    80d2:	e005      	b.n	80e0 <memset+0x6c>
    80d4:	601c      	str	r4, [r3, #0]
    80d6:	605c      	str	r4, [r3, #4]
    80d8:	609c      	str	r4, [r3, #8]
    80da:	60dc      	str	r4, [r3, #12]
    80dc:	3310      	adds	r3, #16
    80de:	1ad5      	subs	r5, r2, r3
    80e0:	2d0f      	cmp	r5, #15
    80e2:	dcf7      	bgt.n	80d4 <memset+0x60>
    80e4:	e002      	b.n	80ec <memset+0x78>
    80e6:	f843 4b04 	str.w	r4, [r3], #4
    80ea:	1ad5      	subs	r5, r2, r3
    80ec:	2d03      	cmp	r5, #3
    80ee:	dcfa      	bgt.n	80e6 <memset+0x72>
    80f0:	4293      	cmp	r3, r2
    80f2:	d2c9      	bcs.n	8088 <memset+0x14>
    80f4:	f803 1b01 	strb.w	r1, [r3], #1
    80f8:	4293      	cmp	r3, r2
    80fa:	d1fb      	bne.n	80f4 <memset+0x80>
    80fc:	e7c4      	b.n	8088 <memset+0x14>
    80fe:	bf00      	nop

00008100 <strcpy>:
    8100:	ea80 0201 	eor.w	r2, r0, r1
    8104:	4684      	mov	ip, r0
    8106:	f012 0f03 	tst.w	r2, #3
    810a:	d14f      	bne.n	81ac <strcpy+0xac>
    810c:	f011 0f03 	tst.w	r1, #3
    8110:	d132      	bne.n	8178 <strcpy+0x78>
    8112:	f84d 4d04 	str.w	r4, [sp, #-4]!
    8116:	f011 0f04 	tst.w	r1, #4
    811a:	f851 3b04 	ldr.w	r3, [r1], #4
    811e:	d00b      	beq.n	8138 <strcpy+0x38>
    8120:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    8124:	439a      	bics	r2, r3
    8126:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    812a:	bf04      	itt	eq
    812c:	f84c 3b04 	streq.w	r3, [ip], #4
    8130:	f851 3b04 	ldreq.w	r3, [r1], #4
    8134:	d116      	bne.n	8164 <strcpy+0x64>
    8136:	bf00      	nop
    8138:	f851 4b04 	ldr.w	r4, [r1], #4
    813c:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    8140:	439a      	bics	r2, r3
    8142:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8146:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    814a:	d10b      	bne.n	8164 <strcpy+0x64>
    814c:	f84c 3b04 	str.w	r3, [ip], #4
    8150:	43a2      	bics	r2, r4
    8152:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    8156:	bf04      	itt	eq
    8158:	f851 3b04 	ldreq.w	r3, [r1], #4
    815c:	f84c 4b04 	streq.w	r4, [ip], #4
    8160:	d0ea      	beq.n	8138 <strcpy+0x38>
    8162:	4623      	mov	r3, r4
    8164:	f80c 3b01 	strb.w	r3, [ip], #1
    8168:	f013 0fff 	tst.w	r3, #255	; 0xff
    816c:	ea4f 2333 	mov.w	r3, r3, ror #8
    8170:	d1f8      	bne.n	8164 <strcpy+0x64>
    8172:	f85d 4b04 	ldr.w	r4, [sp], #4
    8176:	4770      	bx	lr
    8178:	f011 0f01 	tst.w	r1, #1
    817c:	d006      	beq.n	818c <strcpy+0x8c>
    817e:	f811 2b01 	ldrb.w	r2, [r1], #1
    8182:	f80c 2b01 	strb.w	r2, [ip], #1
    8186:	2a00      	cmp	r2, #0
    8188:	bf08      	it	eq
    818a:	4770      	bxeq	lr
    818c:	f011 0f02 	tst.w	r1, #2
    8190:	d0bf      	beq.n	8112 <strcpy+0x12>
    8192:	f831 2b02 	ldrh.w	r2, [r1], #2
    8196:	f012 0fff 	tst.w	r2, #255	; 0xff
    819a:	bf16      	itet	ne
    819c:	f82c 2b02 	strhne.w	r2, [ip], #2
    81a0:	f88c 2000 	strbeq.w	r2, [ip]
    81a4:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    81a8:	d1b3      	bne.n	8112 <strcpy+0x12>
    81aa:	4770      	bx	lr
    81ac:	f811 2b01 	ldrb.w	r2, [r1], #1
    81b0:	f80c 2b01 	strb.w	r2, [ip], #1
    81b4:	2a00      	cmp	r2, #0
    81b6:	d1f9      	bne.n	81ac <strcpy+0xac>
    81b8:	4770      	bx	lr
    81ba:	bf00      	nop

000081bc <strncpy>:
    81bc:	ea41 0300 	orr.w	r3, r1, r0
    81c0:	f013 0f03 	tst.w	r3, #3
    81c4:	4603      	mov	r3, r0
    81c6:	b470      	push	{r4, r5, r6}
    81c8:	bf14      	ite	ne
    81ca:	2400      	movne	r4, #0
    81cc:	2401      	moveq	r4, #1
    81ce:	2a03      	cmp	r2, #3
    81d0:	bf94      	ite	ls
    81d2:	2400      	movls	r4, #0
    81d4:	f004 0401 	andhi.w	r4, r4, #1
    81d8:	460d      	mov	r5, r1
    81da:	b9c4      	cbnz	r4, 820e <strncpy+0x52>
    81dc:	b1aa      	cbz	r2, 820a <strncpy+0x4e>
    81de:	780c      	ldrb	r4, [r1, #0]
    81e0:	3a01      	subs	r2, #1
    81e2:	f803 4b01 	strb.w	r4, [r3], #1
    81e6:	b14c      	cbz	r4, 81fc <strncpy+0x40>
    81e8:	461c      	mov	r4, r3
    81ea:	b172      	cbz	r2, 820a <strncpy+0x4e>
    81ec:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    81f0:	3a01      	subs	r2, #1
    81f2:	f804 6b01 	strb.w	r6, [r4], #1
    81f6:	4623      	mov	r3, r4
    81f8:	2e00      	cmp	r6, #0
    81fa:	d1f6      	bne.n	81ea <strncpy+0x2e>
    81fc:	b12a      	cbz	r2, 820a <strncpy+0x4e>
    81fe:	189a      	adds	r2, r3, r2
    8200:	2100      	movs	r1, #0
    8202:	f803 1b01 	strb.w	r1, [r3], #1
    8206:	4293      	cmp	r3, r2
    8208:	d1fb      	bne.n	8202 <strncpy+0x46>
    820a:	bc70      	pop	{r4, r5, r6}
    820c:	4770      	bx	lr
    820e:	4629      	mov	r1, r5
    8210:	f855 4b04 	ldr.w	r4, [r5], #4
    8214:	f1a4 3601 	sub.w	r6, r4, #16843009	; 0x1010101
    8218:	ea26 0604 	bic.w	r6, r6, r4
    821c:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
    8220:	d1dc      	bne.n	81dc <strncpy+0x20>
    8222:	3a04      	subs	r2, #4
    8224:	f843 4b04 	str.w	r4, [r3], #4
    8228:	2a03      	cmp	r2, #3
    822a:	d8f0      	bhi.n	820e <strncpy+0x52>
    822c:	4629      	mov	r1, r5
    822e:	e7d5      	b.n	81dc <strncpy+0x20>

00008230 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:	

/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
    8230:	2100      	movs	r1, #0
  b	LoopCopyDataInit
    8232:	f000 b804 	b.w	823e <LoopCopyDataInit>

00008236 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
    8236:	4b0c      	ldr	r3, [pc, #48]	; (8268 <LoopFillZerobss+0x12>)
	ldr	r3, [r3, r1]
    8238:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
    823a:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
    823c:	3104      	adds	r1, #4

0000823e <LoopCopyDataInit>:
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    823e:	480b      	ldr	r0, [pc, #44]	; (826c <LoopFillZerobss+0x16>)
	ldr	r3, =_edata
    8240:	4b0b      	ldr	r3, [pc, #44]	; (8270 <LoopFillZerobss+0x1a>)
	adds	r2, r0, r1
    8242:	1842      	adds	r2, r0, r1
	cmp	r2, r3
    8244:	429a      	cmp	r2, r3
	bcc	CopyDataInit
    8246:	f4ff aff6 	bcc.w	8236 <CopyDataInit>
	ldr	r2, =_sbss
    824a:	4a0a      	ldr	r2, [pc, #40]	; (8274 <LoopFillZerobss+0x1e>)
	b	LoopFillZerobss
    824c:	f000 b803 	b.w	8256 <LoopFillZerobss>

00008250 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
	movs	r3, #0
    8250:	2300      	movs	r3, #0
	str	r3, [r2], #4
    8252:	f842 3b04 	str.w	r3, [r2], #4

00008256 <LoopFillZerobss>:
    
LoopFillZerobss:
	ldr	r3, = _ebss
    8256:	4b08      	ldr	r3, [pc, #32]	; (8278 <LoopFillZerobss+0x22>)
	cmp	r2, r3
    8258:	429a      	cmp	r2, r3
	bcc	FillZerobss
    825a:	f4ff aff9 	bcc.w	8250 <FillZerobss>
/* Call the clock system intitialization function.*/
  bl  SystemInit 	
    825e:	f7f8 fb77 	bl	950 <SystemInit>
/* Call the application's entry point.*/
	bl	main
    8262:	f7f8 f951 	bl	508 <main>
	bx	lr    
    8266:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */  
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
    8268:	000082fc 	.word	0x000082fc
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4
    
LoopCopyDataInit:
	ldr	r0, =_sdata
    826c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
    8270:	20000030 	.word	0x20000030
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
    8274:	20000030 	.word	0x20000030
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4
    
LoopFillZerobss:
	ldr	r3, = _ebss
    8278:	200045c8 	.word	0x200045c8

0000827c <ADC1_2_IRQHandler>:
 * @retval None       
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
    827c:	f7ff bffe 	b.w	827c <ADC1_2_IRQHandler>
    8280:	6c6c6548 	.word	0x6c6c6548
    8284:	0a31206f 	.word	0x0a31206f
    8288:	00000000 	.word	0x00000000
    828c:	6c6c6548 	.word	0x6c6c6548
    8290:	0a32206f 	.word	0x0a32206f
    8294:	00000000 	.word	0x00000000
    8298:	3a746f47 	.word	0x3a746f47
    829c:	00000000 	.word	0x00000000
    82a0:	2044454c 	.word	0x2044454c
    82a4:	73616c46 	.word	0x73616c46
    82a8:	00000068 	.word	0x00000068
    82ac:	69726553 	.word	0x69726553
    82b0:	57206c61 	.word	0x57206c61
    82b4:	65746972 	.word	0x65746972
    82b8:	00003120 	.word	0x00003120
    82bc:	69726553 	.word	0x69726553
    82c0:	57206c61 	.word	0x57206c61
    82c4:	65746972 	.word	0x65746972
    82c8:	00003220 	.word	0x00003220
    82cc:	69726553 	.word	0x69726553
    82d0:	58206c61 	.word	0x58206c61
    82d4:	2074696d 	.word	0x2074696d
    82d8:	00727453 	.word	0x00727453
    82dc:	69726553 	.word	0x69726553
    82e0:	52206c61 	.word	0x52206c61
    82e4:	2f646165 	.word	0x2f646165
    82e8:	74697257 	.word	0x74697257
    82ec:	00000065 	.word	0x00000065
    82f0:	454c4449 	.word	0x454c4449
    82f4:	00000000 	.word	0x00000000

000082f8 <ulKernelPriority>:
    82f8:	0000007f                                ....
